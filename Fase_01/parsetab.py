
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT DATAFRAME DATE DIVIDE DO DUMMI_REGRESSION ELSE END EQUAL EXPLORATION FINANCIAL_STATE FLOAT FOR FROM FUNCTION GTHAN ID IF IMPORT INT LBRACKET LPAREN LSQBRACKET LTHAN MAIN MINUS MODEL_PREDICT MULTIPLY NOTEQUAL OR PLUS PRINT PROGRAM RBRACKET READ RETURN RPAREN RSQBRACKET SEASON_ANALYSIS SEMICOLON TO TREND_PREDICTION VAR VOID WHILEprogram : PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main ENDempty : program_libraries : from_library import_library \n                         | emptyfrom_library : FROM ID\n                    | emptyimport_library : IMPORT ID AS ID  program_librariesvar_type : var_c_type\n                | var_s_typeprogram_vars : VAR var_type  \n            | emptys_type : INT \n              | FLOAT\n              | CHARc_type : DATAFRAME\n              | DATEvar_multiple : var_type\n                    | emptyvar_c_type : c_type ID var_c_type2 SEMICOLON var_multiplevar_c_type2 : COMMA ID var_c_type2\n                   | emptyvar_s_type : s_type ID var_s_array var_s_type2 SEMICOLON var_multiplevar_s_type2 : COMMA ID var_s_array var_s_type2\n                   | emptyvar_s_array : LSQBRACKET CTE_INT RSQBRACKET var_s_matrix\n                   | emptyvar_s_matrix : LSQBRACKET CTE_INT RSQBRACKET\n                    | emptyvariable : ID variable_arrayvariable_array : LSQBRACKET exp RSQBRACKET variable_matrix\n                      | emptyvariable_matrix : LSQBRACKET exp RSQBRACKET\n                       | emptyprogram_function : FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function\n                        | emptyfunction_type : s_type\n                    | VOIDparam : s_type ID param2param2 : COMMA s_type ID param2\n              | emptyreturn : RETURN exp SEMICOLON\n              | emptyprogram_main : MAIN LBRACKET program_vars inner_body RBRACKETbody : LBRACKET inner_body RBRACKETinner_body :  statement inner_body\n                  | emptyassign : variable ASSIGN specialf_assign SEMICOLONspecialf_assign : exp\n                       | special_function\n                       | readcondition : IF LPAREN exp RPAREN body condition2 SEMICOLONcondition2 : ELSE body\n                 | emptyprint : PRINT LPAREN print_many RPAREN SEMICOLONprint_type : expprint_many : print_type print_many2 print_many2 : COMMA print_type print_many2\n                   | emptyread : READ LPAREN variable RPARENcycle : for\n             | whilewhile : DO body WHILE LPAREN exp RPAREN SEMICOLONfor : FOR LPAREN ID TO for_end RPAREN body SEMICOLONfor_end : CTE_INT\n               | IDcall_function : ID LPAREN exp exp_many RPAREN exp_many : COMMA exp exp_many\n                | emptystatement : assign\n                 | condition\n                 | print\n                 | cycle\n                 | call_functionspecial_function : exploration\n                        | financial_state\n                        | dummi_regression\n                        | season_analysis\n                        | trend_prediction\n                        | model_predictexploration : EXPLORATION LPAREN variable explore_var explor_cte RPARENexplore_var : COMMA variable\n                   | emptyexplor_cte : COMMA CTE_INT\n                  | emptyfinancial_state : FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPARENseason_analysis : SEASON_ANALYSIS LPAREN variable RPARENtrend_prediction : TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPARENdummi_regression : DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPARENdr_array : COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET\n                | emptydr_array_mp : COMMA CTE_CHAR dr_array_mp\n                   | emptydr_int : COMMA CTE_INT\n              | emptymodel_predict : MODEL_PREDICT LPAREN variable COMMA variable COMMA RPARENexp : t_exp exp_orexp_or : OR exp\n              | emptyt_exp : expression t_exp_andt_exp_and : AND t_exp\n                 | emptyexpression : m_exp expression_compexpression_comp : expression_comp_2 m_exp\n                       | emptyexpression_comp_2 : EQUAL\n                         | NOTEQUAL\n                         | LTHAN\n                         | GTHANm_exp : term m_exp_srm_exp_sr : m_exp_sr_2 m_exp\n                | emptym_exp_sr_2 : PLUS\n                  | MINUSterm : factor term_pcterm_pc : term_pc_2 term\n               | emptyterm_pc_2 : MULTIPLY\n                 | DIVIDEfactor : factor_exp\n              | factor_cte\n              | variable\n              | call_functionfactor_exp : LPAREN exp RPARENfactor_cte : CTE_INT\n                  | CTE_FLOAT\n                  | CTE_CHAR'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,37,],[0,-1,]),'ID':([2,8,11,13,18,19,20,21,22,23,24,25,26,27,31,32,33,36,38,41,47,49,52,57,59,60,61,62,63,67,68,73,74,75,76,78,83,84,85,86,88,90,92,95,113,140,146,148,150,153,155,156,157,158,159,160,162,164,165,166,167,169,171,172,174,176,177,181,184,187,188,190,191,208,210,212,223,225,226,229,239,250,254,259,265,275,],[3,14,-11,28,-10,-8,-9,34,35,-15,-16,-12,-13,-14,39,-36,-37,46,-2,50,69,-2,79,69,-69,-70,-71,-72,-73,-60,-61,94,-19,-17,-18,-2,130,130,130,130,130,137,69,-22,130,-2,-47,130,195,130,195,195,195,195,195,195,130,-105,-106,-107,-108,130,-112,-113,130,-117,-118,130,130,215,130,69,220,-54,-66,130,195,195,195,195,130,-51,-62,195,-63,195,]),'SEMICOLON':([3,34,35,40,42,43,45,50,51,53,77,79,80,87,89,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,120,122,123,124,125,126,127,128,129,130,144,147,149,152,154,161,163,168,170,173,175,179,186,189,192,193,196,197,204,205,206,207,210,213,214,221,227,230,232,237,251,252,253,256,257,274,278,285,288,],[4,-2,-2,49,-21,-2,-26,-2,78,-24,-20,-2,-2,-29,-31,-2,-25,-28,-121,146,-48,-49,-50,-2,-74,-75,-76,-77,-78,-79,-2,-124,-2,-2,-2,-119,-120,-122,-125,-126,-2,-23,-96,-98,-99,-101,-102,-104,-109,-111,-114,-116,208,-2,-44,-27,-97,-123,-100,-103,-110,-115,-2,-66,-30,-33,-59,-86,250,-53,254,-52,-32,265,267,-80,-95,-88,-85,-87,]),'FROM':([4,46,],[8,8,]),'VAR':([4,5,7,12,38,46,55,140,],[-2,10,-4,-3,10,-2,-7,10,]),'FUNCTION':([4,5,7,9,11,12,18,19,20,46,49,55,74,75,76,78,95,255,],[-2,-2,-4,16,-11,-3,-10,-8,-9,-2,-2,-7,-19,-17,-18,-2,-22,16,]),'MAIN':([4,5,7,9,11,12,15,17,18,19,20,46,49,55,74,75,76,78,95,255,266,],[-2,-2,-4,-2,-11,-3,30,-35,-10,-8,-9,-2,-2,-7,-19,-17,-18,-2,-22,-2,-34,]),'IMPORT':([4,6,7,14,46,],[-2,13,-6,-5,-2,]),'DATAFRAME':([10,49,78,],[23,23,23,]),'DATE':([10,49,78,],[24,24,24,]),'INT':([10,16,48,49,78,142,],[25,25,25,25,25,25,]),'FLOAT':([10,16,48,49,78,142,],[26,26,26,26,26,26,]),'CHAR':([10,16,48,49,78,142,],[27,27,27,27,27,27,]),'IF':([11,18,19,20,38,47,49,57,59,60,61,62,63,67,68,74,75,76,78,92,95,140,146,190,208,210,250,254,265,],[-11,-10,-8,-9,-2,65,-2,65,-69,-70,-71,-72,-73,-60,-61,-19,-17,-18,-2,65,-22,-2,-47,65,-54,-66,-51,-62,-63,]),'PRINT':([11,18,19,20,38,47,49,57,59,60,61,62,63,67,68,74,75,76,78,92,95,140,146,190,208,210,250,254,265,],[-11,-10,-8,-9,-2,66,-2,66,-69,-70,-71,-72,-73,-60,-61,-19,-17,-18,-2,66,-22,-2,-47,66,-54,-66,-51,-62,-63,]),'FOR':([11,18,19,20,38,47,49,57,59,60,61,62,63,67,68,74,75,76,78,92,95,140,146,190,208,210,250,254,265,],[-11,-10,-8,-9,-2,70,-2,70,-69,-70,-71,-72,-73,-60,-61,-19,-17,-18,-2,70,-22,-2,-47,70,-54,-66,-51,-62,-63,]),'DO':([11,18,19,20,38,47,49,57,59,60,61,62,63,67,68,74,75,76,78,92,95,140,146,190,208,210,250,254,265,],[-11,-10,-8,-9,-2,71,-2,71,-69,-70,-71,-72,-73,-60,-61,-19,-17,-18,-2,71,-22,-2,-47,71,-54,-66,-51,-62,-63,]),'RBRACKET':([11,18,19,20,38,47,49,56,57,58,59,60,61,62,63,67,68,74,75,76,78,82,92,95,139,140,146,190,208,210,219,238,240,250,254,265,267,],[-11,-10,-8,-9,-2,-2,-2,81,-2,-46,-69,-70,-71,-72,-73,-60,-61,-19,-17,-18,-2,-45,-2,-22,189,-2,-47,-2,-54,-66,-2,255,-42,-51,-62,-63,-41,]),'RETURN':([11,18,19,20,49,57,58,59,60,61,62,63,67,68,74,75,76,78,82,95,140,146,190,208,210,219,250,254,265,],[-11,-10,-8,-9,-2,-2,-46,-69,-70,-71,-72,-73,-60,-61,-19,-17,-18,-2,-45,-22,-2,-47,-2,-54,-66,239,-51,-62,-63,]),'VOID':([16,],[33,]),'AS':([28,],[36,]),'END':([29,81,],[37,-43,]),'LBRACKET':([30,71,93,178,231,236,],[38,92,140,92,92,92,]),'COMMA':([34,35,43,45,50,79,80,87,89,94,96,98,99,100,105,114,120,122,123,124,125,126,127,128,129,130,133,134,135,147,149,152,154,161,163,168,170,173,175,186,192,193,195,196,197,198,199,200,202,203,204,205,206,209,210,211,213,214,220,222,224,245,246,247,248,249,252,261,262,268,273,276,286,287,],[41,-2,52,-26,41,-2,-2,-29,-31,142,52,-25,-28,-121,-2,-2,-124,-2,-2,-2,-119,-120,-122,-125,-126,-2,181,-55,184,-96,-98,-99,-101,-102,-104,-109,-111,-114,-116,-2,-27,-97,-2,-123,-100,223,225,226,228,229,-103,-110,-115,181,-66,184,-30,-33,142,243,-82,-81,259,260,263,264,-32,270,-90,275,279,281,281,-89,]),'LSQBRACKET':([35,69,79,80,130,186,195,260,],[44,88,44,97,88,212,88,269,]),'LPAREN':([39,65,66,69,70,83,84,85,86,88,112,113,115,116,117,118,119,121,130,138,148,153,162,164,165,166,167,169,171,172,174,176,177,181,184,188,212,239,],[48,84,85,86,90,113,113,113,113,113,150,113,155,156,157,158,159,160,86,188,113,113,113,-105,-106,-107,-108,113,-112,-113,113,-117,-118,113,113,113,113,113,]),'CTE_INT':([44,83,84,85,86,88,97,113,148,153,162,164,165,166,167,169,171,172,174,176,177,181,184,187,188,212,228,239,243,263,270,279,],[54,120,120,120,120,120,145,120,120,120,120,-105,-106,-107,-108,120,-112,-113,120,-117,-118,120,120,217,120,120,248,120,258,273,277,284,]),'RSQBRACKET':([54,87,89,100,105,114,120,122,123,124,125,126,127,128,129,130,136,145,147,149,152,154,161,163,168,170,173,175,186,193,196,197,204,205,206,210,213,214,235,252,276,282,283,286,289,],[80,-29,-31,-121,-2,-2,-124,-2,-2,-2,-119,-120,-122,-125,-126,-2,186,192,-96,-98,-99,-101,-102,-104,-109,-111,-114,-116,-2,-97,-123,-100,-103,-110,-115,-66,-30,-33,252,-32,-2,287,-92,-2,-91,]),'ASSIGN':([64,69,87,89,186,213,214,252,],[83,-2,-29,-31,-2,-30,-33,-32,]),'RPAREN':([72,87,89,94,100,105,114,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,141,143,147,149,151,152,154,161,163,168,170,173,175,180,182,183,185,186,193,194,195,196,197,198,201,204,205,206,209,210,211,213,214,215,216,217,218,220,222,224,233,234,241,242,244,245,247,252,258,261,262,264,271,272,277,280,284,287,],[93,-29,-31,-2,-121,-2,-2,-124,-2,-2,-2,-119,-120,-122,-125,-126,-2,178,179,-2,-55,-2,-38,-40,-96,-98,196,-99,-101,-102,-104,-109,-111,-114,-116,-56,-58,210,-68,-2,-97,221,-2,-123,-100,-2,227,-103,-110,-115,-2,-66,-2,-30,-33,-65,236,-64,237,-2,-2,-82,-57,-67,-39,257,-84,-81,-2,-32,-83,-2,-90,274,278,-94,-93,285,288,-89,]),'READ':([83,],[112,]),'EXPLORATION':([83,],[115,]),'FINANCIAL_STATE':([83,],[116,]),'DUMMI_REGRESSION':([83,],[117,]),'SEASON_ANALYSIS':([83,],[118,]),'TREND_PREDICTION':([83,],[119,]),'MODEL_PREDICT':([83,],[121,]),'CTE_FLOAT':([83,84,85,86,88,113,148,153,162,164,165,166,167,169,171,172,174,176,177,181,184,188,212,239,],[128,128,128,128,128,128,128,128,128,-105,-106,-107,-108,128,-112,-113,128,-117,-118,128,128,128,128,128,]),'CTE_CHAR':([83,84,85,86,88,113,148,153,162,164,165,166,167,169,171,172,174,176,177,181,184,188,212,239,269,281,],[129,129,129,129,129,129,129,129,129,-105,-106,-107,-108,129,-112,-113,129,-117,-118,129,129,129,129,129,276,286,]),'MULTIPLY':([87,89,100,120,124,125,126,127,128,129,130,186,196,210,213,214,252,],[-29,-31,-121,-124,176,-119,-120,-122,-125,-126,-2,-2,-123,-66,-30,-33,-32,]),'DIVIDE':([87,89,100,120,124,125,126,127,128,129,130,186,196,210,213,214,252,],[-29,-31,-121,-124,177,-119,-120,-122,-125,-126,-2,-2,-123,-66,-30,-33,-32,]),'PLUS':([87,89,100,120,123,124,125,126,127,128,129,130,173,175,186,196,206,210,213,214,252,],[-29,-31,-121,-124,171,-2,-119,-120,-122,-125,-126,-2,-114,-116,-2,-123,-115,-66,-30,-33,-32,]),'MINUS':([87,89,100,120,123,124,125,126,127,128,129,130,173,175,186,196,206,210,213,214,252,],[-29,-31,-121,-124,172,-2,-119,-120,-122,-125,-126,-2,-114,-116,-2,-123,-115,-66,-30,-33,-32,]),'EQUAL':([87,89,100,120,122,123,124,125,126,127,128,129,130,168,170,173,175,186,196,205,206,210,213,214,252,],[-29,-31,-121,-124,164,-2,-2,-119,-120,-122,-125,-126,-2,-109,-111,-114,-116,-2,-123,-110,-115,-66,-30,-33,-32,]),'NOTEQUAL':([87,89,100,120,122,123,124,125,126,127,128,129,130,168,170,173,175,186,196,205,206,210,213,214,252,],[-29,-31,-121,-124,165,-2,-2,-119,-120,-122,-125,-126,-2,-109,-111,-114,-116,-2,-123,-110,-115,-66,-30,-33,-32,]),'LTHAN':([87,89,100,120,122,123,124,125,126,127,128,129,130,168,170,173,175,186,196,205,206,210,213,214,252,],[-29,-31,-121,-124,166,-2,-2,-119,-120,-122,-125,-126,-2,-109,-111,-114,-116,-2,-123,-110,-115,-66,-30,-33,-32,]),'GTHAN':([87,89,100,120,122,123,124,125,126,127,128,129,130,168,170,173,175,186,196,205,206,210,213,214,252,],[-29,-31,-121,-124,167,-2,-2,-119,-120,-122,-125,-126,-2,-109,-111,-114,-116,-2,-123,-110,-115,-66,-30,-33,-32,]),'AND':([87,89,100,114,120,122,123,124,125,126,127,128,129,130,161,163,168,170,173,175,186,196,204,205,206,210,213,214,252,],[-29,-31,-121,153,-124,-2,-2,-2,-119,-120,-122,-125,-126,-2,-102,-104,-109,-111,-114,-116,-2,-123,-103,-110,-115,-66,-30,-33,-32,]),'OR':([87,89,100,105,114,120,122,123,124,125,126,127,128,129,130,152,154,161,163,168,170,173,175,186,196,197,204,205,206,210,213,214,252,],[-29,-31,-121,148,-2,-124,-2,-2,-2,-119,-120,-122,-125,-126,-2,-99,-101,-102,-104,-109,-111,-114,-116,-2,-123,-100,-103,-110,-115,-66,-30,-33,-32,]),'WHILE':([91,189,],[138,-44,]),'TO':([137,],[187,]),'ELSE':([189,207,],[-44,231,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_libraries':([4,46,],[5,55,]),'from_library':([4,46,],[6,6,]),'empty':([4,5,9,34,35,38,43,46,47,49,50,57,69,78,79,80,92,94,96,105,114,122,123,124,130,133,135,140,186,190,195,198,207,209,211,219,220,222,247,255,261,276,286,],[7,11,17,42,45,11,53,7,58,76,42,58,89,76,45,99,58,143,53,149,154,163,170,175,89,182,185,11,214,58,89,224,232,182,185,240,143,244,262,17,272,283,283,]),'program_vars':([5,38,140,],[9,47,190,]),'import_library':([6,],[12,]),'program_function':([9,255,],[15,266,]),'var_type':([10,49,78,],[18,75,75,]),'var_c_type':([10,49,78,],[19,19,19,]),'var_s_type':([10,49,78,],[20,20,20,]),'c_type':([10,49,78,],[21,21,21,]),'s_type':([10,16,48,49,78,142,],[22,32,73,22,22,191,]),'program_main':([15,],[29,]),'function_type':([16,],[31,]),'var_c_type2':([34,50,],[40,77,]),'var_s_array':([35,79,],[43,96,]),'var_s_type2':([43,96,],[51,144,]),'inner_body':([47,57,92,190,],[56,82,139,219,]),'statement':([47,57,92,190,],[57,57,57,57,]),'assign':([47,57,92,190,],[59,59,59,59,]),'condition':([47,57,92,190,],[60,60,60,60,]),'print':([47,57,92,190,],[61,61,61,61,]),'cycle':([47,57,92,190,],[62,62,62,62,]),'call_function':([47,57,83,84,85,86,88,92,113,148,153,162,169,174,181,184,188,190,212,239,],[63,63,127,127,127,127,127,63,127,127,127,127,127,127,127,127,127,63,127,127,]),'variable':([47,57,83,84,85,86,88,92,113,148,150,153,155,156,157,158,159,160,162,169,174,181,184,188,190,212,223,225,226,229,239,259,275,],[64,64,100,100,100,100,100,64,100,100,194,100,198,199,200,201,202,203,100,100,100,100,100,100,64,100,245,246,247,249,100,268,280,]),'for':([47,57,92,190,],[67,67,67,67,]),'while':([47,57,92,190,],[68,68,68,68,]),'param':([48,],[72,]),'var_multiple':([49,78,],[74,95,]),'variable_array':([69,130,195,],[87,87,87,]),'body':([71,178,231,236,],[91,207,251,253,]),'var_s_matrix':([80,],[98,]),'specialf_assign':([83,],[101,]),'exp':([83,84,85,86,88,113,148,181,184,188,212,239,],[102,131,134,135,136,151,193,134,211,218,235,256,]),'special_function':([83,],[103,]),'read':([83,],[104,]),'t_exp':([83,84,85,86,88,113,148,153,181,184,188,212,239,],[105,105,105,105,105,105,105,197,105,105,105,105,105,]),'exploration':([83,],[106,]),'financial_state':([83,],[107,]),'dummi_regression':([83,],[108,]),'season_analysis':([83,],[109,]),'trend_prediction':([83,],[110,]),'model_predict':([83,],[111,]),'expression':([83,84,85,86,88,113,148,153,181,184,188,212,239,],[114,114,114,114,114,114,114,114,114,114,114,114,114,]),'m_exp':([83,84,85,86,88,113,148,153,162,169,181,184,188,212,239,],[122,122,122,122,122,122,122,122,204,205,122,122,122,122,122,]),'term':([83,84,85,86,88,113,148,153,162,169,174,181,184,188,212,239,],[123,123,123,123,123,123,123,123,123,123,206,123,123,123,123,123,]),'factor':([83,84,85,86,88,113,148,153,162,169,174,181,184,188,212,239,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'factor_exp':([83,84,85,86,88,113,148,153,162,169,174,181,184,188,212,239,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'factor_cte':([83,84,85,86,88,113,148,153,162,169,174,181,184,188,212,239,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'print_many':([85,],[132,]),'print_type':([85,181,],[133,209,]),'param2':([94,220,],[141,241,]),'exp_or':([105,],[147,]),'t_exp_and':([114,],[152,]),'expression_comp':([122,],[161,]),'expression_comp_2':([122,],[162,]),'m_exp_sr':([123,],[168,]),'m_exp_sr_2':([123,],[169,]),'term_pc':([124,],[173,]),'term_pc_2':([124,],[174,]),'print_many2':([133,209,],[180,233,]),'exp_many':([135,211,],[183,234,]),'variable_matrix':([186,],[213,]),'for_end':([187,],[216,]),'explore_var':([198,],[222,]),'condition2':([207,],[230,]),'return':([219,],[238,]),'explor_cte':([222,],[242,]),'dr_array':([247,],[261,]),'dr_int':([261,],[271,]),'dr_array_mp':([276,286,],[282,289,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END','program',8,'p_program','parser.py',16),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',21),
  ('program_libraries -> from_library import_library','program_libraries',2,'p_program_libraries','parser.py',28),
  ('program_libraries -> empty','program_libraries',1,'p_program_libraries','parser.py',29),
  ('from_library -> FROM ID','from_library',2,'p_from_library','parser.py',32),
  ('from_library -> empty','from_library',1,'p_from_library','parser.py',33),
  ('import_library -> IMPORT ID AS ID program_libraries','import_library',5,'p_import_library','parser.py',36),
  ('var_type -> var_c_type','var_type',1,'p_var_type','parser.py',41),
  ('var_type -> var_s_type','var_type',1,'p_var_type','parser.py',42),
  ('program_vars -> VAR var_type','program_vars',2,'p_program_vars','parser.py',45),
  ('program_vars -> empty','program_vars',1,'p_program_vars','parser.py',46),
  ('s_type -> INT','s_type',1,'p_s_type','parser.py',56),
  ('s_type -> FLOAT','s_type',1,'p_s_type','parser.py',57),
  ('s_type -> CHAR','s_type',1,'p_s_type','parser.py',58),
  ('c_type -> DATAFRAME','c_type',1,'p_c_type','parser.py',61),
  ('c_type -> DATE','c_type',1,'p_c_type','parser.py',62),
  ('var_multiple -> var_type','var_multiple',1,'p_var_multiple','parser.py',66),
  ('var_multiple -> empty','var_multiple',1,'p_var_multiple','parser.py',67),
  ('var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple','var_c_type',5,'p_var_c_type','parser.py',70),
  ('var_c_type2 -> COMMA ID var_c_type2','var_c_type2',3,'p_var_c_type2','parser.py',73),
  ('var_c_type2 -> empty','var_c_type2',1,'p_var_c_type2','parser.py',74),
  ('var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple','var_s_type',6,'p_var_s_type','parser.py',77),
  ('var_s_type2 -> COMMA ID var_s_array var_s_type2','var_s_type2',4,'p_var_s_type2','parser.py',80),
  ('var_s_type2 -> empty','var_s_type2',1,'p_var_s_type2','parser.py',81),
  ('var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix','var_s_array',4,'p_var_s_array','parser.py',84),
  ('var_s_array -> empty','var_s_array',1,'p_var_s_array','parser.py',85),
  ('var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET','var_s_matrix',3,'p_var_s_matrix','parser.py',88),
  ('var_s_matrix -> empty','var_s_matrix',1,'p_var_s_matrix','parser.py',89),
  ('variable -> ID variable_array','variable',2,'p_variable','parser.py',92),
  ('variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix','variable_array',4,'p_variable_array','parser.py',95),
  ('variable_array -> empty','variable_array',1,'p_variable_array','parser.py',96),
  ('variable_matrix -> LSQBRACKET exp RSQBRACKET','variable_matrix',3,'p_variable_matrix','parser.py',99),
  ('variable_matrix -> empty','variable_matrix',1,'p_variable_matrix','parser.py',100),
  ('program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function','program_function',12,'p_program_function','parser.py',105),
  ('program_function -> empty','program_function',1,'p_program_function','parser.py',106),
  ('function_type -> s_type','function_type',1,'p_function_type','parser.py',109),
  ('function_type -> VOID','function_type',1,'p_function_type','parser.py',110),
  ('param -> s_type ID param2','param',3,'p_param','parser.py',114),
  ('param2 -> COMMA s_type ID param2','param2',4,'p_param2','parser.py',117),
  ('param2 -> empty','param2',1,'p_param2','parser.py',118),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',122),
  ('return -> empty','return',1,'p_return','parser.py',123),
  ('program_main -> MAIN LBRACKET program_vars inner_body RBRACKET','program_main',5,'p_program_main','parser.py',127),
  ('body -> LBRACKET inner_body RBRACKET','body',3,'p_body','parser.py',132),
  ('inner_body -> statement inner_body','inner_body',2,'p_inner_body','parser.py',136),
  ('inner_body -> empty','inner_body',1,'p_inner_body','parser.py',137),
  ('assign -> variable ASSIGN specialf_assign SEMICOLON','assign',4,'p_assign','parser.py',142),
  ('specialf_assign -> exp','specialf_assign',1,'p_specialf_assign','parser.py',145),
  ('specialf_assign -> special_function','specialf_assign',1,'p_specialf_assign','parser.py',146),
  ('specialf_assign -> read','specialf_assign',1,'p_specialf_assign','parser.py',147),
  ('condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON','condition',7,'p_condition','parser.py',151),
  ('condition2 -> ELSE body','condition2',2,'p_condition2','parser.py',154),
  ('condition2 -> empty','condition2',1,'p_condition2','parser.py',155),
  ('print -> PRINT LPAREN print_many RPAREN SEMICOLON','print',5,'p_print','parser.py',159),
  ('print_type -> exp','print_type',1,'p_print_type','parser.py',163),
  ('print_many -> print_type print_many2','print_many',2,'p_print_many','parser.py',166),
  ('print_many2 -> COMMA print_type print_many2','print_many2',3,'p_print_many2','parser.py',169),
  ('print_many2 -> empty','print_many2',1,'p_print_many2','parser.py',170),
  ('read -> READ LPAREN variable RPAREN','read',4,'p_read','parser.py',176),
  ('cycle -> for','cycle',1,'p_cycle','parser.py',180),
  ('cycle -> while','cycle',1,'p_cycle','parser.py',181),
  ('while -> DO body WHILE LPAREN exp RPAREN SEMICOLON','while',7,'p_while','parser.py',185),
  ('for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON','for',8,'p_for','parser.py',189),
  ('for_end -> CTE_INT','for_end',1,'p_for_end','parser.py',192),
  ('for_end -> ID','for_end',1,'p_for_end','parser.py',193),
  ('call_function -> ID LPAREN exp exp_many RPAREN','call_function',5,'p_call_function','parser.py',197),
  ('exp_many -> COMMA exp exp_many','exp_many',3,'p_exp_many','parser.py',202),
  ('exp_many -> empty','exp_many',1,'p_exp_many','parser.py',203),
  ('statement -> assign','statement',1,'p_statement','parser.py',207),
  ('statement -> condition','statement',1,'p_statement','parser.py',208),
  ('statement -> print','statement',1,'p_statement','parser.py',209),
  ('statement -> cycle','statement',1,'p_statement','parser.py',210),
  ('statement -> call_function','statement',1,'p_statement','parser.py',211),
  ('special_function -> exploration','special_function',1,'p_special_function','parser.py',215),
  ('special_function -> financial_state','special_function',1,'p_special_function','parser.py',216),
  ('special_function -> dummi_regression','special_function',1,'p_special_function','parser.py',217),
  ('special_function -> season_analysis','special_function',1,'p_special_function','parser.py',218),
  ('special_function -> trend_prediction','special_function',1,'p_special_function','parser.py',219),
  ('special_function -> model_predict','special_function',1,'p_special_function','parser.py',220),
  ('exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN','exploration',6,'p_exploration','parser.py',226),
  ('explore_var -> COMMA variable','explore_var',2,'p_explore_var','parser.py',229),
  ('explore_var -> empty','explore_var',1,'p_explore_var','parser.py',230),
  ('explor_cte -> COMMA CTE_INT','explor_cte',2,'p_explor_cte','parser.py',233),
  ('explor_cte -> empty','explor_cte',1,'p_explor_cte','parser.py',234),
  ('financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN','financial_state',10,'p_financial_state','parser.py',238),
  ('season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN','season_analysis',4,'p_season_analysis','parser.py',242),
  ('trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN','trend_prediction',10,'p_trend_prediction','parser.py',248),
  ('dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN','dummi_regression',8,'p_dummi_regression','parser.py',252),
  ('dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET','dr_array',5,'p_dr_array','parser.py',255),
  ('dr_array -> empty','dr_array',1,'p_dr_array','parser.py',256),
  ('dr_array_mp -> COMMA CTE_CHAR dr_array_mp','dr_array_mp',3,'p_dr_array_mp','parser.py',259),
  ('dr_array_mp -> empty','dr_array_mp',1,'p_dr_array_mp','parser.py',260),
  ('dr_int -> COMMA CTE_INT','dr_int',2,'p_dr_int','parser.py',263),
  ('dr_int -> empty','dr_int',1,'p_dr_int','parser.py',264),
  ('model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN','model_predict',7,'p_model_predict','parser.py',268),
  ('exp -> t_exp exp_or','exp',2,'p_exp','parser.py',273),
  ('exp_or -> OR exp','exp_or',2,'p_exp_or','parser.py',276),
  ('exp_or -> empty','exp_or',1,'p_exp_or','parser.py',277),
  ('t_exp -> expression t_exp_and','t_exp',2,'p_t_exp','parser.py',281),
  ('t_exp_and -> AND t_exp','t_exp_and',2,'p_t_exp_and','parser.py',284),
  ('t_exp_and -> empty','t_exp_and',1,'p_t_exp_and','parser.py',285),
  ('expression -> m_exp expression_comp','expression',2,'p_expression','parser.py',289),
  ('expression_comp -> expression_comp_2 m_exp','expression_comp',2,'p_expression_comp','parser.py',292),
  ('expression_comp -> empty','expression_comp',1,'p_expression_comp','parser.py',293),
  ('expression_comp_2 -> EQUAL','expression_comp_2',1,'p_expression_comp_2','parser.py',296),
  ('expression_comp_2 -> NOTEQUAL','expression_comp_2',1,'p_expression_comp_2','parser.py',297),
  ('expression_comp_2 -> LTHAN','expression_comp_2',1,'p_expression_comp_2','parser.py',298),
  ('expression_comp_2 -> GTHAN','expression_comp_2',1,'p_expression_comp_2','parser.py',299),
  ('m_exp -> term m_exp_sr','m_exp',2,'p_m_exp','parser.py',304),
  ('m_exp_sr -> m_exp_sr_2 m_exp','m_exp_sr',2,'p_m_exp_sr','parser.py',307),
  ('m_exp_sr -> empty','m_exp_sr',1,'p_m_exp_sr','parser.py',308),
  ('m_exp_sr_2 -> PLUS','m_exp_sr_2',1,'p_m_exp_sr_2','parser.py',311),
  ('m_exp_sr_2 -> MINUS','m_exp_sr_2',1,'p_m_exp_sr_2','parser.py',312),
  ('term -> factor term_pc','term',2,'p_term','parser.py',316),
  ('term_pc -> term_pc_2 term','term_pc',2,'p_term_pc','parser.py',319),
  ('term_pc -> empty','term_pc',1,'p_term_pc','parser.py',320),
  ('term_pc_2 -> MULTIPLY','term_pc_2',1,'p_term_pc_2','parser.py',323),
  ('term_pc_2 -> DIVIDE','term_pc_2',1,'p_term_pc_2','parser.py',324),
  ('factor -> factor_exp','factor',1,'p_factor','parser.py',329),
  ('factor -> factor_cte','factor',1,'p_factor','parser.py',330),
  ('factor -> variable','factor',1,'p_factor','parser.py',331),
  ('factor -> call_function','factor',1,'p_factor','parser.py',332),
  ('factor_exp -> LPAREN exp RPAREN','factor_exp',3,'p_factor_exp','parser.py',335),
  ('factor_cte -> CTE_INT','factor_cte',1,'p_factor_cte','parser.py',338),
  ('factor_cte -> CTE_FLOAT','factor_cte',1,'p_factor_cte','parser.py',339),
  ('factor_cte -> CTE_CHAR','factor_cte',1,'p_factor_cte','parser.py',340),
]
