
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT DATAFRAME DATE DIVIDE DO DUMMI_REGRESSION ELSE END EQUAL EXPLORATION FINANCIAL_STATE FLOAT FOR FROM FUNCTION GTHAN ID IF IMPORT INT LBRACKET LPAREN LSQBRACKET LTHAN MAIN MINUS MODEL_PREDICT MULTIPLY NOTEQUAL OR PLUS PRINT PROGRAM RBRACKET READ RETURN RPAREN RSQBRACKET SEASON_ANALYSIS SEMICOLON TO TREND_PREDICTION VAR VOID WHILEprogram : PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main ENDempty : program_libraries : from_library import_library \n                         | emptyfrom_library : FROM ID\n                    | emptyimport_library : IMPORT ID AS ID  program_librariesvar_type : var_c_type\n                | var_s_typeprogram_vars : VAR var_type  \n            | emptys_type : INT \n              | FLOAT\n              | CHARc_type : DATAFRAME\n              | DATEvar_multiple : var_type\n                    | emptyvar_c_type : c_type ID var_c_type2 SEMICOLON var_multiplevar_c_type2 : COMMA ID var_c_type2\n                   | emptyvar_s_type : s_type ID var_s_array var_s_type2 SEMICOLON var_multiplevar_s_type2 : COMMA ID var_s_array var_s_type2\n                   | emptyvar_s_array : LSQBRACKET CTE_INT RSQBRACKET var_s_matrix\n                   | emptyvar_s_matrix : LSQBRACKET CTE_INT RSQBRACKET\n                    | emptyvariable : ID variable_arrayvariable_array : LSQBRACKET exp RSQBRACKET variable_matrix\n                      | emptyvariable_matrix : LSQBRACKET exp RSQBRACKET\n                       | emptyprogram_function : FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKETfunction_type : s_type\n                    | VOIDparam : s_type ID param2param2 : COMMA s_type ID param2\n              | emptyreturn : RETURN exp SEMICOLON\n              | emptyprogram_main : MAIN LBRACKET program_vars inner_body RBRACKETbody : LBRACKET inner_body RBRACKETinner_body :  statement inner_body\n                  | emptyassign : variable ASSIGN specialf_assign SEMICOLONspecialf_assign : exp\n                       | special_function\n                       | readcondition : IF LPAREN exp RPAREN body condition2 SEMICOLONcondition2 : ELSE body\n                 | emptyprint : PRINT LPAREN print_many RPAREN SEMICOLONprint_type : expprint_many : print_type print_many2 print_many2 : COMMA print_type print_many2\n                   | emptyread : READ LPAREN variable RPARENcycle : for\n             | whilewhile : DO body WHILE LPAREN exp RPAREN SEMICOLONfor : FOR LPAREN ID TO for_end RPAREN body SEMICOLONfor_end : CTE_INT\n               | IDcall_function : ID LPAREN exp exp_many RPAREN optional_semicolonoptional_semicolon : empty\n                          | SEMICOLONexp_many : COMMA exp exp_many\n                | emptystatement : assign\n                 | condition\n                 | print\n                 | cycle\n                 | call_functionspecial_function : exploration\n                        | financial_state\n                        | dummi_regression\n                        | season_analysis\n                        | trend_prediction\n                        | model_predictexploration : EXPLORATION LPAREN variable explore_var explor_cte RPARENexplore_var : COMMA variable\n                   | emptyexplor_cte : COMMA CTE_INT\n                  | emptyfinancial_state : FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPARENseason_analysis : SEASON_ANALYSIS LPAREN variable RPARENtrend_prediction : TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPARENdummi_regression : DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPARENdr_array : COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET\n                | emptydr_array_mp : COMMA CTE_CHAR dr_array_mp\n                   | emptydr_int : COMMA CTE_INT\n              | emptymodel_predict : MODEL_PREDICT LPAREN variable COMMA variable COMMA RPARENexp : t_exp exp_orexp_or : OR exp\n              | emptyt_exp : expression t_exp_andt_exp_and : AND t_exp\n                 | emptyexpression : m_exp expression_compexpression_comp : expression_comp_2 m_exp\n                       | emptyexpression_comp_2 : EQUAL\n                         | NOTEQUAL\n                         | LTHAN\n                         | GTHANm_exp : term m_exp_srm_exp_sr : m_exp_sr_2 m_exp\n                | emptym_exp_sr_2 : PLUS\n                  | MINUSterm : factor term_pcterm_pc : term_pc_2 term\n               | emptyterm_pc_2 : MULTIPLY\n                 | DIVIDEfactor : factor_exp\n              | factor_cte\n              | variable\n              | call_functionfactor_exp : LPAREN exp RPARENfactor_cte : CTE_INT\n                  | CTE_FLOAT\n                  | CTE_CHAR'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,36,],[0,-1,]),'ID':([2,8,11,13,17,18,19,20,21,22,23,24,25,26,30,31,32,35,37,40,46,48,51,56,58,59,60,61,62,66,67,72,73,74,75,77,82,83,84,85,87,89,91,94,112,139,145,147,149,152,154,155,156,157,158,159,161,163,164,165,166,168,170,171,173,175,176,180,183,186,187,189,190,207,209,211,222,224,225,228,233,234,235,241,252,256,261,267,276,],[3,14,-11,27,-10,-8,-9,33,34,-15,-16,-12,-13,-14,38,-35,-36,45,-2,49,68,-2,78,68,-70,-71,-72,-73,-74,-59,-60,93,-19,-17,-18,-2,129,129,129,129,129,136,68,-22,129,-2,-46,129,194,129,194,194,194,194,194,194,129,-106,-107,-108,-109,129,-113,-114,129,-118,-119,129,129,214,129,68,219,-53,-2,129,194,194,194,194,-65,-66,-67,129,-50,-61,194,-62,194,]),'SEMICOLON':([3,33,34,39,41,42,44,49,50,52,76,78,79,86,88,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,119,121,122,123,124,125,126,127,128,129,143,146,148,151,153,160,162,167,169,172,174,178,185,188,191,192,195,196,203,204,205,206,209,212,213,220,226,229,231,233,234,235,239,253,254,255,258,259,275,279,286,289,],[4,-2,-2,48,-21,-2,-26,-2,77,-24,-20,-2,-2,-29,-31,-2,-25,-28,-122,145,-47,-48,-49,-2,-75,-76,-77,-78,-79,-80,-2,-125,-2,-2,-2,-120,-121,-123,-126,-127,-2,-23,-97,-99,-100,-102,-103,-105,-110,-112,-115,-117,207,-2,-43,-27,-98,-124,-101,-104,-111,-116,-2,235,-30,-33,-58,-87,252,-52,-65,-66,-67,256,-51,-32,267,268,-81,-96,-89,-86,-88,]),'FROM':([4,45,],[8,8,]),'VAR':([4,5,7,12,37,45,54,139,],[-2,10,-4,-3,10,-2,-7,10,]),'FUNCTION':([4,5,7,9,11,12,17,18,19,45,48,54,73,74,75,77,94,],[-2,-2,-4,16,-11,-3,-10,-8,-9,-2,-2,-7,-19,-17,-18,-2,-22,]),'IMPORT':([4,6,7,14,45,],[-2,13,-6,-5,-2,]),'DATAFRAME':([10,48,77,],[22,22,22,]),'DATE':([10,48,77,],[23,23,23,]),'INT':([10,16,47,48,77,141,],[24,24,24,24,24,24,]),'FLOAT':([10,16,47,48,77,141,],[25,25,25,25,25,25,]),'CHAR':([10,16,47,48,77,141,],[26,26,26,26,26,26,]),'IF':([11,17,18,19,37,46,48,56,58,59,60,61,62,66,67,73,74,75,77,91,94,139,145,189,207,209,233,234,235,252,256,267,],[-11,-10,-8,-9,-2,64,-2,64,-70,-71,-72,-73,-74,-59,-60,-19,-17,-18,-2,64,-22,-2,-46,64,-53,-2,-65,-66,-67,-50,-61,-62,]),'PRINT':([11,17,18,19,37,46,48,56,58,59,60,61,62,66,67,73,74,75,77,91,94,139,145,189,207,209,233,234,235,252,256,267,],[-11,-10,-8,-9,-2,65,-2,65,-70,-71,-72,-73,-74,-59,-60,-19,-17,-18,-2,65,-22,-2,-46,65,-53,-2,-65,-66,-67,-50,-61,-62,]),'FOR':([11,17,18,19,37,46,48,56,58,59,60,61,62,66,67,73,74,75,77,91,94,139,145,189,207,209,233,234,235,252,256,267,],[-11,-10,-8,-9,-2,69,-2,69,-70,-71,-72,-73,-74,-59,-60,-19,-17,-18,-2,69,-22,-2,-46,69,-53,-2,-65,-66,-67,-50,-61,-62,]),'DO':([11,17,18,19,37,46,48,56,58,59,60,61,62,66,67,73,74,75,77,91,94,139,145,189,207,209,233,234,235,252,256,267,],[-11,-10,-8,-9,-2,70,-2,70,-70,-71,-72,-73,-74,-59,-60,-19,-17,-18,-2,70,-22,-2,-46,70,-53,-2,-65,-66,-67,-50,-61,-62,]),'RBRACKET':([11,17,18,19,37,46,48,55,56,57,58,59,60,61,62,66,67,73,74,75,77,81,91,94,138,139,145,189,207,209,218,233,234,235,240,242,252,256,267,268,],[-11,-10,-8,-9,-2,-2,-2,80,-2,-45,-70,-71,-72,-73,-74,-59,-60,-19,-17,-18,-2,-44,-2,-22,188,-2,-46,-2,-53,-2,-2,-65,-66,-67,257,-41,-50,-61,-62,-40,]),'RETURN':([11,17,18,19,48,56,57,58,59,60,61,62,66,67,73,74,75,77,81,94,139,145,189,207,209,218,233,234,235,252,256,267,],[-11,-10,-8,-9,-2,-2,-45,-70,-71,-72,-73,-74,-59,-60,-19,-17,-18,-2,-44,-22,-2,-46,-2,-53,-2,241,-65,-66,-67,-50,-61,-62,]),'MAIN':([15,257,],[29,-34,]),'VOID':([16,],[32,]),'AS':([27,],[35,]),'END':([28,80,],[36,-42,]),'LBRACKET':([29,70,92,177,230,238,],[37,91,139,91,91,91,]),'COMMA':([33,34,42,44,49,78,79,86,88,93,95,97,98,99,104,113,119,121,122,123,124,125,126,127,128,129,132,133,134,146,148,151,153,160,162,167,169,172,174,185,191,192,194,195,196,197,198,199,201,202,203,204,205,208,209,210,212,213,219,221,223,233,234,235,247,248,249,250,251,254,263,264,269,274,277,287,288,],[40,-2,51,-26,40,-2,-2,-29,-31,141,51,-25,-28,-122,-2,-2,-125,-2,-2,-2,-120,-121,-123,-126,-127,-2,180,-54,183,-97,-99,-100,-102,-103,-105,-110,-112,-115,-117,-2,-27,-98,-2,-124,-101,222,224,225,227,228,-104,-111,-116,180,-2,183,-30,-33,141,245,-83,-65,-66,-67,-82,261,262,265,266,-32,271,-91,276,280,282,282,-90,]),'LSQBRACKET':([34,68,78,79,129,185,194,262,],[43,87,43,96,87,211,87,270,]),'LPAREN':([38,64,65,68,69,82,83,84,85,87,111,112,114,115,116,117,118,120,129,137,147,152,161,163,164,165,166,168,170,171,173,175,176,180,183,187,211,241,],[47,83,84,85,89,112,112,112,112,112,149,112,154,155,156,157,158,159,85,187,112,112,112,-106,-107,-108,-109,112,-113,-114,112,-118,-119,112,112,112,112,112,]),'CTE_INT':([43,82,83,84,85,87,96,112,147,152,161,163,164,165,166,168,170,171,173,175,176,180,183,186,187,211,227,241,245,265,271,280,],[53,119,119,119,119,119,144,119,119,119,119,-106,-107,-108,-109,119,-113,-114,119,-118,-119,119,119,216,119,119,250,119,260,274,278,285,]),'RSQBRACKET':([53,86,88,99,104,113,119,121,122,123,124,125,126,127,128,129,135,144,146,148,151,153,160,162,167,169,172,174,185,192,195,196,203,204,205,209,212,213,233,234,235,237,254,277,283,284,287,290,],[79,-29,-31,-122,-2,-2,-125,-2,-2,-2,-120,-121,-123,-126,-127,-2,185,191,-97,-99,-100,-102,-103,-105,-110,-112,-115,-117,-2,-98,-124,-101,-104,-111,-116,-2,-30,-33,-65,-66,-67,254,-32,-2,288,-93,-2,-92,]),'ASSIGN':([63,68,86,88,185,212,213,254,],[82,-2,-29,-31,-2,-30,-33,-32,]),'RPAREN':([71,86,88,93,99,104,113,119,121,122,123,124,125,126,127,128,129,130,131,132,133,134,140,142,146,148,150,151,153,160,162,167,169,172,174,179,181,182,184,185,192,193,194,195,196,197,200,203,204,205,208,209,210,212,213,214,215,216,217,219,221,223,232,233,234,235,236,243,244,246,247,249,254,260,263,264,266,272,273,278,281,285,288,],[92,-29,-31,-2,-122,-2,-2,-125,-2,-2,-2,-120,-121,-123,-126,-127,-2,177,178,-2,-54,-2,-37,-39,-97,-99,195,-100,-102,-103,-105,-110,-112,-115,-117,-55,-57,209,-69,-2,-98,220,-2,-124,-101,-2,226,-104,-111,-116,-2,-2,-2,-30,-33,-64,238,-63,239,-2,-2,-83,-56,-65,-66,-67,-68,-38,259,-85,-82,-2,-32,-84,-2,-91,275,279,-95,-94,286,289,-90,]),'READ':([82,],[111,]),'EXPLORATION':([82,],[114,]),'FINANCIAL_STATE':([82,],[115,]),'DUMMI_REGRESSION':([82,],[116,]),'SEASON_ANALYSIS':([82,],[117,]),'TREND_PREDICTION':([82,],[118,]),'MODEL_PREDICT':([82,],[120,]),'CTE_FLOAT':([82,83,84,85,87,112,147,152,161,163,164,165,166,168,170,171,173,175,176,180,183,187,211,241,],[127,127,127,127,127,127,127,127,127,-106,-107,-108,-109,127,-113,-114,127,-118,-119,127,127,127,127,127,]),'CTE_CHAR':([82,83,84,85,87,112,147,152,161,163,164,165,166,168,170,171,173,175,176,180,183,187,211,241,270,282,],[128,128,128,128,128,128,128,128,128,-106,-107,-108,-109,128,-113,-114,128,-118,-119,128,128,128,128,128,277,287,]),'MULTIPLY':([86,88,99,119,123,124,125,126,127,128,129,185,195,209,212,213,233,234,235,254,],[-29,-31,-122,-125,175,-120,-121,-123,-126,-127,-2,-2,-124,-2,-30,-33,-65,-66,-67,-32,]),'DIVIDE':([86,88,99,119,123,124,125,126,127,128,129,185,195,209,212,213,233,234,235,254,],[-29,-31,-122,-125,176,-120,-121,-123,-126,-127,-2,-2,-124,-2,-30,-33,-65,-66,-67,-32,]),'PLUS':([86,88,99,119,122,123,124,125,126,127,128,129,172,174,185,195,205,209,212,213,233,234,235,254,],[-29,-31,-122,-125,170,-2,-120,-121,-123,-126,-127,-2,-115,-117,-2,-124,-116,-2,-30,-33,-65,-66,-67,-32,]),'MINUS':([86,88,99,119,122,123,124,125,126,127,128,129,172,174,185,195,205,209,212,213,233,234,235,254,],[-29,-31,-122,-125,171,-2,-120,-121,-123,-126,-127,-2,-115,-117,-2,-124,-116,-2,-30,-33,-65,-66,-67,-32,]),'EQUAL':([86,88,99,119,121,122,123,124,125,126,127,128,129,167,169,172,174,185,195,204,205,209,212,213,233,234,235,254,],[-29,-31,-122,-125,163,-2,-2,-120,-121,-123,-126,-127,-2,-110,-112,-115,-117,-2,-124,-111,-116,-2,-30,-33,-65,-66,-67,-32,]),'NOTEQUAL':([86,88,99,119,121,122,123,124,125,126,127,128,129,167,169,172,174,185,195,204,205,209,212,213,233,234,235,254,],[-29,-31,-122,-125,164,-2,-2,-120,-121,-123,-126,-127,-2,-110,-112,-115,-117,-2,-124,-111,-116,-2,-30,-33,-65,-66,-67,-32,]),'LTHAN':([86,88,99,119,121,122,123,124,125,126,127,128,129,167,169,172,174,185,195,204,205,209,212,213,233,234,235,254,],[-29,-31,-122,-125,165,-2,-2,-120,-121,-123,-126,-127,-2,-110,-112,-115,-117,-2,-124,-111,-116,-2,-30,-33,-65,-66,-67,-32,]),'GTHAN':([86,88,99,119,121,122,123,124,125,126,127,128,129,167,169,172,174,185,195,204,205,209,212,213,233,234,235,254,],[-29,-31,-122,-125,166,-2,-2,-120,-121,-123,-126,-127,-2,-110,-112,-115,-117,-2,-124,-111,-116,-2,-30,-33,-65,-66,-67,-32,]),'AND':([86,88,99,113,119,121,122,123,124,125,126,127,128,129,160,162,167,169,172,174,185,195,203,204,205,209,212,213,233,234,235,254,],[-29,-31,-122,152,-125,-2,-2,-2,-120,-121,-123,-126,-127,-2,-103,-105,-110,-112,-115,-117,-2,-124,-104,-111,-116,-2,-30,-33,-65,-66,-67,-32,]),'OR':([86,88,99,104,113,119,121,122,123,124,125,126,127,128,129,151,153,160,162,167,169,172,174,185,195,196,203,204,205,209,212,213,233,234,235,254,],[-29,-31,-122,147,-2,-125,-2,-2,-2,-120,-121,-123,-126,-127,-2,-100,-102,-103,-105,-110,-112,-115,-117,-2,-124,-101,-104,-111,-116,-2,-30,-33,-65,-66,-67,-32,]),'WHILE':([90,188,],[137,-43,]),'TO':([136,],[186,]),'ELSE':([188,206,],[-43,230,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_libraries':([4,45,],[5,54,]),'from_library':([4,45,],[6,6,]),'empty':([4,5,33,34,37,42,45,46,48,49,56,68,77,78,79,91,93,95,104,113,121,122,123,129,132,134,139,185,189,194,197,206,208,209,210,218,219,221,249,263,277,287,],[7,11,41,44,11,52,7,57,75,41,57,88,75,44,98,57,142,52,148,153,162,169,174,88,181,184,11,213,57,88,223,231,181,234,184,242,142,246,264,273,284,284,]),'program_vars':([5,37,139,],[9,46,189,]),'import_library':([6,],[12,]),'program_function':([9,],[15,]),'var_type':([10,48,77,],[17,74,74,]),'var_c_type':([10,48,77,],[18,18,18,]),'var_s_type':([10,48,77,],[19,19,19,]),'c_type':([10,48,77,],[20,20,20,]),'s_type':([10,16,47,48,77,141,],[21,31,72,21,21,190,]),'program_main':([15,],[28,]),'function_type':([16,],[30,]),'var_c_type2':([33,49,],[39,76,]),'var_s_array':([34,78,],[42,95,]),'var_s_type2':([42,95,],[50,143,]),'inner_body':([46,56,91,189,],[55,81,138,218,]),'statement':([46,56,91,189,],[56,56,56,56,]),'assign':([46,56,91,189,],[58,58,58,58,]),'condition':([46,56,91,189,],[59,59,59,59,]),'print':([46,56,91,189,],[60,60,60,60,]),'cycle':([46,56,91,189,],[61,61,61,61,]),'call_function':([46,56,82,83,84,85,87,91,112,147,152,161,168,173,180,183,187,189,211,241,],[62,62,126,126,126,126,126,62,126,126,126,126,126,126,126,126,126,62,126,126,]),'variable':([46,56,82,83,84,85,87,91,112,147,149,152,154,155,156,157,158,159,161,168,173,180,183,187,189,211,222,224,225,228,241,261,276,],[63,63,99,99,99,99,99,63,99,99,193,99,197,198,199,200,201,202,99,99,99,99,99,99,63,99,247,248,249,251,99,269,281,]),'for':([46,56,91,189,],[66,66,66,66,]),'while':([46,56,91,189,],[67,67,67,67,]),'param':([47,],[71,]),'var_multiple':([48,77,],[73,94,]),'variable_array':([68,129,194,],[86,86,86,]),'body':([70,177,230,238,],[90,206,253,255,]),'var_s_matrix':([79,],[97,]),'specialf_assign':([82,],[100,]),'exp':([82,83,84,85,87,112,147,180,183,187,211,241,],[101,130,133,134,135,150,192,133,210,217,237,258,]),'special_function':([82,],[102,]),'read':([82,],[103,]),'t_exp':([82,83,84,85,87,112,147,152,180,183,187,211,241,],[104,104,104,104,104,104,104,196,104,104,104,104,104,]),'exploration':([82,],[105,]),'financial_state':([82,],[106,]),'dummi_regression':([82,],[107,]),'season_analysis':([82,],[108,]),'trend_prediction':([82,],[109,]),'model_predict':([82,],[110,]),'expression':([82,83,84,85,87,112,147,152,180,183,187,211,241,],[113,113,113,113,113,113,113,113,113,113,113,113,113,]),'m_exp':([82,83,84,85,87,112,147,152,161,168,180,183,187,211,241,],[121,121,121,121,121,121,121,121,203,204,121,121,121,121,121,]),'term':([82,83,84,85,87,112,147,152,161,168,173,180,183,187,211,241,],[122,122,122,122,122,122,122,122,122,122,205,122,122,122,122,122,]),'factor':([82,83,84,85,87,112,147,152,161,168,173,180,183,187,211,241,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'factor_exp':([82,83,84,85,87,112,147,152,161,168,173,180,183,187,211,241,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'factor_cte':([82,83,84,85,87,112,147,152,161,168,173,180,183,187,211,241,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'print_many':([84,],[131,]),'print_type':([84,180,],[132,208,]),'param2':([93,219,],[140,243,]),'exp_or':([104,],[146,]),'t_exp_and':([113,],[151,]),'expression_comp':([121,],[160,]),'expression_comp_2':([121,],[161,]),'m_exp_sr':([122,],[167,]),'m_exp_sr_2':([122,],[168,]),'term_pc':([123,],[172,]),'term_pc_2':([123,],[173,]),'print_many2':([132,208,],[179,232,]),'exp_many':([134,210,],[182,236,]),'variable_matrix':([185,],[212,]),'for_end':([186,],[215,]),'explore_var':([197,],[221,]),'condition2':([206,],[229,]),'optional_semicolon':([209,],[233,]),'return':([218,],[240,]),'explor_cte':([221,],[244,]),'dr_array':([249,],[263,]),'dr_int':([263,],[272,]),'dr_array_mp':([277,287,],[283,290,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END','program',8,'p_program','parser.py',16),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',21),
  ('program_libraries -> from_library import_library','program_libraries',2,'p_program_libraries','parser.py',28),
  ('program_libraries -> empty','program_libraries',1,'p_program_libraries','parser.py',29),
  ('from_library -> FROM ID','from_library',2,'p_from_library','parser.py',32),
  ('from_library -> empty','from_library',1,'p_from_library','parser.py',33),
  ('import_library -> IMPORT ID AS ID program_libraries','import_library',5,'p_import_library','parser.py',36),
  ('var_type -> var_c_type','var_type',1,'p_var_type','parser.py',41),
  ('var_type -> var_s_type','var_type',1,'p_var_type','parser.py',42),
  ('program_vars -> VAR var_type','program_vars',2,'p_program_vars','parser.py',45),
  ('program_vars -> empty','program_vars',1,'p_program_vars','parser.py',46),
  ('s_type -> INT','s_type',1,'p_s_type','parser.py',56),
  ('s_type -> FLOAT','s_type',1,'p_s_type','parser.py',57),
  ('s_type -> CHAR','s_type',1,'p_s_type','parser.py',58),
  ('c_type -> DATAFRAME','c_type',1,'p_c_type','parser.py',61),
  ('c_type -> DATE','c_type',1,'p_c_type','parser.py',62),
  ('var_multiple -> var_type','var_multiple',1,'p_var_multiple','parser.py',66),
  ('var_multiple -> empty','var_multiple',1,'p_var_multiple','parser.py',67),
  ('var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple','var_c_type',5,'p_var_c_type','parser.py',70),
  ('var_c_type2 -> COMMA ID var_c_type2','var_c_type2',3,'p_var_c_type2','parser.py',73),
  ('var_c_type2 -> empty','var_c_type2',1,'p_var_c_type2','parser.py',74),
  ('var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple','var_s_type',6,'p_var_s_type','parser.py',77),
  ('var_s_type2 -> COMMA ID var_s_array var_s_type2','var_s_type2',4,'p_var_s_type2','parser.py',80),
  ('var_s_type2 -> empty','var_s_type2',1,'p_var_s_type2','parser.py',81),
  ('var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix','var_s_array',4,'p_var_s_array','parser.py',84),
  ('var_s_array -> empty','var_s_array',1,'p_var_s_array','parser.py',85),
  ('var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET','var_s_matrix',3,'p_var_s_matrix','parser.py',88),
  ('var_s_matrix -> empty','var_s_matrix',1,'p_var_s_matrix','parser.py',89),
  ('variable -> ID variable_array','variable',2,'p_variable','parser.py',92),
  ('variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix','variable_array',4,'p_variable_array','parser.py',95),
  ('variable_array -> empty','variable_array',1,'p_variable_array','parser.py',96),
  ('variable_matrix -> LSQBRACKET exp RSQBRACKET','variable_matrix',3,'p_variable_matrix','parser.py',99),
  ('variable_matrix -> empty','variable_matrix',1,'p_variable_matrix','parser.py',100),
  ('program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET','program_function',11,'p_program_function','parser.py',105),
  ('function_type -> s_type','function_type',1,'p_function_type','parser.py',108),
  ('function_type -> VOID','function_type',1,'p_function_type','parser.py',109),
  ('param -> s_type ID param2','param',3,'p_param','parser.py',113),
  ('param2 -> COMMA s_type ID param2','param2',4,'p_param2','parser.py',116),
  ('param2 -> empty','param2',1,'p_param2','parser.py',117),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',121),
  ('return -> empty','return',1,'p_return','parser.py',122),
  ('program_main -> MAIN LBRACKET program_vars inner_body RBRACKET','program_main',5,'p_program_main','parser.py',126),
  ('body -> LBRACKET inner_body RBRACKET','body',3,'p_body','parser.py',131),
  ('inner_body -> statement inner_body','inner_body',2,'p_inner_body','parser.py',135),
  ('inner_body -> empty','inner_body',1,'p_inner_body','parser.py',136),
  ('assign -> variable ASSIGN specialf_assign SEMICOLON','assign',4,'p_assign','parser.py',141),
  ('specialf_assign -> exp','specialf_assign',1,'p_specialf_assign','parser.py',144),
  ('specialf_assign -> special_function','specialf_assign',1,'p_specialf_assign','parser.py',145),
  ('specialf_assign -> read','specialf_assign',1,'p_specialf_assign','parser.py',146),
  ('condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON','condition',7,'p_condition','parser.py',150),
  ('condition2 -> ELSE body','condition2',2,'p_condition2','parser.py',153),
  ('condition2 -> empty','condition2',1,'p_condition2','parser.py',154),
  ('print -> PRINT LPAREN print_many RPAREN SEMICOLON','print',5,'p_print','parser.py',158),
  ('print_type -> exp','print_type',1,'p_print_type','parser.py',162),
  ('print_many -> print_type print_many2','print_many',2,'p_print_many','parser.py',165),
  ('print_many2 -> COMMA print_type print_many2','print_many2',3,'p_print_many2','parser.py',168),
  ('print_many2 -> empty','print_many2',1,'p_print_many2','parser.py',169),
  ('read -> READ LPAREN variable RPAREN','read',4,'p_read','parser.py',175),
  ('cycle -> for','cycle',1,'p_cycle','parser.py',179),
  ('cycle -> while','cycle',1,'p_cycle','parser.py',180),
  ('while -> DO body WHILE LPAREN exp RPAREN SEMICOLON','while',7,'p_while','parser.py',184),
  ('for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON','for',8,'p_for','parser.py',188),
  ('for_end -> CTE_INT','for_end',1,'p_for_end','parser.py',191),
  ('for_end -> ID','for_end',1,'p_for_end','parser.py',192),
  ('call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon','call_function',6,'p_call_function','parser.py',196),
  ('optional_semicolon -> empty','optional_semicolon',1,'p_optional_semicolon','parser.py',199),
  ('optional_semicolon -> SEMICOLON','optional_semicolon',1,'p_optional_semicolon','parser.py',200),
  ('exp_many -> COMMA exp exp_many','exp_many',3,'p_exp_many','parser.py',204),
  ('exp_many -> empty','exp_many',1,'p_exp_many','parser.py',205),
  ('statement -> assign','statement',1,'p_statement','parser.py',209),
  ('statement -> condition','statement',1,'p_statement','parser.py',210),
  ('statement -> print','statement',1,'p_statement','parser.py',211),
  ('statement -> cycle','statement',1,'p_statement','parser.py',212),
  ('statement -> call_function','statement',1,'p_statement','parser.py',213),
  ('special_function -> exploration','special_function',1,'p_special_function','parser.py',217),
  ('special_function -> financial_state','special_function',1,'p_special_function','parser.py',218),
  ('special_function -> dummi_regression','special_function',1,'p_special_function','parser.py',219),
  ('special_function -> season_analysis','special_function',1,'p_special_function','parser.py',220),
  ('special_function -> trend_prediction','special_function',1,'p_special_function','parser.py',221),
  ('special_function -> model_predict','special_function',1,'p_special_function','parser.py',222),
  ('exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN','exploration',6,'p_exploration','parser.py',228),
  ('explore_var -> COMMA variable','explore_var',2,'p_explore_var','parser.py',231),
  ('explore_var -> empty','explore_var',1,'p_explore_var','parser.py',232),
  ('explor_cte -> COMMA CTE_INT','explor_cte',2,'p_explor_cte','parser.py',235),
  ('explor_cte -> empty','explor_cte',1,'p_explor_cte','parser.py',236),
  ('financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN','financial_state',10,'p_financial_state','parser.py',240),
  ('season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN','season_analysis',4,'p_season_analysis','parser.py',244),
  ('trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN','trend_prediction',10,'p_trend_prediction','parser.py',250),
  ('dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN','dummi_regression',8,'p_dummi_regression','parser.py',254),
  ('dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET','dr_array',5,'p_dr_array','parser.py',257),
  ('dr_array -> empty','dr_array',1,'p_dr_array','parser.py',258),
  ('dr_array_mp -> COMMA CTE_CHAR dr_array_mp','dr_array_mp',3,'p_dr_array_mp','parser.py',261),
  ('dr_array_mp -> empty','dr_array_mp',1,'p_dr_array_mp','parser.py',262),
  ('dr_int -> COMMA CTE_INT','dr_int',2,'p_dr_int','parser.py',265),
  ('dr_int -> empty','dr_int',1,'p_dr_int','parser.py',266),
  ('model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN','model_predict',7,'p_model_predict','parser.py',270),
  ('exp -> t_exp exp_or','exp',2,'p_exp','parser.py',275),
  ('exp_or -> OR exp','exp_or',2,'p_exp_or','parser.py',278),
  ('exp_or -> empty','exp_or',1,'p_exp_or','parser.py',279),
  ('t_exp -> expression t_exp_and','t_exp',2,'p_t_exp','parser.py',283),
  ('t_exp_and -> AND t_exp','t_exp_and',2,'p_t_exp_and','parser.py',286),
  ('t_exp_and -> empty','t_exp_and',1,'p_t_exp_and','parser.py',287),
  ('expression -> m_exp expression_comp','expression',2,'p_expression','parser.py',291),
  ('expression_comp -> expression_comp_2 m_exp','expression_comp',2,'p_expression_comp','parser.py',294),
  ('expression_comp -> empty','expression_comp',1,'p_expression_comp','parser.py',295),
  ('expression_comp_2 -> EQUAL','expression_comp_2',1,'p_expression_comp_2','parser.py',298),
  ('expression_comp_2 -> NOTEQUAL','expression_comp_2',1,'p_expression_comp_2','parser.py',299),
  ('expression_comp_2 -> LTHAN','expression_comp_2',1,'p_expression_comp_2','parser.py',300),
  ('expression_comp_2 -> GTHAN','expression_comp_2',1,'p_expression_comp_2','parser.py',301),
  ('m_exp -> term m_exp_sr','m_exp',2,'p_m_exp','parser.py',306),
  ('m_exp_sr -> m_exp_sr_2 m_exp','m_exp_sr',2,'p_m_exp_sr','parser.py',309),
  ('m_exp_sr -> empty','m_exp_sr',1,'p_m_exp_sr','parser.py',310),
  ('m_exp_sr_2 -> PLUS','m_exp_sr_2',1,'p_m_exp_sr_2','parser.py',313),
  ('m_exp_sr_2 -> MINUS','m_exp_sr_2',1,'p_m_exp_sr_2','parser.py',314),
  ('term -> factor term_pc','term',2,'p_term','parser.py',318),
  ('term_pc -> term_pc_2 term','term_pc',2,'p_term_pc','parser.py',321),
  ('term_pc -> empty','term_pc',1,'p_term_pc','parser.py',322),
  ('term_pc_2 -> MULTIPLY','term_pc_2',1,'p_term_pc_2','parser.py',325),
  ('term_pc_2 -> DIVIDE','term_pc_2',1,'p_term_pc_2','parser.py',326),
  ('factor -> factor_exp','factor',1,'p_factor','parser.py',331),
  ('factor -> factor_cte','factor',1,'p_factor','parser.py',332),
  ('factor -> variable','factor',1,'p_factor','parser.py',333),
  ('factor -> call_function','factor',1,'p_factor','parser.py',334),
  ('factor_exp -> LPAREN exp RPAREN','factor_exp',3,'p_factor_exp','parser.py',337),
  ('factor_cte -> CTE_INT','factor_cte',1,'p_factor_cte','parser.py',340),
  ('factor_cte -> CTE_FLOAT','factor_cte',1,'p_factor_cte','parser.py',341),
  ('factor_cte -> CTE_CHAR','factor_cte',1,'p_factor_cte','parser.py',342),
]
