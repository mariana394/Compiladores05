Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main end
Rule 2     goto_main -> SEMICOLON
Rule 3     end -> END
Rule 4     empty -> <empty>
Rule 5     id_saver -> ID empty
Rule 6     int_const_saver -> CTE_INT
Rule 7     int_const_saver -> empty
Rule 8     release_exp -> empty
Rule 9     resources -> empty
Rule 10    program_libraries -> from_library import_library
Rule 11    program_libraries -> empty
Rule 12    from_library -> FROM ID
Rule 13    from_library -> empty
Rule 14    import_library -> IMPORT ID AS ID program_libraries
Rule 15    var_type -> var_c_type
Rule 16    var_type -> var_s_type
Rule 17    program_vars -> VAR var_type
Rule 18    program_vars -> empty
Rule 19    s_type -> INT
Rule 20    s_type -> FLOAT
Rule 21    s_type -> CHAR
Rule 22    c_type -> DATAFRAME
Rule 23    c_type -> DATE
Rule 24    var_multiple -> var_type
Rule 25    var_multiple -> empty
Rule 26    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 27    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 28    var_c_type2 -> empty
Rule 29    add_c_var -> empty
Rule 30    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 31    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 32    var_s_type2 -> empty
Rule 33    add_s_var -> empty
Rule 34    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 35    var_s_array -> empty
Rule 36    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 37    var_s_matrix -> empty
Rule 38    var_s_dimesions -> CTE_INT empty
Rule 39    variable -> var_id_saver variable_array
Rule 40    var_id_saver -> id_saver
Rule 41    variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix
Rule 42    variable_array -> empty
Rule 43    variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET
Rule 44    variable_matrix -> empty
Rule 45    index_arr_mat -> exp
Rule 46    program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
Rule 47    program_function -> empty
Rule 48    f_type -> INT
Rule 49    f_type -> FLOAT
Rule 50    f_type -> CHAR
Rule 51    f_type -> VOID
Rule 52    func_creator -> empty
Rule 53    add_func_glob -> LBRACKET
Rule 54    end_function -> RBRACKET
Rule 55    param -> s_type id_saver add_params param2
Rule 56    param -> empty
Rule 57    param2 -> COMMA s_type id_saver add_params param2
Rule 58    param2 -> empty
Rule 59    add_params -> empty
Rule 60    return -> return_np exp return_quad SEMICOLON
Rule 61    return -> empty_path_return
Rule 62    return_np -> RETURN
Rule 63    return_quad -> empty
Rule 64    empty_path_return -> empty
Rule 65    program_main -> main_id LBRACKET program_vars inner_body RBRACKET
Rule 66    main_id -> MAIN resources
Rule 67    body -> LBRACKET inner_body RBRACKET
Rule 68    inner_body -> statement inner_body
Rule 69    inner_body -> empty
Rule 70    assign -> variable keep_assign specialf_assign end_assign
Rule 71    specialf_assign -> exp
Rule 72    specialf_assign -> special_function
Rule 73    specialf_assign -> read
Rule 74    keep_assign -> ASSIGN empty
Rule 75    end_assign -> SEMICOLON empty
Rule 76    condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
Rule 77    condition2 -> ELSE condition_GOTO body
Rule 78    condition2 -> empty
Rule 79    condition_GOTOF -> empty
Rule 80    condition_GOTO -> empty
Rule 81    end_condition -> empty
Rule 82    print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
Rule 83    print_type -> exp
Rule 84    print_many -> print_type print_many2
Rule 85    print_many2 -> COMMA print_many_np print_many
Rule 86    print_many2 -> empty
Rule 87    print_many_np -> empty
Rule 88    end_print_np -> empty
Rule 89    read -> np_read LPAREN valid_exp_read read_np
Rule 90    np_read -> READ
Rule 91    valid_exp_read -> exp
Rule 92    read_np -> RPAREN
Rule 93    cycle -> for
Rule 94    cycle -> while
Rule 95    while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
Rule 96    seed -> empty
Rule 97    gotoV -> empty
Rule 98    for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
Rule 99    for_control -> id_saver
Rule 100   for_np1 -> TO
Rule 101   for_end -> int_const_saver RPAREN
Rule 102   for_np2 -> SEMICOLON
Rule 103   call_function -> function_saver function_flag call_params check_not_void
Rule 104   check_not_void -> RPAREN
Rule 105   call_void_function -> function_saver function_flag call_params verify_params check_void
Rule 106   verify_params -> RPAREN
Rule 107   check_void -> SEMICOLON
Rule 108   function_saver -> ID empty
Rule 109   function_flag -> LPAREN
Rule 110   call_params -> check_param exp_many
Rule 111   call_params -> empty
Rule 112   check_param -> exp
Rule 113   exp_many -> COMMA check_param exp_many
Rule 114   exp_many -> empty
Rule 115   statement -> assign
Rule 116   statement -> condition
Rule 117   statement -> print
Rule 118   statement -> cycle
Rule 119   statement -> call_void_function
Rule 120   special_function -> exploration
Rule 121   special_function -> financial_state
Rule 122   special_function -> dummi_regression
Rule 123   special_function -> season_analysis
Rule 124   special_function -> trend_prediction
Rule 125   special_function -> model_predict
Rule 126   tag_sp -> LPAREN
Rule 127   exploration -> EXPLORATION tag_sp variable explore_var np_check_size
Rule 128   sp_param -> COMMA
Rule 129   np_check_size -> RPAREN
Rule 130   explore_var -> sp_param variable explor_cte
Rule 131   explore_var -> empty
Rule 132   explor_cte -> sp_param int_const_saver
Rule 133   explor_cte -> empty
Rule 134   financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param variable sp_param variable np_check_size
Rule 135   season_analysis -> SEASON_ANALYSIS tag_sp variable np_check_size
Rule 136   trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size
Rule 137   dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param variable dr_array dr_int np_check_size
Rule 138   dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 139   dr_array -> empty
Rule 140   dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 141   dr_array_mp -> empty
Rule 142   dr_int -> COMMA int_const_saver
Rule 143   dr_int -> empty
Rule 144   model_predict -> MODEL_PREDICT tag_sp variable sp_param variable np_check_size
Rule 145   exp -> t_exp release_exp exp_or
Rule 146   exp_or -> exp_keep_or exp
Rule 147   exp_or -> empty
Rule 148   exp_keep_or -> OR
Rule 149   t_exp -> expression release_exp t_exp_and
Rule 150   t_exp_and -> keep_and t_exp
Rule 151   t_exp_and -> empty
Rule 152   keep_and -> AND
Rule 153   expression -> m_exp release_exp expression_comp
Rule 154   expression_comp -> expression_comp_2 m_exp release_exp
Rule 155   expression_comp -> empty
Rule 156   expression_comp_2 -> GTHAN
Rule 157   expression_comp_2 -> EQUAL
Rule 158   expression_comp_2 -> NOTEQUAL
Rule 159   expression_comp_2 -> LTHAN
Rule 160   expression_comp_2 -> GORE
Rule 161   expression_comp_2 -> LORE
Rule 162   m_exp -> term release_exp m_exp_sr
Rule 163   m_exp_sr -> m_exp_sr_2 m_exp
Rule 164   m_exp_sr -> empty
Rule 165   m_exp_sr_2 -> PLUS
Rule 166   m_exp_sr_2 -> MINUS
Rule 167   term -> sub_factor release_exp term_pc
Rule 168   term_pc -> term_pc_2 term
Rule 169   term_pc -> empty
Rule 170   term_pc_2 -> MULTIPLY
Rule 171   term_pc_2 -> DIVIDE
Rule 172   term_pc_2 -> MODULE
Rule 173   sub_factor -> factor release_exp sub_factor_pc
Rule 174   sub_factor_pc -> sub_factor_pc_2 sub_factor
Rule 175   sub_factor_pc -> empty
Rule 176   sub_factor_pc_2 -> POWER empty
Rule 177   factor -> factor_exp
Rule 178   factor -> factor_cte
Rule 179   factor -> variable
Rule 180   factor -> call_function
Rule 181   factor_exp -> false_button exp release_false_button
Rule 182   false_button -> LPAREN
Rule 183   release_false_button -> RPAREN
Rule 184   factor_cte -> CTE_FLOAT
Rule 185   factor_cte -> CTE_INT
Rule 186   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 152
AS                   : 14
ASSIGN               : 74
CHAR                 : 21 50
COLON                : 
COMMA                : 27 31 57 85 113 128 138 140 142
CTE_CHAR             : 138 140 186
CTE_FLOAT            : 184
CTE_INT              : 6 38 185
DATAFRAME            : 22
DATE                 : 23
DIVIDE               : 171
DO                   : 95
DUMMI_REGRESSION     : 137
ELSE                 : 77
END                  : 3
EQUAL                : 157
EXPLORATION          : 127
FINANCIAL_STATE      : 134
FLOAT                : 20 49
FOR                  : 98
FROM                 : 12
FUNCTION             : 46
GORE                 : 160
GTHAN                : 156
ID                   : 1 5 12 14 14 108
IF                   : 76
IMPORT               : 14
INT                  : 19 48
LBRACKET             : 53 65 67
LORE                 : 161
LPAREN               : 46 76 82 89 95 98 109 126 182
LSQBRACKET           : 34 36 41 43 138
LTHAN                : 159
MAIN                 : 66
MINUS                : 166
MODEL_PREDICT        : 144
MODULE               : 172
MULTIPLY             : 170
NOTEQUAL             : 158
OR                   : 148
PLUS                 : 165
POWER                : 176
PRINT                : 82
PROGRAM              : 1
RBRACKET             : 54 65 67
READ                 : 90
RETURN               : 62
RPAREN               : 46 76 82 92 95 101 104 106 129 183
RSQBRACKET           : 34 36 41 43 138
SEASON_ANALYSIS      : 135
SEMICOLON            : 2 26 30 60 75 76 82 95 102 107
TO                   : 100
TREND_PREDICTION     : 136
VAR                  : 17
VOID                 : 51
WHILE                : 95
error                : 

Nonterminals, with rules where they appear

add_c_var            : 26 27
add_func_glob        : 46
add_params           : 55 57
add_s_var            : 30 31
assign               : 115
body                 : 76 77 95 98
c_type               : 26
call_function        : 180
call_params          : 103 105
call_void_function   : 119
check_not_void       : 103
check_param          : 110 113
check_void           : 105
condition            : 116
condition2           : 76
condition_GOTO       : 77
condition_GOTOF      : 76
cycle                : 118
dr_array             : 137
dr_array_mp          : 138 140
dr_int               : 137
dummi_regression     : 122
empty                : 5 7 8 9 11 13 18 25 28 29 32 33 35 37 38 42 44 47 52 56 58 59 63 64 69 74 75 78 79 80 81 86 87 88 96 97 108 111 114 131 133 139 141 143 147 151 155 164 169 175 176
empty_path_return    : 61
end                  : 1
end_assign           : 70
end_condition        : 76
end_function         : 46
end_print_np         : 82
exp                  : 45 60 71 76 83 91 95 98 112 146 181
exp_keep_or          : 146
exp_many             : 110 113
exp_or               : 145
explor_cte           : 130
exploration          : 120
explore_var          : 127
expression           : 149
expression_comp      : 153
expression_comp_2    : 154
f_type               : 46
factor               : 173
factor_cte           : 178
factor_exp           : 177
false_button         : 181
financial_state      : 121
for                  : 93
for_control          : 98
for_end              : 98
for_np1              : 98
for_np2              : 98
from_library         : 10
func_creator         : 46
function_flag        : 103 105
function_saver       : 103 105
gotoV                : 95
goto_main            : 1
id_saver             : 26 27 30 31 40 46 55 57 99
import_library       : 10
index_arr_mat        : 41 43
inner_body           : 46 65 67 68
int_const_saver      : 101 132 136 136 136 142
keep_and             : 150
keep_assign          : 70 98
m_exp                : 153 154 163
m_exp_sr             : 162
m_exp_sr_2           : 163
main_id              : 65
model_predict        : 125
np_check_size        : 127 134 135 136 137 144
np_read              : 89
param                : 46
param2               : 55 57
print                : 117
print_many           : 82 85
print_many2          : 84
print_many_np        : 85
print_type           : 84
program              : 0
program_function     : 1 46
program_libraries    : 1 14
program_main         : 1
program_vars         : 1 46 65
read                 : 73
read_np              : 89
release_exp          : 145 149 153 154 162 167 173
release_false_button : 181
resources            : 46 66
return               : 46
return_np            : 60
return_quad          : 60
s_type               : 30 55 57
season_analysis      : 123
seed                 : 95
sp_param             : 130 132 134 134 134 136 136 136 137 144
special_function     : 72
specialf_assign      : 70
statement            : 68
sub_factor           : 167 174
sub_factor_pc        : 173
sub_factor_pc_2      : 174
t_exp                : 145 150
t_exp_and            : 149
tag_sp               : 127 134 135 136 137 144
term                 : 162 168
term_pc              : 167
term_pc_2            : 168
trend_prediction     : 124
valid_exp_read       : 89
var_c_type           : 15
var_c_type2          : 26 27
var_id_saver         : 39
var_multiple         : 26 30
var_s_array          : 30 31
var_s_dimesions      : 34 36
var_s_matrix         : 34
var_s_type           : 16
var_s_type2          : 30 31
var_type             : 17 24
variable             : 70 127 130 134 134 134 134 135 136 137 137 144 144 179
variable_array       : 39
variable_matrix      : 41
verify_params        : 105
while                : 94

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID goto_main program_libraries program_vars program_function program_main end

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID goto_main program_libraries program_vars program_function program_main end

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . goto_main program_libraries program_vars program_function program_main end
    (2) goto_main -> . SEMICOLON

    SEMICOLON       shift and go to state 5

    goto_main                      shift and go to state 4

state 4

    (1) program -> PROGRAM ID goto_main . program_libraries program_vars program_function program_main end
    (10) program_libraries -> . from_library import_library
    (11) program_libraries -> . empty
    (12) from_library -> . FROM ID
    (13) from_library -> . empty
    (4) empty -> .

    FROM            shift and go to state 9
    VAR             reduce using rule 4 (empty -> .)
    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IMPORT          reduce using rule 4 (empty -> .)

    program_libraries              shift and go to state 6
    from_library                   shift and go to state 7
    empty                          shift and go to state 8

state 5

    (2) goto_main -> SEMICOLON .

    FROM            reduce using rule 2 (goto_main -> SEMICOLON .)
    VAR             reduce using rule 2 (goto_main -> SEMICOLON .)
    FUNCTION        reduce using rule 2 (goto_main -> SEMICOLON .)
    MAIN            reduce using rule 2 (goto_main -> SEMICOLON .)
    IMPORT          reduce using rule 2 (goto_main -> SEMICOLON .)


state 6

    (1) program -> PROGRAM ID goto_main program_libraries . program_vars program_function program_main end
    (17) program_vars -> . VAR var_type
    (18) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 11
    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 10
    empty                          shift and go to state 12

state 7

    (10) program_libraries -> from_library . import_library
    (14) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 14

    import_library                 shift and go to state 13

state 8

    (11) program_libraries -> empty .
    (13) from_library -> empty .

    VAR             reduce using rule 11 (program_libraries -> empty .)
    FUNCTION        reduce using rule 11 (program_libraries -> empty .)
    MAIN            reduce using rule 11 (program_libraries -> empty .)
    IMPORT          reduce using rule 13 (from_library -> empty .)


state 9

    (12) from_library -> FROM . ID

    ID              shift and go to state 15


state 10

    (1) program -> PROGRAM ID goto_main program_libraries program_vars . program_function program_main end
    (46) program_function -> . FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (47) program_function -> . empty
    (4) empty -> .

    FUNCTION        shift and go to state 17
    MAIN            reduce using rule 4 (empty -> .)

    program_function               shift and go to state 16
    empty                          shift and go to state 18

state 11

    (17) program_vars -> VAR . var_type
    (15) var_type -> . var_c_type
    (16) var_type -> . var_s_type
    (26) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (30) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (22) c_type -> . DATAFRAME
    (23) c_type -> . DATE
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    DATAFRAME       shift and go to state 24
    DATE            shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    var_type                       shift and go to state 19
    var_c_type                     shift and go to state 20
    var_s_type                     shift and go to state 21
    c_type                         shift and go to state 22
    s_type                         shift and go to state 23

state 12

    (18) program_vars -> empty .

    FUNCTION        reduce using rule 18 (program_vars -> empty .)
    MAIN            reduce using rule 18 (program_vars -> empty .)
    IF              reduce using rule 18 (program_vars -> empty .)
    PRINT           reduce using rule 18 (program_vars -> empty .)
    FOR             reduce using rule 18 (program_vars -> empty .)
    DO              reduce using rule 18 (program_vars -> empty .)
    ID              reduce using rule 18 (program_vars -> empty .)
    RBRACKET        reduce using rule 18 (program_vars -> empty .)
    RETURN          reduce using rule 18 (program_vars -> empty .)


state 13

    (10) program_libraries -> from_library import_library .

    VAR             reduce using rule 10 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 10 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 10 (program_libraries -> from_library import_library .)


state 14

    (14) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 29


state 15

    (12) from_library -> FROM ID .

    IMPORT          reduce using rule 12 (from_library -> FROM ID .)


state 16

    (1) program -> PROGRAM ID goto_main program_libraries program_vars program_function . program_main end
    (65) program_main -> . main_id LBRACKET program_vars inner_body RBRACKET
    (66) main_id -> . MAIN resources

    MAIN            shift and go to state 32

    program_main                   shift and go to state 30
    main_id                        shift and go to state 31

state 17

    (46) program_function -> FUNCTION . resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (9) resources -> . empty
    (4) empty -> .

    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    CHAR            reduce using rule 4 (empty -> .)
    VOID            reduce using rule 4 (empty -> .)

    resources                      shift and go to state 33
    empty                          shift and go to state 34

state 18

    (47) program_function -> empty .

    MAIN            reduce using rule 47 (program_function -> empty .)


state 19

    (17) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 17 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 17 (program_vars -> VAR var_type .)
    IF              reduce using rule 17 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 17 (program_vars -> VAR var_type .)
    FOR             reduce using rule 17 (program_vars -> VAR var_type .)
    DO              reduce using rule 17 (program_vars -> VAR var_type .)
    ID              reduce using rule 17 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 17 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 17 (program_vars -> VAR var_type .)


state 20

    (15) var_type -> var_c_type .

    FUNCTION        reduce using rule 15 (var_type -> var_c_type .)
    MAIN            reduce using rule 15 (var_type -> var_c_type .)
    IF              reduce using rule 15 (var_type -> var_c_type .)
    PRINT           reduce using rule 15 (var_type -> var_c_type .)
    FOR             reduce using rule 15 (var_type -> var_c_type .)
    DO              reduce using rule 15 (var_type -> var_c_type .)
    ID              reduce using rule 15 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 15 (var_type -> var_c_type .)
    RETURN          reduce using rule 15 (var_type -> var_c_type .)


state 21

    (16) var_type -> var_s_type .

    FUNCTION        reduce using rule 16 (var_type -> var_s_type .)
    MAIN            reduce using rule 16 (var_type -> var_s_type .)
    IF              reduce using rule 16 (var_type -> var_s_type .)
    PRINT           reduce using rule 16 (var_type -> var_s_type .)
    FOR             reduce using rule 16 (var_type -> var_s_type .)
    DO              reduce using rule 16 (var_type -> var_s_type .)
    ID              reduce using rule 16 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 16 (var_type -> var_s_type .)
    RETURN          reduce using rule 16 (var_type -> var_s_type .)


state 22

    (26) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 35

state 23

    (30) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 37

state 24

    (22) c_type -> DATAFRAME .

    ID              reduce using rule 22 (c_type -> DATAFRAME .)


state 25

    (23) c_type -> DATE .

    ID              reduce using rule 23 (c_type -> DATE .)


state 26

    (19) s_type -> INT .

    ID              reduce using rule 19 (s_type -> INT .)


state 27

    (20) s_type -> FLOAT .

    ID              reduce using rule 20 (s_type -> FLOAT .)


state 28

    (21) s_type -> CHAR .

    ID              reduce using rule 21 (s_type -> CHAR .)


state 29

    (14) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 38


state 30

    (1) program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main . end
    (3) end -> . END

    END             shift and go to state 40

    end                            shift and go to state 39

state 31

    (65) program_main -> main_id . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 41


state 32

    (66) main_id -> MAIN . resources
    (9) resources -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    resources                      shift and go to state 42
    empty                          shift and go to state 34

state 33

    (46) program_function -> FUNCTION resources . f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (48) f_type -> . INT
    (49) f_type -> . FLOAT
    (50) f_type -> . CHAR
    (51) f_type -> . VOID

    INT             shift and go to state 44
    FLOAT           shift and go to state 45
    CHAR            shift and go to state 46
    VOID            shift and go to state 47

    f_type                         shift and go to state 43

state 34

    (9) resources -> empty .

    INT             reduce using rule 9 (resources -> empty .)
    FLOAT           reduce using rule 9 (resources -> empty .)
    CHAR            reduce using rule 9 (resources -> empty .)
    VOID            reduce using rule 9 (resources -> empty .)
    LBRACKET        reduce using rule 9 (resources -> empty .)


state 35

    (26) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (29) add_c_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_c_var                      shift and go to state 48
    empty                          shift and go to state 49

state 36

    (5) id_saver -> ID . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    LSQBRACKET      reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ASSIGN          reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 50

state 37

    (30) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (34) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (35) var_s_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 52
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_array                    shift and go to state 51
    empty                          shift and go to state 53

state 38

    (14) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 54


state 39

    (1) program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main end .

    $end            reduce using rule 1 (program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main end .)


state 40

    (3) end -> END .

    $end            reduce using rule 3 (end -> END .)


state 41

    (65) program_main -> main_id LBRACKET . program_vars inner_body RBRACKET
    (17) program_vars -> . VAR var_type
    (18) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 11
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 55
    empty                          shift and go to state 12

state 42

    (66) main_id -> MAIN resources .

    LBRACKET        reduce using rule 66 (main_id -> MAIN resources .)


state 43

    (46) program_function -> FUNCTION resources f_type . id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 56

state 44

    (48) f_type -> INT .

    ID              reduce using rule 48 (f_type -> INT .)


state 45

    (49) f_type -> FLOAT .

    ID              reduce using rule 49 (f_type -> FLOAT .)


state 46

    (50) f_type -> CHAR .

    ID              reduce using rule 50 (f_type -> CHAR .)


state 47

    (51) f_type -> VOID .

    ID              reduce using rule 51 (f_type -> VOID .)


state 48

    (26) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (27) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (28) var_c_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 58
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_c_type2                    shift and go to state 57
    empty                          shift and go to state 59

state 49

    (29) add_c_var -> empty .

    COMMA           reduce using rule 29 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 29 (add_c_var -> empty .)


state 50

    (5) id_saver -> ID empty .

    COMMA           reduce using rule 5 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 5 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    LPAREN          reduce using rule 5 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 5 (id_saver -> ID empty .)
    RPAREN          reduce using rule 5 (id_saver -> ID empty .)


state 51

    (30) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (33) add_s_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_s_var                      shift and go to state 60
    empty                          shift and go to state 61

state 52

    (34) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (38) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 63

    var_s_dimesions                shift and go to state 62

state 53

    (35) var_s_array -> empty .

    COMMA           reduce using rule 35 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 35 (var_s_array -> empty .)


state 54

    (14) import_library -> IMPORT ID AS ID . program_libraries
    (10) program_libraries -> . from_library import_library
    (11) program_libraries -> . empty
    (12) from_library -> . FROM ID
    (13) from_library -> . empty
    (4) empty -> .

    FROM            shift and go to state 9
    VAR             reduce using rule 4 (empty -> .)
    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IMPORT          reduce using rule 4 (empty -> .)

    program_libraries              shift and go to state 64
    from_library                   shift and go to state 7
    empty                          shift and go to state 8

state 55

    (65) program_main -> main_id LBRACKET program_vars . inner_body RBRACKET
    (68) inner_body -> . statement inner_body
    (69) inner_body -> . empty
    (115) statement -> . assign
    (116) statement -> . condition
    (117) statement -> . print
    (118) statement -> . cycle
    (119) statement -> . call_void_function
    (4) empty -> .
    (70) assign -> . variable keep_assign specialf_assign end_assign
    (76) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (82) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (93) cycle -> . for
    (94) cycle -> . while
    (105) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . var_id_saver variable_array
    (98) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (95) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (108) function_saver -> . ID empty
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    inner_body                     shift and go to state 65
    statement                      shift and go to state 66
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 56

    (46) program_function -> FUNCTION resources f_type id_saver . func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (52) func_creator -> . empty
    (4) empty -> .

    LPAREN          reduce using rule 4 (empty -> .)

    func_creator                   shift and go to state 84
    empty                          shift and go to state 85

state 57

    (26) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 86


state 58

    (27) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 87

state 59

    (28) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 28 (var_c_type2 -> empty .)


state 60

    (30) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (31) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (32) var_s_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 89
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_type2                    shift and go to state 88
    empty                          shift and go to state 90

state 61

    (33) add_s_var -> empty .

    COMMA           reduce using rule 33 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 33 (add_s_var -> empty .)


state 62

    (34) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 91


state 63

    (38) var_s_dimesions -> CTE_INT . empty
    (4) empty -> .

    RSQBRACKET      reduce using rule 4 (empty -> .)

    empty                          shift and go to state 92

state 64

    (14) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 14 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 14 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 14 (import_library -> IMPORT ID AS ID program_libraries .)


state 65

    (65) program_main -> main_id LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 93


state 66

    (68) inner_body -> statement . inner_body
    (68) inner_body -> . statement inner_body
    (69) inner_body -> . empty
    (115) statement -> . assign
    (116) statement -> . condition
    (117) statement -> . print
    (118) statement -> . cycle
    (119) statement -> . call_void_function
    (4) empty -> .
    (70) assign -> . variable keep_assign specialf_assign end_assign
    (76) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (82) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (93) cycle -> . for
    (94) cycle -> . while
    (105) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . var_id_saver variable_array
    (98) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (95) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (108) function_saver -> . ID empty
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    statement                      shift and go to state 66
    inner_body                     shift and go to state 94
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 67

    (69) inner_body -> empty .

    RBRACKET        reduce using rule 69 (inner_body -> empty .)
    RETURN          reduce using rule 69 (inner_body -> empty .)


state 68

    (115) statement -> assign .

    IF              reduce using rule 115 (statement -> assign .)
    PRINT           reduce using rule 115 (statement -> assign .)
    FOR             reduce using rule 115 (statement -> assign .)
    DO              reduce using rule 115 (statement -> assign .)
    ID              reduce using rule 115 (statement -> assign .)
    RBRACKET        reduce using rule 115 (statement -> assign .)
    RETURN          reduce using rule 115 (statement -> assign .)


state 69

    (116) statement -> condition .

    IF              reduce using rule 116 (statement -> condition .)
    PRINT           reduce using rule 116 (statement -> condition .)
    FOR             reduce using rule 116 (statement -> condition .)
    DO              reduce using rule 116 (statement -> condition .)
    ID              reduce using rule 116 (statement -> condition .)
    RBRACKET        reduce using rule 116 (statement -> condition .)
    RETURN          reduce using rule 116 (statement -> condition .)


state 70

    (117) statement -> print .

    IF              reduce using rule 117 (statement -> print .)
    PRINT           reduce using rule 117 (statement -> print .)
    FOR             reduce using rule 117 (statement -> print .)
    DO              reduce using rule 117 (statement -> print .)
    ID              reduce using rule 117 (statement -> print .)
    RBRACKET        reduce using rule 117 (statement -> print .)
    RETURN          reduce using rule 117 (statement -> print .)


state 71

    (118) statement -> cycle .

    IF              reduce using rule 118 (statement -> cycle .)
    PRINT           reduce using rule 118 (statement -> cycle .)
    FOR             reduce using rule 118 (statement -> cycle .)
    DO              reduce using rule 118 (statement -> cycle .)
    ID              reduce using rule 118 (statement -> cycle .)
    RBRACKET        reduce using rule 118 (statement -> cycle .)
    RETURN          reduce using rule 118 (statement -> cycle .)


state 72

    (119) statement -> call_void_function .

    IF              reduce using rule 119 (statement -> call_void_function .)
    PRINT           reduce using rule 119 (statement -> call_void_function .)
    FOR             reduce using rule 119 (statement -> call_void_function .)
    DO              reduce using rule 119 (statement -> call_void_function .)
    ID              reduce using rule 119 (statement -> call_void_function .)
    RBRACKET        reduce using rule 119 (statement -> call_void_function .)
    RETURN          reduce using rule 119 (statement -> call_void_function .)


state 73

    (70) assign -> variable . keep_assign specialf_assign end_assign
    (74) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 96

    keep_assign                    shift and go to state 95

state 74

    (76) condition -> IF . LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    LPAREN          shift and go to state 97


state 75

    (82) print -> PRINT . LPAREN print_many RPAREN SEMICOLON end_print_np

    LPAREN          shift and go to state 98


state 76

    (93) cycle -> for .

    IF              reduce using rule 93 (cycle -> for .)
    PRINT           reduce using rule 93 (cycle -> for .)
    FOR             reduce using rule 93 (cycle -> for .)
    DO              reduce using rule 93 (cycle -> for .)
    ID              reduce using rule 93 (cycle -> for .)
    RBRACKET        reduce using rule 93 (cycle -> for .)
    RETURN          reduce using rule 93 (cycle -> for .)


state 77

    (94) cycle -> while .

    IF              reduce using rule 94 (cycle -> while .)
    PRINT           reduce using rule 94 (cycle -> while .)
    FOR             reduce using rule 94 (cycle -> while .)
    DO              reduce using rule 94 (cycle -> while .)
    ID              reduce using rule 94 (cycle -> while .)
    RBRACKET        reduce using rule 94 (cycle -> while .)
    RETURN          reduce using rule 94 (cycle -> while .)


state 78

    (105) call_void_function -> function_saver . function_flag call_params verify_params check_void
    (109) function_flag -> . LPAREN

    LPAREN          shift and go to state 100

    function_flag                  shift and go to state 99

state 79

    (39) variable -> var_id_saver . variable_array
    (41) variable_array -> . LSQBRACKET index_arr_mat RSQBRACKET variable_matrix
    (42) variable_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 102
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    variable_array                 shift and go to state 101
    empty                          shift and go to state 103

state 80

    (98) for -> FOR . LPAREN for_control keep_assign exp for_np1 for_end body for_np2

    LPAREN          shift and go to state 104


state 81

    (95) while -> DO . seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (96) seed -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    seed                           shift and go to state 105
    empty                          shift and go to state 106

state 82

    (108) function_saver -> ID . empty
    (5) id_saver -> ID . empty
    (4) empty -> .

    LPAREN          reduce using rule 4 (empty -> .)
    LSQBRACKET      reduce using rule 4 (empty -> .)
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 107

state 83

    (40) var_id_saver -> id_saver .

    LSQBRACKET      reduce using rule 40 (var_id_saver -> id_saver .)
    ASSIGN          reduce using rule 40 (var_id_saver -> id_saver .)
    POWER           reduce using rule 40 (var_id_saver -> id_saver .)
    MULTIPLY        reduce using rule 40 (var_id_saver -> id_saver .)
    DIVIDE          reduce using rule 40 (var_id_saver -> id_saver .)
    MODULE          reduce using rule 40 (var_id_saver -> id_saver .)
    PLUS            reduce using rule 40 (var_id_saver -> id_saver .)
    MINUS           reduce using rule 40 (var_id_saver -> id_saver .)
    GTHAN           reduce using rule 40 (var_id_saver -> id_saver .)
    EQUAL           reduce using rule 40 (var_id_saver -> id_saver .)
    NOTEQUAL        reduce using rule 40 (var_id_saver -> id_saver .)
    LTHAN           reduce using rule 40 (var_id_saver -> id_saver .)
    GORE            reduce using rule 40 (var_id_saver -> id_saver .)
    LORE            reduce using rule 40 (var_id_saver -> id_saver .)
    AND             reduce using rule 40 (var_id_saver -> id_saver .)
    OR              reduce using rule 40 (var_id_saver -> id_saver .)
    SEMICOLON       reduce using rule 40 (var_id_saver -> id_saver .)
    RPAREN          reduce using rule 40 (var_id_saver -> id_saver .)
    COMMA           reduce using rule 40 (var_id_saver -> id_saver .)
    RSQBRACKET      reduce using rule 40 (var_id_saver -> id_saver .)
    TO              reduce using rule 40 (var_id_saver -> id_saver .)


state 84

    (46) program_function -> FUNCTION resources f_type id_saver func_creator . LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function

    LPAREN          shift and go to state 108


state 85

    (52) func_creator -> empty .

    LPAREN          reduce using rule 52 (func_creator -> empty .)


state 86

    (26) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (24) var_multiple -> . var_type
    (25) var_multiple -> . empty
    (15) var_type -> . var_c_type
    (16) var_type -> . var_s_type
    (4) empty -> .
    (26) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (30) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (22) c_type -> . DATAFRAME
    (23) c_type -> . DATE
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    DATAFRAME       shift and go to state 24
    DATE            shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    c_type                         shift and go to state 22
    var_multiple                   shift and go to state 109
    var_type                       shift and go to state 110
    empty                          shift and go to state 111
    var_c_type                     shift and go to state 20
    var_s_type                     shift and go to state 21
    s_type                         shift and go to state 23

state 87

    (27) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (29) add_c_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_c_var                      shift and go to state 112
    empty                          shift and go to state 49

state 88

    (30) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 113


state 89

    (31) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 114

state 90

    (32) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 32 (var_s_type2 -> empty .)


state 91

    (34) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (36) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (37) var_s_matrix -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 115
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_matrix                   shift and go to state 116
    empty                          shift and go to state 117

state 92

    (38) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 38 (var_s_dimesions -> CTE_INT empty .)


state 93

    (65) program_main -> main_id LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 65 (program_main -> main_id LBRACKET program_vars inner_body RBRACKET .)


state 94

    (68) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 68 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 68 (inner_body -> statement inner_body .)


state 95

    (70) assign -> variable keep_assign . specialf_assign end_assign
    (71) specialf_assign -> . exp
    (72) specialf_assign -> . special_function
    (73) specialf_assign -> . read
    (145) exp -> . t_exp release_exp exp_or
    (120) special_function -> . exploration
    (121) special_function -> . financial_state
    (122) special_function -> . dummi_regression
    (123) special_function -> . season_analysis
    (124) special_function -> . trend_prediction
    (125) special_function -> . model_predict
    (89) read -> . np_read LPAREN valid_exp_read read_np
    (149) t_exp -> . expression release_exp t_exp_and
    (127) exploration -> . EXPLORATION tag_sp variable explore_var np_check_size
    (134) financial_state -> . FINANCIAL_STATE tag_sp variable sp_param variable sp_param variable sp_param variable np_check_size
    (137) dummi_regression -> . DUMMI_REGRESSION tag_sp variable sp_param variable dr_array dr_int np_check_size
    (135) season_analysis -> . SEASON_ANALYSIS tag_sp variable np_check_size
    (136) trend_prediction -> . TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size
    (144) model_predict -> . MODEL_PREDICT tag_sp variable sp_param variable np_check_size
    (90) np_read -> . READ
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    EXPLORATION     shift and go to state 133
    FINANCIAL_STATE shift and go to state 134
    DUMMI_REGRESSION shift and go to state 135
    SEASON_ANALYSIS shift and go to state 136
    TREND_PREDICTION shift and go to state 137
    MODEL_PREDICT   shift and go to state 138
    READ            shift and go to state 139
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    variable                       shift and go to state 118
    specialf_assign                shift and go to state 119
    exp                            shift and go to state 120
    special_function               shift and go to state 121
    read                           shift and go to state 122
    t_exp                          shift and go to state 123
    exploration                    shift and go to state 124
    financial_state                shift and go to state 125
    dummi_regression               shift and go to state 126
    season_analysis                shift and go to state 127
    trend_prediction               shift and go to state 128
    model_predict                  shift and go to state 129
    np_read                        shift and go to state 130
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 96

    (74) keep_assign -> ASSIGN . empty
    (4) empty -> .

    EXPLORATION     reduce using rule 4 (empty -> .)
    FINANCIAL_STATE reduce using rule 4 (empty -> .)
    DUMMI_REGRESSION reduce using rule 4 (empty -> .)
    SEASON_ANALYSIS reduce using rule 4 (empty -> .)
    TREND_PREDICTION reduce using rule 4 (empty -> .)
    MODEL_PREDICT   reduce using rule 4 (empty -> .)
    READ            reduce using rule 4 (empty -> .)
    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 152

state 97

    (76) condition -> IF LPAREN . exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    exp                            shift and go to state 153
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 98

    (82) print -> PRINT LPAREN . print_many RPAREN SEMICOLON end_print_np
    (84) print_many -> . print_type print_many2
    (83) print_type -> . exp
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    print_many                     shift and go to state 154
    print_type                     shift and go to state 155
    exp                            shift and go to state 156
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 99

    (105) call_void_function -> function_saver function_flag . call_params verify_params check_void
    (110) call_params -> . check_param exp_many
    (111) call_params -> . empty
    (112) check_param -> . exp
    (4) empty -> .
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RPAREN          reduce using rule 4 (empty -> .)
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    function_saver                 shift and go to state 151
    call_params                    shift and go to state 157
    check_param                    shift and go to state 158
    empty                          shift and go to state 159
    exp                            shift and go to state 160
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 100

    (109) function_flag -> LPAREN .

    CTE_FLOAT       reduce using rule 109 (function_flag -> LPAREN .)
    CTE_INT         reduce using rule 109 (function_flag -> LPAREN .)
    CTE_CHAR        reduce using rule 109 (function_flag -> LPAREN .)
    LPAREN          reduce using rule 109 (function_flag -> LPAREN .)
    ID              reduce using rule 109 (function_flag -> LPAREN .)
    RPAREN          reduce using rule 109 (function_flag -> LPAREN .)


state 101

    (39) variable -> var_id_saver variable_array .

    ASSIGN          reduce using rule 39 (variable -> var_id_saver variable_array .)
    POWER           reduce using rule 39 (variable -> var_id_saver variable_array .)
    MULTIPLY        reduce using rule 39 (variable -> var_id_saver variable_array .)
    DIVIDE          reduce using rule 39 (variable -> var_id_saver variable_array .)
    MODULE          reduce using rule 39 (variable -> var_id_saver variable_array .)
    PLUS            reduce using rule 39 (variable -> var_id_saver variable_array .)
    MINUS           reduce using rule 39 (variable -> var_id_saver variable_array .)
    GTHAN           reduce using rule 39 (variable -> var_id_saver variable_array .)
    EQUAL           reduce using rule 39 (variable -> var_id_saver variable_array .)
    NOTEQUAL        reduce using rule 39 (variable -> var_id_saver variable_array .)
    LTHAN           reduce using rule 39 (variable -> var_id_saver variable_array .)
    GORE            reduce using rule 39 (variable -> var_id_saver variable_array .)
    LORE            reduce using rule 39 (variable -> var_id_saver variable_array .)
    AND             reduce using rule 39 (variable -> var_id_saver variable_array .)
    OR              reduce using rule 39 (variable -> var_id_saver variable_array .)
    SEMICOLON       reduce using rule 39 (variable -> var_id_saver variable_array .)
    RPAREN          reduce using rule 39 (variable -> var_id_saver variable_array .)
    COMMA           reduce using rule 39 (variable -> var_id_saver variable_array .)
    RSQBRACKET      reduce using rule 39 (variable -> var_id_saver variable_array .)
    TO              reduce using rule 39 (variable -> var_id_saver variable_array .)


state 102

    (41) variable_array -> LSQBRACKET . index_arr_mat RSQBRACKET variable_matrix
    (45) index_arr_mat -> . exp
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    index_arr_mat                  shift and go to state 161
    exp                            shift and go to state 162
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 103

    (42) variable_array -> empty .

    ASSIGN          reduce using rule 42 (variable_array -> empty .)
    POWER           reduce using rule 42 (variable_array -> empty .)
    MULTIPLY        reduce using rule 42 (variable_array -> empty .)
    DIVIDE          reduce using rule 42 (variable_array -> empty .)
    MODULE          reduce using rule 42 (variable_array -> empty .)
    PLUS            reduce using rule 42 (variable_array -> empty .)
    MINUS           reduce using rule 42 (variable_array -> empty .)
    GTHAN           reduce using rule 42 (variable_array -> empty .)
    EQUAL           reduce using rule 42 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 42 (variable_array -> empty .)
    LTHAN           reduce using rule 42 (variable_array -> empty .)
    GORE            reduce using rule 42 (variable_array -> empty .)
    LORE            reduce using rule 42 (variable_array -> empty .)
    AND             reduce using rule 42 (variable_array -> empty .)
    OR              reduce using rule 42 (variable_array -> empty .)
    SEMICOLON       reduce using rule 42 (variable_array -> empty .)
    RPAREN          reduce using rule 42 (variable_array -> empty .)
    COMMA           reduce using rule 42 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 42 (variable_array -> empty .)
    TO              reduce using rule 42 (variable_array -> empty .)


state 104

    (98) for -> FOR LPAREN . for_control keep_assign exp for_np1 for_end body for_np2
    (99) for_control -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    for_control                    shift and go to state 163
    id_saver                       shift and go to state 164

state 105

    (95) while -> DO seed . body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (67) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 166

    body                           shift and go to state 165

state 106

    (96) seed -> empty .

    LBRACKET        reduce using rule 96 (seed -> empty .)


state 107

    (108) function_saver -> ID empty .
    (5) id_saver -> ID empty .

    LPAREN          reduce using rule 108 (function_saver -> ID empty .)
    LSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 5 (id_saver -> ID empty .)
    POWER           reduce using rule 5 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 5 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 5 (id_saver -> ID empty .)
    MODULE          reduce using rule 5 (id_saver -> ID empty .)
    PLUS            reduce using rule 5 (id_saver -> ID empty .)
    MINUS           reduce using rule 5 (id_saver -> ID empty .)
    GTHAN           reduce using rule 5 (id_saver -> ID empty .)
    EQUAL           reduce using rule 5 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 5 (id_saver -> ID empty .)
    LTHAN           reduce using rule 5 (id_saver -> ID empty .)
    GORE            reduce using rule 5 (id_saver -> ID empty .)
    LORE            reduce using rule 5 (id_saver -> ID empty .)
    AND             reduce using rule 5 (id_saver -> ID empty .)
    OR              reduce using rule 5 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 5 (id_saver -> ID empty .)
    RPAREN          reduce using rule 5 (id_saver -> ID empty .)
    COMMA           reduce using rule 5 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    TO              reduce using rule 5 (id_saver -> ID empty .)


state 108

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN . param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (55) param -> . s_type id_saver add_params param2
    (56) param -> . empty
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR
    (4) empty -> .

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28
    RPAREN          reduce using rule 4 (empty -> .)

    param                          shift and go to state 167
    s_type                         shift and go to state 168
    empty                          shift and go to state 169

state 109

    (26) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 110

    (24) var_multiple -> var_type .

    FUNCTION        reduce using rule 24 (var_multiple -> var_type .)
    MAIN            reduce using rule 24 (var_multiple -> var_type .)
    IF              reduce using rule 24 (var_multiple -> var_type .)
    PRINT           reduce using rule 24 (var_multiple -> var_type .)
    FOR             reduce using rule 24 (var_multiple -> var_type .)
    DO              reduce using rule 24 (var_multiple -> var_type .)
    ID              reduce using rule 24 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 24 (var_multiple -> var_type .)
    RETURN          reduce using rule 24 (var_multiple -> var_type .)


state 111

    (25) var_multiple -> empty .

    FUNCTION        reduce using rule 25 (var_multiple -> empty .)
    MAIN            reduce using rule 25 (var_multiple -> empty .)
    IF              reduce using rule 25 (var_multiple -> empty .)
    PRINT           reduce using rule 25 (var_multiple -> empty .)
    FOR             reduce using rule 25 (var_multiple -> empty .)
    DO              reduce using rule 25 (var_multiple -> empty .)
    ID              reduce using rule 25 (var_multiple -> empty .)
    RBRACKET        reduce using rule 25 (var_multiple -> empty .)
    RETURN          reduce using rule 25 (var_multiple -> empty .)


state 112

    (27) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (27) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (28) var_c_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 58
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_c_type2                    shift and go to state 170
    empty                          shift and go to state 59

state 113

    (30) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (24) var_multiple -> . var_type
    (25) var_multiple -> . empty
    (15) var_type -> . var_c_type
    (16) var_type -> . var_s_type
    (4) empty -> .
    (26) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (30) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (22) c_type -> . DATAFRAME
    (23) c_type -> . DATE
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    DATAFRAME       shift and go to state 24
    DATE            shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    s_type                         shift and go to state 23
    var_multiple                   shift and go to state 171
    var_type                       shift and go to state 110
    empty                          shift and go to state 111
    var_c_type                     shift and go to state 20
    var_s_type                     shift and go to state 21
    c_type                         shift and go to state 22

state 114

    (31) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (34) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (35) var_s_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 52
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_array                    shift and go to state 172
    empty                          shift and go to state 53

state 115

    (36) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (38) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 63

    var_s_dimesions                shift and go to state 173

state 116

    (34) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 34 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 34 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 117

    (37) var_s_matrix -> empty .

    COMMA           reduce using rule 37 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 37 (var_s_matrix -> empty .)


state 118

    (179) factor -> variable .

    POWER           reduce using rule 179 (factor -> variable .)
    MULTIPLY        reduce using rule 179 (factor -> variable .)
    DIVIDE          reduce using rule 179 (factor -> variable .)
    MODULE          reduce using rule 179 (factor -> variable .)
    PLUS            reduce using rule 179 (factor -> variable .)
    MINUS           reduce using rule 179 (factor -> variable .)
    GTHAN           reduce using rule 179 (factor -> variable .)
    EQUAL           reduce using rule 179 (factor -> variable .)
    NOTEQUAL        reduce using rule 179 (factor -> variable .)
    LTHAN           reduce using rule 179 (factor -> variable .)
    GORE            reduce using rule 179 (factor -> variable .)
    LORE            reduce using rule 179 (factor -> variable .)
    AND             reduce using rule 179 (factor -> variable .)
    OR              reduce using rule 179 (factor -> variable .)
    SEMICOLON       reduce using rule 179 (factor -> variable .)
    RPAREN          reduce using rule 179 (factor -> variable .)
    COMMA           reduce using rule 179 (factor -> variable .)
    RSQBRACKET      reduce using rule 179 (factor -> variable .)
    TO              reduce using rule 179 (factor -> variable .)


state 119

    (70) assign -> variable keep_assign specialf_assign . end_assign
    (75) end_assign -> . SEMICOLON empty

    SEMICOLON       shift and go to state 175

    end_assign                     shift and go to state 174

state 120

    (71) specialf_assign -> exp .

    SEMICOLON       reduce using rule 71 (specialf_assign -> exp .)


state 121

    (72) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 72 (specialf_assign -> special_function .)


state 122

    (73) specialf_assign -> read .

    SEMICOLON       reduce using rule 73 (specialf_assign -> read .)


state 123

    (145) exp -> t_exp . release_exp exp_or
    (8) release_exp -> . empty
    (4) empty -> .

    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 176
    empty                          shift and go to state 177

state 124

    (120) special_function -> exploration .

    SEMICOLON       reduce using rule 120 (special_function -> exploration .)


state 125

    (121) special_function -> financial_state .

    SEMICOLON       reduce using rule 121 (special_function -> financial_state .)


state 126

    (122) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 122 (special_function -> dummi_regression .)


state 127

    (123) special_function -> season_analysis .

    SEMICOLON       reduce using rule 123 (special_function -> season_analysis .)


state 128

    (124) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 124 (special_function -> trend_prediction .)


state 129

    (125) special_function -> model_predict .

    SEMICOLON       reduce using rule 125 (special_function -> model_predict .)


state 130

    (89) read -> np_read . LPAREN valid_exp_read read_np

    LPAREN          shift and go to state 178


state 131

    (182) false_button -> LPAREN .

    CTE_FLOAT       reduce using rule 182 (false_button -> LPAREN .)
    CTE_INT         reduce using rule 182 (false_button -> LPAREN .)
    CTE_CHAR        reduce using rule 182 (false_button -> LPAREN .)
    LPAREN          reduce using rule 182 (false_button -> LPAREN .)
    ID              reduce using rule 182 (false_button -> LPAREN .)


state 132

    (149) t_exp -> expression . release_exp t_exp_and
    (8) release_exp -> . empty
    (4) empty -> .

    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 179
    empty                          shift and go to state 177

state 133

    (127) exploration -> EXPLORATION . tag_sp variable explore_var np_check_size
    (126) tag_sp -> . LPAREN

    LPAREN          shift and go to state 181

    tag_sp                         shift and go to state 180

state 134

    (134) financial_state -> FINANCIAL_STATE . tag_sp variable sp_param variable sp_param variable sp_param variable np_check_size
    (126) tag_sp -> . LPAREN

    LPAREN          shift and go to state 181

    tag_sp                         shift and go to state 182

state 135

    (137) dummi_regression -> DUMMI_REGRESSION . tag_sp variable sp_param variable dr_array dr_int np_check_size
    (126) tag_sp -> . LPAREN

    LPAREN          shift and go to state 181

    tag_sp                         shift and go to state 183

state 136

    (135) season_analysis -> SEASON_ANALYSIS . tag_sp variable np_check_size
    (126) tag_sp -> . LPAREN

    LPAREN          shift and go to state 181

    tag_sp                         shift and go to state 184

state 137

    (136) trend_prediction -> TREND_PREDICTION . tag_sp variable sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size
    (126) tag_sp -> . LPAREN

    LPAREN          shift and go to state 181

    tag_sp                         shift and go to state 185

state 138

    (144) model_predict -> MODEL_PREDICT . tag_sp variable sp_param variable np_check_size
    (126) tag_sp -> . LPAREN

    LPAREN          shift and go to state 181

    tag_sp                         shift and go to state 186

state 139

    (90) np_read -> READ .

    LPAREN          reduce using rule 90 (np_read -> READ .)


state 140

    (153) expression -> m_exp . release_exp expression_comp
    (8) release_exp -> . empty
    (4) empty -> .

    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 187
    empty                          shift and go to state 177

state 141

    (162) m_exp -> term . release_exp m_exp_sr
    (8) release_exp -> . empty
    (4) empty -> .

    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 188
    empty                          shift and go to state 177

state 142

    (167) term -> sub_factor . release_exp term_pc
    (8) release_exp -> . empty
    (4) empty -> .

    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 189
    empty                          shift and go to state 177

state 143

    (173) sub_factor -> factor . release_exp sub_factor_pc
    (8) release_exp -> . empty
    (4) empty -> .

    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 190
    empty                          shift and go to state 177

state 144

    (177) factor -> factor_exp .

    POWER           reduce using rule 177 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 177 (factor -> factor_exp .)
    DIVIDE          reduce using rule 177 (factor -> factor_exp .)
    MODULE          reduce using rule 177 (factor -> factor_exp .)
    PLUS            reduce using rule 177 (factor -> factor_exp .)
    MINUS           reduce using rule 177 (factor -> factor_exp .)
    GTHAN           reduce using rule 177 (factor -> factor_exp .)
    EQUAL           reduce using rule 177 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 177 (factor -> factor_exp .)
    LTHAN           reduce using rule 177 (factor -> factor_exp .)
    GORE            reduce using rule 177 (factor -> factor_exp .)
    LORE            reduce using rule 177 (factor -> factor_exp .)
    AND             reduce using rule 177 (factor -> factor_exp .)
    OR              reduce using rule 177 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 177 (factor -> factor_exp .)
    RPAREN          reduce using rule 177 (factor -> factor_exp .)
    COMMA           reduce using rule 177 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 177 (factor -> factor_exp .)
    TO              reduce using rule 177 (factor -> factor_exp .)


state 145

    (178) factor -> factor_cte .

    POWER           reduce using rule 178 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 178 (factor -> factor_cte .)
    DIVIDE          reduce using rule 178 (factor -> factor_cte .)
    MODULE          reduce using rule 178 (factor -> factor_cte .)
    PLUS            reduce using rule 178 (factor -> factor_cte .)
    MINUS           reduce using rule 178 (factor -> factor_cte .)
    GTHAN           reduce using rule 178 (factor -> factor_cte .)
    EQUAL           reduce using rule 178 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 178 (factor -> factor_cte .)
    LTHAN           reduce using rule 178 (factor -> factor_cte .)
    GORE            reduce using rule 178 (factor -> factor_cte .)
    LORE            reduce using rule 178 (factor -> factor_cte .)
    AND             reduce using rule 178 (factor -> factor_cte .)
    OR              reduce using rule 178 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 178 (factor -> factor_cte .)
    RPAREN          reduce using rule 178 (factor -> factor_cte .)
    COMMA           reduce using rule 178 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 178 (factor -> factor_cte .)
    TO              reduce using rule 178 (factor -> factor_cte .)


state 146

    (180) factor -> call_function .

    POWER           reduce using rule 180 (factor -> call_function .)
    MULTIPLY        reduce using rule 180 (factor -> call_function .)
    DIVIDE          reduce using rule 180 (factor -> call_function .)
    MODULE          reduce using rule 180 (factor -> call_function .)
    PLUS            reduce using rule 180 (factor -> call_function .)
    MINUS           reduce using rule 180 (factor -> call_function .)
    GTHAN           reduce using rule 180 (factor -> call_function .)
    EQUAL           reduce using rule 180 (factor -> call_function .)
    NOTEQUAL        reduce using rule 180 (factor -> call_function .)
    LTHAN           reduce using rule 180 (factor -> call_function .)
    GORE            reduce using rule 180 (factor -> call_function .)
    LORE            reduce using rule 180 (factor -> call_function .)
    AND             reduce using rule 180 (factor -> call_function .)
    OR              reduce using rule 180 (factor -> call_function .)
    SEMICOLON       reduce using rule 180 (factor -> call_function .)
    RPAREN          reduce using rule 180 (factor -> call_function .)
    COMMA           reduce using rule 180 (factor -> call_function .)
    RSQBRACKET      reduce using rule 180 (factor -> call_function .)
    TO              reduce using rule 180 (factor -> call_function .)


state 147

    (181) factor_exp -> false_button . exp release_false_button
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    false_button                   shift and go to state 147
    exp                            shift and go to state 191
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 148

    (184) factor_cte -> CTE_FLOAT .

    POWER           reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    MODULE          reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    GORE            reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    LORE            reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 184 (factor_cte -> CTE_FLOAT .)
    TO              reduce using rule 184 (factor_cte -> CTE_FLOAT .)


state 149

    (185) factor_cte -> CTE_INT .

    POWER           reduce using rule 185 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 185 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 185 (factor_cte -> CTE_INT .)
    MODULE          reduce using rule 185 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 185 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 185 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 185 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 185 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 185 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 185 (factor_cte -> CTE_INT .)
    GORE            reduce using rule 185 (factor_cte -> CTE_INT .)
    LORE            reduce using rule 185 (factor_cte -> CTE_INT .)
    AND             reduce using rule 185 (factor_cte -> CTE_INT .)
    OR              reduce using rule 185 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 185 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 185 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 185 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 185 (factor_cte -> CTE_INT .)
    TO              reduce using rule 185 (factor_cte -> CTE_INT .)


state 150

    (186) factor_cte -> CTE_CHAR .

    POWER           reduce using rule 186 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 186 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 186 (factor_cte -> CTE_CHAR .)
    MODULE          reduce using rule 186 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 186 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 186 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 186 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 186 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 186 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 186 (factor_cte -> CTE_CHAR .)
    GORE            reduce using rule 186 (factor_cte -> CTE_CHAR .)
    LORE            reduce using rule 186 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 186 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 186 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 186 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 186 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 186 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 186 (factor_cte -> CTE_CHAR .)
    TO              reduce using rule 186 (factor_cte -> CTE_CHAR .)


state 151

    (103) call_function -> function_saver . function_flag call_params check_not_void
    (109) function_flag -> . LPAREN

    LPAREN          shift and go to state 100

    function_flag                  shift and go to state 192

state 152

    (74) keep_assign -> ASSIGN empty .

    EXPLORATION     reduce using rule 74 (keep_assign -> ASSIGN empty .)
    FINANCIAL_STATE reduce using rule 74 (keep_assign -> ASSIGN empty .)
    DUMMI_REGRESSION reduce using rule 74 (keep_assign -> ASSIGN empty .)
    SEASON_ANALYSIS reduce using rule 74 (keep_assign -> ASSIGN empty .)
    TREND_PREDICTION reduce using rule 74 (keep_assign -> ASSIGN empty .)
    MODEL_PREDICT   reduce using rule 74 (keep_assign -> ASSIGN empty .)
    READ            reduce using rule 74 (keep_assign -> ASSIGN empty .)
    CTE_FLOAT       reduce using rule 74 (keep_assign -> ASSIGN empty .)
    CTE_INT         reduce using rule 74 (keep_assign -> ASSIGN empty .)
    CTE_CHAR        reduce using rule 74 (keep_assign -> ASSIGN empty .)
    LPAREN          reduce using rule 74 (keep_assign -> ASSIGN empty .)
    ID              reduce using rule 74 (keep_assign -> ASSIGN empty .)


state 153

    (76) condition -> IF LPAREN exp . RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    RPAREN          shift and go to state 193


state 154

    (82) print -> PRINT LPAREN print_many . RPAREN SEMICOLON end_print_np

    RPAREN          shift and go to state 194


state 155

    (84) print_many -> print_type . print_many2
    (85) print_many2 -> . COMMA print_many_np print_many
    (86) print_many2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 196
    RPAREN          reduce using rule 4 (empty -> .)

    print_many2                    shift and go to state 195
    empty                          shift and go to state 197

state 156

    (83) print_type -> exp .

    COMMA           reduce using rule 83 (print_type -> exp .)
    RPAREN          reduce using rule 83 (print_type -> exp .)


state 157

    (105) call_void_function -> function_saver function_flag call_params . verify_params check_void
    (106) verify_params -> . RPAREN

    RPAREN          shift and go to state 199

    verify_params                  shift and go to state 198

state 158

    (110) call_params -> check_param . exp_many
    (113) exp_many -> . COMMA check_param exp_many
    (114) exp_many -> . empty
    (4) empty -> .

    COMMA           shift and go to state 201
    RPAREN          reduce using rule 4 (empty -> .)

    exp_many                       shift and go to state 200
    empty                          shift and go to state 202

state 159

    (111) call_params -> empty .

    RPAREN          reduce using rule 111 (call_params -> empty .)


state 160

    (112) check_param -> exp .

    COMMA           reduce using rule 112 (check_param -> exp .)
    RPAREN          reduce using rule 112 (check_param -> exp .)


state 161

    (41) variable_array -> LSQBRACKET index_arr_mat . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 203


state 162

    (45) index_arr_mat -> exp .

    RSQBRACKET      reduce using rule 45 (index_arr_mat -> exp .)


state 163

    (98) for -> FOR LPAREN for_control . keep_assign exp for_np1 for_end body for_np2
    (74) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 96

    keep_assign                    shift and go to state 204

state 164

    (99) for_control -> id_saver .

    ASSIGN          reduce using rule 99 (for_control -> id_saver .)


state 165

    (95) while -> DO seed body . WHILE LPAREN exp RPAREN SEMICOLON gotoV

    WHILE           shift and go to state 205


state 166

    (67) body -> LBRACKET . inner_body RBRACKET
    (68) inner_body -> . statement inner_body
    (69) inner_body -> . empty
    (115) statement -> . assign
    (116) statement -> . condition
    (117) statement -> . print
    (118) statement -> . cycle
    (119) statement -> . call_void_function
    (4) empty -> .
    (70) assign -> . variable keep_assign specialf_assign end_assign
    (76) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (82) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (93) cycle -> . for
    (94) cycle -> . while
    (105) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . var_id_saver variable_array
    (98) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (95) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (108) function_saver -> . ID empty
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    inner_body                     shift and go to state 206
    statement                      shift and go to state 66
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 167

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param . RPAREN add_func_glob program_vars inner_body return end_function program_function

    RPAREN          shift and go to state 207


state 168

    (55) param -> s_type . id_saver add_params param2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 208

state 169

    (56) param -> empty .

    RPAREN          reduce using rule 56 (param -> empty .)


state 170

    (27) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 27 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 171

    (30) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 172

    (31) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (33) add_s_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_s_var                      shift and go to state 209
    empty                          shift and go to state 61

state 173

    (36) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 210


state 174

    (70) assign -> variable keep_assign specialf_assign end_assign .

    IF              reduce using rule 70 (assign -> variable keep_assign specialf_assign end_assign .)
    PRINT           reduce using rule 70 (assign -> variable keep_assign specialf_assign end_assign .)
    FOR             reduce using rule 70 (assign -> variable keep_assign specialf_assign end_assign .)
    DO              reduce using rule 70 (assign -> variable keep_assign specialf_assign end_assign .)
    ID              reduce using rule 70 (assign -> variable keep_assign specialf_assign end_assign .)
    RBRACKET        reduce using rule 70 (assign -> variable keep_assign specialf_assign end_assign .)
    RETURN          reduce using rule 70 (assign -> variable keep_assign specialf_assign end_assign .)


state 175

    (75) end_assign -> SEMICOLON . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 211

state 176

    (145) exp -> t_exp release_exp . exp_or
    (146) exp_or -> . exp_keep_or exp
    (147) exp_or -> . empty
    (148) exp_keep_or -> . OR
    (4) empty -> .

    OR              shift and go to state 215
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    exp_or                         shift and go to state 212
    exp_keep_or                    shift and go to state 213
    empty                          shift and go to state 214

state 177

    (8) release_exp -> empty .

    OR              reduce using rule 8 (release_exp -> empty .)
    SEMICOLON       reduce using rule 8 (release_exp -> empty .)
    RPAREN          reduce using rule 8 (release_exp -> empty .)
    COMMA           reduce using rule 8 (release_exp -> empty .)
    RSQBRACKET      reduce using rule 8 (release_exp -> empty .)
    TO              reduce using rule 8 (release_exp -> empty .)
    AND             reduce using rule 8 (release_exp -> empty .)
    GTHAN           reduce using rule 8 (release_exp -> empty .)
    EQUAL           reduce using rule 8 (release_exp -> empty .)
    NOTEQUAL        reduce using rule 8 (release_exp -> empty .)
    LTHAN           reduce using rule 8 (release_exp -> empty .)
    GORE            reduce using rule 8 (release_exp -> empty .)
    LORE            reduce using rule 8 (release_exp -> empty .)
    PLUS            reduce using rule 8 (release_exp -> empty .)
    MINUS           reduce using rule 8 (release_exp -> empty .)
    MULTIPLY        reduce using rule 8 (release_exp -> empty .)
    DIVIDE          reduce using rule 8 (release_exp -> empty .)
    MODULE          reduce using rule 8 (release_exp -> empty .)
    POWER           reduce using rule 8 (release_exp -> empty .)


state 178

    (89) read -> np_read LPAREN . valid_exp_read read_np
    (91) valid_exp_read -> . exp
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    valid_exp_read                 shift and go to state 216
    exp                            shift and go to state 217
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 179

    (149) t_exp -> expression release_exp . t_exp_and
    (150) t_exp_and -> . keep_and t_exp
    (151) t_exp_and -> . empty
    (152) keep_and -> . AND
    (4) empty -> .

    AND             shift and go to state 221
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    t_exp_and                      shift and go to state 218
    keep_and                       shift and go to state 219
    empty                          shift and go to state 220

state 180

    (127) exploration -> EXPLORATION tag_sp . variable explore_var np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 222
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 181

    (126) tag_sp -> LPAREN .

    ID              reduce using rule 126 (tag_sp -> LPAREN .)


state 182

    (134) financial_state -> FINANCIAL_STATE tag_sp . variable sp_param variable sp_param variable sp_param variable np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 223
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 183

    (137) dummi_regression -> DUMMI_REGRESSION tag_sp . variable sp_param variable dr_array dr_int np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 224
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 184

    (135) season_analysis -> SEASON_ANALYSIS tag_sp . variable np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 225
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 185

    (136) trend_prediction -> TREND_PREDICTION tag_sp . variable sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 226
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 186

    (144) model_predict -> MODEL_PREDICT tag_sp . variable sp_param variable np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 227
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 187

    (153) expression -> m_exp release_exp . expression_comp
    (154) expression_comp -> . expression_comp_2 m_exp release_exp
    (155) expression_comp -> . empty
    (156) expression_comp_2 -> . GTHAN
    (157) expression_comp_2 -> . EQUAL
    (158) expression_comp_2 -> . NOTEQUAL
    (159) expression_comp_2 -> . LTHAN
    (160) expression_comp_2 -> . GORE
    (161) expression_comp_2 -> . LORE
    (4) empty -> .

    GTHAN           shift and go to state 231
    EQUAL           shift and go to state 232
    NOTEQUAL        shift and go to state 233
    LTHAN           shift and go to state 234
    GORE            shift and go to state 235
    LORE            shift and go to state 236
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    expression_comp                shift and go to state 228
    expression_comp_2              shift and go to state 229
    empty                          shift and go to state 230

state 188

    (162) m_exp -> term release_exp . m_exp_sr
    (163) m_exp_sr -> . m_exp_sr_2 m_exp
    (164) m_exp_sr -> . empty
    (165) m_exp_sr_2 -> . PLUS
    (166) m_exp_sr_2 -> . MINUS
    (4) empty -> .

    PLUS            shift and go to state 240
    MINUS           shift and go to state 241
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    m_exp_sr                       shift and go to state 237
    m_exp_sr_2                     shift and go to state 238
    empty                          shift and go to state 239

state 189

    (167) term -> sub_factor release_exp . term_pc
    (168) term_pc -> . term_pc_2 term
    (169) term_pc -> . empty
    (170) term_pc_2 -> . MULTIPLY
    (171) term_pc_2 -> . DIVIDE
    (172) term_pc_2 -> . MODULE
    (4) empty -> .

    MULTIPLY        shift and go to state 245
    DIVIDE          shift and go to state 246
    MODULE          shift and go to state 247
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    term_pc                        shift and go to state 242
    term_pc_2                      shift and go to state 243
    empty                          shift and go to state 244

state 190

    (173) sub_factor -> factor release_exp . sub_factor_pc
    (174) sub_factor_pc -> . sub_factor_pc_2 sub_factor
    (175) sub_factor_pc -> . empty
    (176) sub_factor_pc_2 -> . POWER empty
    (4) empty -> .

    POWER           shift and go to state 251
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    sub_factor_pc                  shift and go to state 248
    sub_factor_pc_2                shift and go to state 249
    empty                          shift and go to state 250

state 191

    (181) factor_exp -> false_button exp . release_false_button
    (183) release_false_button -> . RPAREN

    RPAREN          shift and go to state 253

    release_false_button           shift and go to state 252

state 192

    (103) call_function -> function_saver function_flag . call_params check_not_void
    (110) call_params -> . check_param exp_many
    (111) call_params -> . empty
    (112) check_param -> . exp
    (4) empty -> .
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RPAREN          reduce using rule 4 (empty -> .)
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    function_saver                 shift and go to state 151
    call_params                    shift and go to state 254
    check_param                    shift and go to state 158
    empty                          shift and go to state 159
    exp                            shift and go to state 160
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 193

    (76) condition -> IF LPAREN exp RPAREN . condition_GOTOF body condition2 SEMICOLON end_condition
    (79) condition_GOTOF -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    condition_GOTOF                shift and go to state 255
    empty                          shift and go to state 256

state 194

    (82) print -> PRINT LPAREN print_many RPAREN . SEMICOLON end_print_np

    SEMICOLON       shift and go to state 257


state 195

    (84) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 84 (print_many -> print_type print_many2 .)


state 196

    (85) print_many2 -> COMMA . print_many_np print_many
    (87) print_many_np -> . empty
    (4) empty -> .

    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    print_many_np                  shift and go to state 258
    empty                          shift and go to state 259

state 197

    (86) print_many2 -> empty .

    RPAREN          reduce using rule 86 (print_many2 -> empty .)


state 198

    (105) call_void_function -> function_saver function_flag call_params verify_params . check_void
    (107) check_void -> . SEMICOLON

    SEMICOLON       shift and go to state 261

    check_void                     shift and go to state 260

state 199

    (106) verify_params -> RPAREN .

    SEMICOLON       reduce using rule 106 (verify_params -> RPAREN .)


state 200

    (110) call_params -> check_param exp_many .

    RPAREN          reduce using rule 110 (call_params -> check_param exp_many .)


state 201

    (113) exp_many -> COMMA . check_param exp_many
    (112) check_param -> . exp
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    check_param                    shift and go to state 262
    exp                            shift and go to state 160
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 202

    (114) exp_many -> empty .

    RPAREN          reduce using rule 114 (exp_many -> empty .)


state 203

    (41) variable_array -> LSQBRACKET index_arr_mat RSQBRACKET . variable_matrix
    (43) variable_matrix -> . LSQBRACKET index_arr_mat RSQBRACKET
    (44) variable_matrix -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 263
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    variable_matrix                shift and go to state 264
    empty                          shift and go to state 265

state 204

    (98) for -> FOR LPAREN for_control keep_assign . exp for_np1 for_end body for_np2
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    exp                            shift and go to state 266
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 205

    (95) while -> DO seed body WHILE . LPAREN exp RPAREN SEMICOLON gotoV

    LPAREN          shift and go to state 267


state 206

    (67) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 268


state 207

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN . add_func_glob program_vars inner_body return end_function program_function
    (53) add_func_glob -> . LBRACKET

    LBRACKET        shift and go to state 270

    add_func_glob                  shift and go to state 269

state 208

    (55) param -> s_type id_saver . add_params param2
    (59) add_params -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    add_params                     shift and go to state 271
    empty                          shift and go to state 272

state 209

    (31) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (31) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (32) var_s_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 89
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_type2                    shift and go to state 273
    empty                          shift and go to state 90

state 210

    (36) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 36 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 36 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 211

    (75) end_assign -> SEMICOLON empty .

    IF              reduce using rule 75 (end_assign -> SEMICOLON empty .)
    PRINT           reduce using rule 75 (end_assign -> SEMICOLON empty .)
    FOR             reduce using rule 75 (end_assign -> SEMICOLON empty .)
    DO              reduce using rule 75 (end_assign -> SEMICOLON empty .)
    ID              reduce using rule 75 (end_assign -> SEMICOLON empty .)
    RBRACKET        reduce using rule 75 (end_assign -> SEMICOLON empty .)
    RETURN          reduce using rule 75 (end_assign -> SEMICOLON empty .)


state 212

    (145) exp -> t_exp release_exp exp_or .

    SEMICOLON       reduce using rule 145 (exp -> t_exp release_exp exp_or .)
    RPAREN          reduce using rule 145 (exp -> t_exp release_exp exp_or .)
    COMMA           reduce using rule 145 (exp -> t_exp release_exp exp_or .)
    RSQBRACKET      reduce using rule 145 (exp -> t_exp release_exp exp_or .)
    TO              reduce using rule 145 (exp -> t_exp release_exp exp_or .)


state 213

    (146) exp_or -> exp_keep_or . exp
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    exp                            shift and go to state 274
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 214

    (147) exp_or -> empty .

    SEMICOLON       reduce using rule 147 (exp_or -> empty .)
    RPAREN          reduce using rule 147 (exp_or -> empty .)
    COMMA           reduce using rule 147 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 147 (exp_or -> empty .)
    TO              reduce using rule 147 (exp_or -> empty .)


state 215

    (148) exp_keep_or -> OR .

    CTE_FLOAT       reduce using rule 148 (exp_keep_or -> OR .)
    CTE_INT         reduce using rule 148 (exp_keep_or -> OR .)
    CTE_CHAR        reduce using rule 148 (exp_keep_or -> OR .)
    LPAREN          reduce using rule 148 (exp_keep_or -> OR .)
    ID              reduce using rule 148 (exp_keep_or -> OR .)


state 216

    (89) read -> np_read LPAREN valid_exp_read . read_np
    (92) read_np -> . RPAREN

    RPAREN          shift and go to state 276

    read_np                        shift and go to state 275

state 217

    (91) valid_exp_read -> exp .

    RPAREN          reduce using rule 91 (valid_exp_read -> exp .)


state 218

    (149) t_exp -> expression release_exp t_exp_and .

    OR              reduce using rule 149 (t_exp -> expression release_exp t_exp_and .)
    SEMICOLON       reduce using rule 149 (t_exp -> expression release_exp t_exp_and .)
    RPAREN          reduce using rule 149 (t_exp -> expression release_exp t_exp_and .)
    COMMA           reduce using rule 149 (t_exp -> expression release_exp t_exp_and .)
    RSQBRACKET      reduce using rule 149 (t_exp -> expression release_exp t_exp_and .)
    TO              reduce using rule 149 (t_exp -> expression release_exp t_exp_and .)


state 219

    (150) t_exp_and -> keep_and . t_exp
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    t_exp                          shift and go to state 277
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 220

    (151) t_exp_and -> empty .

    OR              reduce using rule 151 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 151 (t_exp_and -> empty .)
    RPAREN          reduce using rule 151 (t_exp_and -> empty .)
    COMMA           reduce using rule 151 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 151 (t_exp_and -> empty .)
    TO              reduce using rule 151 (t_exp_and -> empty .)


state 221

    (152) keep_and -> AND .

    CTE_FLOAT       reduce using rule 152 (keep_and -> AND .)
    CTE_INT         reduce using rule 152 (keep_and -> AND .)
    CTE_CHAR        reduce using rule 152 (keep_and -> AND .)
    LPAREN          reduce using rule 152 (keep_and -> AND .)
    ID              reduce using rule 152 (keep_and -> AND .)


state 222

    (127) exploration -> EXPLORATION tag_sp variable . explore_var np_check_size
    (130) explore_var -> . sp_param variable explor_cte
    (131) explore_var -> . empty
    (128) sp_param -> . COMMA
    (4) empty -> .

    COMMA           shift and go to state 281
    RPAREN          reduce using rule 4 (empty -> .)

    explore_var                    shift and go to state 278
    sp_param                       shift and go to state 279
    empty                          shift and go to state 280

state 223

    (134) financial_state -> FINANCIAL_STATE tag_sp variable . sp_param variable sp_param variable sp_param variable np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 282

state 224

    (137) dummi_regression -> DUMMI_REGRESSION tag_sp variable . sp_param variable dr_array dr_int np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 283

state 225

    (135) season_analysis -> SEASON_ANALYSIS tag_sp variable . np_check_size
    (129) np_check_size -> . RPAREN

    RPAREN          shift and go to state 285

    np_check_size                  shift and go to state 284

state 226

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable . sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 286

state 227

    (144) model_predict -> MODEL_PREDICT tag_sp variable . sp_param variable np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 287

state 228

    (153) expression -> m_exp release_exp expression_comp .

    AND             reduce using rule 153 (expression -> m_exp release_exp expression_comp .)
    OR              reduce using rule 153 (expression -> m_exp release_exp expression_comp .)
    SEMICOLON       reduce using rule 153 (expression -> m_exp release_exp expression_comp .)
    RPAREN          reduce using rule 153 (expression -> m_exp release_exp expression_comp .)
    COMMA           reduce using rule 153 (expression -> m_exp release_exp expression_comp .)
    RSQBRACKET      reduce using rule 153 (expression -> m_exp release_exp expression_comp .)
    TO              reduce using rule 153 (expression -> m_exp release_exp expression_comp .)


state 229

    (154) expression_comp -> expression_comp_2 . m_exp release_exp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    m_exp                          shift and go to state 288
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 230

    (155) expression_comp -> empty .

    AND             reduce using rule 155 (expression_comp -> empty .)
    OR              reduce using rule 155 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 155 (expression_comp -> empty .)
    RPAREN          reduce using rule 155 (expression_comp -> empty .)
    COMMA           reduce using rule 155 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 155 (expression_comp -> empty .)
    TO              reduce using rule 155 (expression_comp -> empty .)


state 231

    (156) expression_comp_2 -> GTHAN .

    CTE_FLOAT       reduce using rule 156 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 156 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 156 (expression_comp_2 -> GTHAN .)
    LPAREN          reduce using rule 156 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 156 (expression_comp_2 -> GTHAN .)


state 232

    (157) expression_comp_2 -> EQUAL .

    CTE_FLOAT       reduce using rule 157 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 157 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 157 (expression_comp_2 -> EQUAL .)
    LPAREN          reduce using rule 157 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 157 (expression_comp_2 -> EQUAL .)


state 233

    (158) expression_comp_2 -> NOTEQUAL .

    CTE_FLOAT       reduce using rule 158 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 158 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 158 (expression_comp_2 -> NOTEQUAL .)
    LPAREN          reduce using rule 158 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 158 (expression_comp_2 -> NOTEQUAL .)


state 234

    (159) expression_comp_2 -> LTHAN .

    CTE_FLOAT       reduce using rule 159 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 159 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 159 (expression_comp_2 -> LTHAN .)
    LPAREN          reduce using rule 159 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 159 (expression_comp_2 -> LTHAN .)


state 235

    (160) expression_comp_2 -> GORE .

    CTE_FLOAT       reduce using rule 160 (expression_comp_2 -> GORE .)
    CTE_INT         reduce using rule 160 (expression_comp_2 -> GORE .)
    CTE_CHAR        reduce using rule 160 (expression_comp_2 -> GORE .)
    LPAREN          reduce using rule 160 (expression_comp_2 -> GORE .)
    ID              reduce using rule 160 (expression_comp_2 -> GORE .)


state 236

    (161) expression_comp_2 -> LORE .

    CTE_FLOAT       reduce using rule 161 (expression_comp_2 -> LORE .)
    CTE_INT         reduce using rule 161 (expression_comp_2 -> LORE .)
    CTE_CHAR        reduce using rule 161 (expression_comp_2 -> LORE .)
    LPAREN          reduce using rule 161 (expression_comp_2 -> LORE .)
    ID              reduce using rule 161 (expression_comp_2 -> LORE .)


state 237

    (162) m_exp -> term release_exp m_exp_sr .

    GTHAN           reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    EQUAL           reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    NOTEQUAL        reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    LTHAN           reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    GORE            reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    LORE            reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    AND             reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    OR              reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    SEMICOLON       reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    RPAREN          reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    COMMA           reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    RSQBRACKET      reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)
    TO              reduce using rule 162 (m_exp -> term release_exp m_exp_sr .)


state 238

    (163) m_exp_sr -> m_exp_sr_2 . m_exp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    m_exp                          shift and go to state 289
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 239

    (164) m_exp_sr -> empty .

    GTHAN           reduce using rule 164 (m_exp_sr -> empty .)
    EQUAL           reduce using rule 164 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 164 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 164 (m_exp_sr -> empty .)
    GORE            reduce using rule 164 (m_exp_sr -> empty .)
    LORE            reduce using rule 164 (m_exp_sr -> empty .)
    AND             reduce using rule 164 (m_exp_sr -> empty .)
    OR              reduce using rule 164 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 164 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 164 (m_exp_sr -> empty .)
    COMMA           reduce using rule 164 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 164 (m_exp_sr -> empty .)
    TO              reduce using rule 164 (m_exp_sr -> empty .)


state 240

    (165) m_exp_sr_2 -> PLUS .

    CTE_FLOAT       reduce using rule 165 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 165 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 165 (m_exp_sr_2 -> PLUS .)
    LPAREN          reduce using rule 165 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 165 (m_exp_sr_2 -> PLUS .)


state 241

    (166) m_exp_sr_2 -> MINUS .

    CTE_FLOAT       reduce using rule 166 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 166 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 166 (m_exp_sr_2 -> MINUS .)
    LPAREN          reduce using rule 166 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 166 (m_exp_sr_2 -> MINUS .)


state 242

    (167) term -> sub_factor release_exp term_pc .

    PLUS            reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    MINUS           reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    GTHAN           reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    EQUAL           reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    NOTEQUAL        reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    LTHAN           reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    GORE            reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    LORE            reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    AND             reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    OR              reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    SEMICOLON       reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    RPAREN          reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    COMMA           reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    RSQBRACKET      reduce using rule 167 (term -> sub_factor release_exp term_pc .)
    TO              reduce using rule 167 (term -> sub_factor release_exp term_pc .)


state 243

    (168) term_pc -> term_pc_2 . term
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    term                           shift and go to state 290
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 244

    (169) term_pc -> empty .

    PLUS            reduce using rule 169 (term_pc -> empty .)
    MINUS           reduce using rule 169 (term_pc -> empty .)
    GTHAN           reduce using rule 169 (term_pc -> empty .)
    EQUAL           reduce using rule 169 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 169 (term_pc -> empty .)
    LTHAN           reduce using rule 169 (term_pc -> empty .)
    GORE            reduce using rule 169 (term_pc -> empty .)
    LORE            reduce using rule 169 (term_pc -> empty .)
    AND             reduce using rule 169 (term_pc -> empty .)
    OR              reduce using rule 169 (term_pc -> empty .)
    SEMICOLON       reduce using rule 169 (term_pc -> empty .)
    RPAREN          reduce using rule 169 (term_pc -> empty .)
    COMMA           reduce using rule 169 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 169 (term_pc -> empty .)
    TO              reduce using rule 169 (term_pc -> empty .)


state 245

    (170) term_pc_2 -> MULTIPLY .

    CTE_FLOAT       reduce using rule 170 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 170 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 170 (term_pc_2 -> MULTIPLY .)
    LPAREN          reduce using rule 170 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 170 (term_pc_2 -> MULTIPLY .)


state 246

    (171) term_pc_2 -> DIVIDE .

    CTE_FLOAT       reduce using rule 171 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 171 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 171 (term_pc_2 -> DIVIDE .)
    LPAREN          reduce using rule 171 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 171 (term_pc_2 -> DIVIDE .)


state 247

    (172) term_pc_2 -> MODULE .

    CTE_FLOAT       reduce using rule 172 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 172 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 172 (term_pc_2 -> MODULE .)
    LPAREN          reduce using rule 172 (term_pc_2 -> MODULE .)
    ID              reduce using rule 172 (term_pc_2 -> MODULE .)


state 248

    (173) sub_factor -> factor release_exp sub_factor_pc .

    MULTIPLY        reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    DIVIDE          reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    MODULE          reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    PLUS            reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    MINUS           reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    GTHAN           reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    EQUAL           reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    NOTEQUAL        reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    LTHAN           reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    GORE            reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    LORE            reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    AND             reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    OR              reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    SEMICOLON       reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    RPAREN          reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    COMMA           reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    RSQBRACKET      reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)
    TO              reduce using rule 173 (sub_factor -> factor release_exp sub_factor_pc .)


state 249

    (174) sub_factor_pc -> sub_factor_pc_2 . sub_factor
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    sub_factor                     shift and go to state 291
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 250

    (175) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 175 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 175 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 175 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 175 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 175 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 175 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 175 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 175 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 175 (sub_factor_pc -> empty .)
    GORE            reduce using rule 175 (sub_factor_pc -> empty .)
    LORE            reduce using rule 175 (sub_factor_pc -> empty .)
    AND             reduce using rule 175 (sub_factor_pc -> empty .)
    OR              reduce using rule 175 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 175 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 175 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 175 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 175 (sub_factor_pc -> empty .)
    TO              reduce using rule 175 (sub_factor_pc -> empty .)


state 251

    (176) sub_factor_pc_2 -> POWER . empty
    (4) empty -> .

    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 292

state 252

    (181) factor_exp -> false_button exp release_false_button .

    POWER           reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    MULTIPLY        reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    DIVIDE          reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    MODULE          reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    PLUS            reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    MINUS           reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    GTHAN           reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    EQUAL           reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    NOTEQUAL        reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    LTHAN           reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    GORE            reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    LORE            reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    AND             reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    OR              reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    SEMICOLON       reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    RPAREN          reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    COMMA           reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    RSQBRACKET      reduce using rule 181 (factor_exp -> false_button exp release_false_button .)
    TO              reduce using rule 181 (factor_exp -> false_button exp release_false_button .)


state 253

    (183) release_false_button -> RPAREN .

    POWER           reduce using rule 183 (release_false_button -> RPAREN .)
    MULTIPLY        reduce using rule 183 (release_false_button -> RPAREN .)
    DIVIDE          reduce using rule 183 (release_false_button -> RPAREN .)
    MODULE          reduce using rule 183 (release_false_button -> RPAREN .)
    PLUS            reduce using rule 183 (release_false_button -> RPAREN .)
    MINUS           reduce using rule 183 (release_false_button -> RPAREN .)
    GTHAN           reduce using rule 183 (release_false_button -> RPAREN .)
    EQUAL           reduce using rule 183 (release_false_button -> RPAREN .)
    NOTEQUAL        reduce using rule 183 (release_false_button -> RPAREN .)
    LTHAN           reduce using rule 183 (release_false_button -> RPAREN .)
    GORE            reduce using rule 183 (release_false_button -> RPAREN .)
    LORE            reduce using rule 183 (release_false_button -> RPAREN .)
    AND             reduce using rule 183 (release_false_button -> RPAREN .)
    OR              reduce using rule 183 (release_false_button -> RPAREN .)
    SEMICOLON       reduce using rule 183 (release_false_button -> RPAREN .)
    RPAREN          reduce using rule 183 (release_false_button -> RPAREN .)
    COMMA           reduce using rule 183 (release_false_button -> RPAREN .)
    RSQBRACKET      reduce using rule 183 (release_false_button -> RPAREN .)
    TO              reduce using rule 183 (release_false_button -> RPAREN .)


state 254

    (103) call_function -> function_saver function_flag call_params . check_not_void
    (104) check_not_void -> . RPAREN

    RPAREN          shift and go to state 294

    check_not_void                 shift and go to state 293

state 255

    (76) condition -> IF LPAREN exp RPAREN condition_GOTOF . body condition2 SEMICOLON end_condition
    (67) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 166

    body                           shift and go to state 295

state 256

    (79) condition_GOTOF -> empty .

    LBRACKET        reduce using rule 79 (condition_GOTOF -> empty .)


state 257

    (82) print -> PRINT LPAREN print_many RPAREN SEMICOLON . end_print_np
    (88) end_print_np -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    end_print_np                   shift and go to state 296
    empty                          shift and go to state 297

state 258

    (85) print_many2 -> COMMA print_many_np . print_many
    (84) print_many -> . print_type print_many2
    (83) print_type -> . exp
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    print_many                     shift and go to state 298
    print_type                     shift and go to state 155
    exp                            shift and go to state 156
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 259

    (87) print_many_np -> empty .

    CTE_FLOAT       reduce using rule 87 (print_many_np -> empty .)
    CTE_INT         reduce using rule 87 (print_many_np -> empty .)
    CTE_CHAR        reduce using rule 87 (print_many_np -> empty .)
    LPAREN          reduce using rule 87 (print_many_np -> empty .)
    ID              reduce using rule 87 (print_many_np -> empty .)


state 260

    (105) call_void_function -> function_saver function_flag call_params verify_params check_void .

    IF              reduce using rule 105 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    PRINT           reduce using rule 105 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    FOR             reduce using rule 105 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    DO              reduce using rule 105 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    ID              reduce using rule 105 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    RBRACKET        reduce using rule 105 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    RETURN          reduce using rule 105 (call_void_function -> function_saver function_flag call_params verify_params check_void .)


state 261

    (107) check_void -> SEMICOLON .

    IF              reduce using rule 107 (check_void -> SEMICOLON .)
    PRINT           reduce using rule 107 (check_void -> SEMICOLON .)
    FOR             reduce using rule 107 (check_void -> SEMICOLON .)
    DO              reduce using rule 107 (check_void -> SEMICOLON .)
    ID              reduce using rule 107 (check_void -> SEMICOLON .)
    RBRACKET        reduce using rule 107 (check_void -> SEMICOLON .)
    RETURN          reduce using rule 107 (check_void -> SEMICOLON .)


state 262

    (113) exp_many -> COMMA check_param . exp_many
    (113) exp_many -> . COMMA check_param exp_many
    (114) exp_many -> . empty
    (4) empty -> .

    COMMA           shift and go to state 201
    RPAREN          reduce using rule 4 (empty -> .)

    exp_many                       shift and go to state 299
    empty                          shift and go to state 202

state 263

    (43) variable_matrix -> LSQBRACKET . index_arr_mat RSQBRACKET
    (45) index_arr_mat -> . exp
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    index_arr_mat                  shift and go to state 300
    exp                            shift and go to state 162
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 264

    (41) variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    POWER           reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    GORE            reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    LORE            reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    AND             reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    OR              reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)
    TO              reduce using rule 41 (variable_array -> LSQBRACKET index_arr_mat RSQBRACKET variable_matrix .)


state 265

    (44) variable_matrix -> empty .

    ASSIGN          reduce using rule 44 (variable_matrix -> empty .)
    POWER           reduce using rule 44 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 44 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 44 (variable_matrix -> empty .)
    MODULE          reduce using rule 44 (variable_matrix -> empty .)
    PLUS            reduce using rule 44 (variable_matrix -> empty .)
    MINUS           reduce using rule 44 (variable_matrix -> empty .)
    GTHAN           reduce using rule 44 (variable_matrix -> empty .)
    EQUAL           reduce using rule 44 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 44 (variable_matrix -> empty .)
    LTHAN           reduce using rule 44 (variable_matrix -> empty .)
    GORE            reduce using rule 44 (variable_matrix -> empty .)
    LORE            reduce using rule 44 (variable_matrix -> empty .)
    AND             reduce using rule 44 (variable_matrix -> empty .)
    OR              reduce using rule 44 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 44 (variable_matrix -> empty .)
    RPAREN          reduce using rule 44 (variable_matrix -> empty .)
    COMMA           reduce using rule 44 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 44 (variable_matrix -> empty .)
    TO              reduce using rule 44 (variable_matrix -> empty .)


state 266

    (98) for -> FOR LPAREN for_control keep_assign exp . for_np1 for_end body for_np2
    (100) for_np1 -> . TO

    TO              shift and go to state 302

    for_np1                        shift and go to state 301

state 267

    (95) while -> DO seed body WHILE LPAREN . exp RPAREN SEMICOLON gotoV
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    exp                            shift and go to state 303
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 268

    (67) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 67 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 67 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 67 (body -> LBRACKET inner_body RBRACKET .)


state 269

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob . program_vars inner_body return end_function program_function
    (17) program_vars -> . VAR var_type
    (18) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 11
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 304
    empty                          shift and go to state 12

state 270

    (53) add_func_glob -> LBRACKET .

    VAR             reduce using rule 53 (add_func_glob -> LBRACKET .)
    IF              reduce using rule 53 (add_func_glob -> LBRACKET .)
    PRINT           reduce using rule 53 (add_func_glob -> LBRACKET .)
    FOR             reduce using rule 53 (add_func_glob -> LBRACKET .)
    DO              reduce using rule 53 (add_func_glob -> LBRACKET .)
    ID              reduce using rule 53 (add_func_glob -> LBRACKET .)
    RETURN          reduce using rule 53 (add_func_glob -> LBRACKET .)
    RBRACKET        reduce using rule 53 (add_func_glob -> LBRACKET .)


state 271

    (55) param -> s_type id_saver add_params . param2
    (57) param2 -> . COMMA s_type id_saver add_params param2
    (58) param2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 306
    RPAREN          reduce using rule 4 (empty -> .)

    param2                         shift and go to state 305
    empty                          shift and go to state 307

state 272

    (59) add_params -> empty .

    COMMA           reduce using rule 59 (add_params -> empty .)
    RPAREN          reduce using rule 59 (add_params -> empty .)


state 273

    (31) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 31 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 274

    (146) exp_or -> exp_keep_or exp .

    SEMICOLON       reduce using rule 146 (exp_or -> exp_keep_or exp .)
    RPAREN          reduce using rule 146 (exp_or -> exp_keep_or exp .)
    COMMA           reduce using rule 146 (exp_or -> exp_keep_or exp .)
    RSQBRACKET      reduce using rule 146 (exp_or -> exp_keep_or exp .)
    TO              reduce using rule 146 (exp_or -> exp_keep_or exp .)


state 275

    (89) read -> np_read LPAREN valid_exp_read read_np .

    SEMICOLON       reduce using rule 89 (read -> np_read LPAREN valid_exp_read read_np .)


state 276

    (92) read_np -> RPAREN .

    SEMICOLON       reduce using rule 92 (read_np -> RPAREN .)


state 277

    (150) t_exp_and -> keep_and t_exp .

    OR              reduce using rule 150 (t_exp_and -> keep_and t_exp .)
    SEMICOLON       reduce using rule 150 (t_exp_and -> keep_and t_exp .)
    RPAREN          reduce using rule 150 (t_exp_and -> keep_and t_exp .)
    COMMA           reduce using rule 150 (t_exp_and -> keep_and t_exp .)
    RSQBRACKET      reduce using rule 150 (t_exp_and -> keep_and t_exp .)
    TO              reduce using rule 150 (t_exp_and -> keep_and t_exp .)


state 278

    (127) exploration -> EXPLORATION tag_sp variable explore_var . np_check_size
    (129) np_check_size -> . RPAREN

    RPAREN          shift and go to state 285

    np_check_size                  shift and go to state 308

state 279

    (130) explore_var -> sp_param . variable explor_cte
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 309
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 280

    (131) explore_var -> empty .

    RPAREN          reduce using rule 131 (explore_var -> empty .)


state 281

    (128) sp_param -> COMMA .

    ID              reduce using rule 128 (sp_param -> COMMA .)
    CTE_INT         reduce using rule 128 (sp_param -> COMMA .)
    COMMA           reduce using rule 128 (sp_param -> COMMA .)
    RPAREN          reduce using rule 128 (sp_param -> COMMA .)


state 282

    (134) financial_state -> FINANCIAL_STATE tag_sp variable sp_param . variable sp_param variable sp_param variable np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 310
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 283

    (137) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param . variable dr_array dr_int np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 311
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 284

    (135) season_analysis -> SEASON_ANALYSIS tag_sp variable np_check_size .

    SEMICOLON       reduce using rule 135 (season_analysis -> SEASON_ANALYSIS tag_sp variable np_check_size .)


state 285

    (129) np_check_size -> RPAREN .

    SEMICOLON       reduce using rule 129 (np_check_size -> RPAREN .)


state 286

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable sp_param . int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 313
    COMMA           reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 312
    empty                          shift and go to state 314

state 287

    (144) model_predict -> MODEL_PREDICT tag_sp variable sp_param . variable np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 315
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 288

    (154) expression_comp -> expression_comp_2 m_exp . release_exp
    (8) release_exp -> . empty
    (4) empty -> .

    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 316
    empty                          shift and go to state 177

state 289

    (163) m_exp_sr -> m_exp_sr_2 m_exp .

    GTHAN           reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    EQUAL           reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GORE            reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LORE            reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)
    TO              reduce using rule 163 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 290

    (168) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 168 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 168 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 168 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 168 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 168 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 168 (term_pc -> term_pc_2 term .)
    GORE            reduce using rule 168 (term_pc -> term_pc_2 term .)
    LORE            reduce using rule 168 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 168 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 168 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 168 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 168 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 168 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 168 (term_pc -> term_pc_2 term .)
    TO              reduce using rule 168 (term_pc -> term_pc_2 term .)


state 291

    (174) sub_factor_pc -> sub_factor_pc_2 sub_factor .

    MULTIPLY        reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    DIVIDE          reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MODULE          reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    PLUS            reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MINUS           reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GTHAN           reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    EQUAL           reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    NOTEQUAL        reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LTHAN           reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GORE            reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LORE            reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    AND             reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    OR              reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    SEMICOLON       reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RPAREN          reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    COMMA           reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RSQBRACKET      reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    TO              reduce using rule 174 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)


state 292

    (176) sub_factor_pc_2 -> POWER empty .

    CTE_FLOAT       reduce using rule 176 (sub_factor_pc_2 -> POWER empty .)
    CTE_INT         reduce using rule 176 (sub_factor_pc_2 -> POWER empty .)
    CTE_CHAR        reduce using rule 176 (sub_factor_pc_2 -> POWER empty .)
    LPAREN          reduce using rule 176 (sub_factor_pc_2 -> POWER empty .)
    ID              reduce using rule 176 (sub_factor_pc_2 -> POWER empty .)


state 293

    (103) call_function -> function_saver function_flag call_params check_not_void .

    POWER           reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    MULTIPLY        reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    DIVIDE          reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    MODULE          reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    PLUS            reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    MINUS           reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    GTHAN           reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    EQUAL           reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    NOTEQUAL        reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    LTHAN           reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    GORE            reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    LORE            reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    AND             reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    OR              reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    SEMICOLON       reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    RPAREN          reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    COMMA           reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    RSQBRACKET      reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)
    TO              reduce using rule 103 (call_function -> function_saver function_flag call_params check_not_void .)


state 294

    (104) check_not_void -> RPAREN .

    POWER           reduce using rule 104 (check_not_void -> RPAREN .)
    MULTIPLY        reduce using rule 104 (check_not_void -> RPAREN .)
    DIVIDE          reduce using rule 104 (check_not_void -> RPAREN .)
    MODULE          reduce using rule 104 (check_not_void -> RPAREN .)
    PLUS            reduce using rule 104 (check_not_void -> RPAREN .)
    MINUS           reduce using rule 104 (check_not_void -> RPAREN .)
    GTHAN           reduce using rule 104 (check_not_void -> RPAREN .)
    EQUAL           reduce using rule 104 (check_not_void -> RPAREN .)
    NOTEQUAL        reduce using rule 104 (check_not_void -> RPAREN .)
    LTHAN           reduce using rule 104 (check_not_void -> RPAREN .)
    GORE            reduce using rule 104 (check_not_void -> RPAREN .)
    LORE            reduce using rule 104 (check_not_void -> RPAREN .)
    AND             reduce using rule 104 (check_not_void -> RPAREN .)
    OR              reduce using rule 104 (check_not_void -> RPAREN .)
    SEMICOLON       reduce using rule 104 (check_not_void -> RPAREN .)
    RPAREN          reduce using rule 104 (check_not_void -> RPAREN .)
    COMMA           reduce using rule 104 (check_not_void -> RPAREN .)
    RSQBRACKET      reduce using rule 104 (check_not_void -> RPAREN .)
    TO              reduce using rule 104 (check_not_void -> RPAREN .)


state 295

    (76) condition -> IF LPAREN exp RPAREN condition_GOTOF body . condition2 SEMICOLON end_condition
    (77) condition2 -> . ELSE condition_GOTO body
    (78) condition2 -> . empty
    (4) empty -> .

    ELSE            shift and go to state 318
    SEMICOLON       reduce using rule 4 (empty -> .)

    condition2                     shift and go to state 317
    empty                          shift and go to state 319

state 296

    (82) print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .

    IF              reduce using rule 82 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    PRINT           reduce using rule 82 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    FOR             reduce using rule 82 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    DO              reduce using rule 82 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    ID              reduce using rule 82 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RBRACKET        reduce using rule 82 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RETURN          reduce using rule 82 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)


state 297

    (88) end_print_np -> empty .

    IF              reduce using rule 88 (end_print_np -> empty .)
    PRINT           reduce using rule 88 (end_print_np -> empty .)
    FOR             reduce using rule 88 (end_print_np -> empty .)
    DO              reduce using rule 88 (end_print_np -> empty .)
    ID              reduce using rule 88 (end_print_np -> empty .)
    RBRACKET        reduce using rule 88 (end_print_np -> empty .)
    RETURN          reduce using rule 88 (end_print_np -> empty .)


state 298

    (85) print_many2 -> COMMA print_many_np print_many .

    RPAREN          reduce using rule 85 (print_many2 -> COMMA print_many_np print_many .)


state 299

    (113) exp_many -> COMMA check_param exp_many .

    RPAREN          reduce using rule 113 (exp_many -> COMMA check_param exp_many .)


state 300

    (43) variable_matrix -> LSQBRACKET index_arr_mat . RSQBRACKET

    RSQBRACKET      shift and go to state 320


state 301

    (98) for -> FOR LPAREN for_control keep_assign exp for_np1 . for_end body for_np2
    (101) for_end -> . int_const_saver RPAREN
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 313
    RPAREN          reduce using rule 4 (empty -> .)

    for_end                        shift and go to state 321
    int_const_saver                shift and go to state 322
    empty                          shift and go to state 314

state 302

    (100) for_np1 -> TO .

    CTE_INT         reduce using rule 100 (for_np1 -> TO .)
    RPAREN          reduce using rule 100 (for_np1 -> TO .)


state 303

    (95) while -> DO seed body WHILE LPAREN exp . RPAREN SEMICOLON gotoV

    RPAREN          shift and go to state 323


state 304

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars . inner_body return end_function program_function
    (68) inner_body -> . statement inner_body
    (69) inner_body -> . empty
    (115) statement -> . assign
    (116) statement -> . condition
    (117) statement -> . print
    (118) statement -> . cycle
    (119) statement -> . call_void_function
    (4) empty -> .
    (70) assign -> . variable keep_assign specialf_assign end_assign
    (76) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (82) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (93) cycle -> . for
    (94) cycle -> . while
    (105) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . var_id_saver variable_array
    (98) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (95) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (108) function_saver -> . ID empty
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RETURN          reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    id_saver                       shift and go to state 83
    inner_body                     shift and go to state 324
    statement                      shift and go to state 66
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78
    var_id_saver                   shift and go to state 79

state 305

    (55) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 55 (param -> s_type id_saver add_params param2 .)


state 306

    (57) param2 -> COMMA . s_type id_saver add_params param2
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    s_type                         shift and go to state 325

state 307

    (58) param2 -> empty .

    RPAREN          reduce using rule 58 (param2 -> empty .)


state 308

    (127) exploration -> EXPLORATION tag_sp variable explore_var np_check_size .

    SEMICOLON       reduce using rule 127 (exploration -> EXPLORATION tag_sp variable explore_var np_check_size .)


state 309

    (130) explore_var -> sp_param variable . explor_cte
    (132) explor_cte -> . sp_param int_const_saver
    (133) explor_cte -> . empty
    (128) sp_param -> . COMMA
    (4) empty -> .

    COMMA           shift and go to state 281
    RPAREN          reduce using rule 4 (empty -> .)

    sp_param                       shift and go to state 326
    explor_cte                     shift and go to state 327
    empty                          shift and go to state 328

state 310

    (134) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable . sp_param variable sp_param variable np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 329

state 311

    (137) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param variable . dr_array dr_int np_check_size
    (138) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (139) dr_array -> . empty
    (4) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 331
    RPAREN          reduce using rule 4 (empty -> .)

  ! COMMA           [ reduce using rule 4 (empty -> .) ]

    dr_array                       shift and go to state 330
    empty                          shift and go to state 332

state 312

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver . sp_param int_const_saver sp_param int_const_saver np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 333

state 313

    (6) int_const_saver -> CTE_INT .

    COMMA           reduce using rule 6 (int_const_saver -> CTE_INT .)
    RPAREN          reduce using rule 6 (int_const_saver -> CTE_INT .)


state 314

    (7) int_const_saver -> empty .

    COMMA           reduce using rule 7 (int_const_saver -> empty .)
    RPAREN          reduce using rule 7 (int_const_saver -> empty .)


state 315

    (144) model_predict -> MODEL_PREDICT tag_sp variable sp_param variable . np_check_size
    (129) np_check_size -> . RPAREN

    RPAREN          shift and go to state 285

    np_check_size                  shift and go to state 334

state 316

    (154) expression_comp -> expression_comp_2 m_exp release_exp .

    AND             reduce using rule 154 (expression_comp -> expression_comp_2 m_exp release_exp .)
    OR              reduce using rule 154 (expression_comp -> expression_comp_2 m_exp release_exp .)
    SEMICOLON       reduce using rule 154 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RPAREN          reduce using rule 154 (expression_comp -> expression_comp_2 m_exp release_exp .)
    COMMA           reduce using rule 154 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RSQBRACKET      reduce using rule 154 (expression_comp -> expression_comp_2 m_exp release_exp .)
    TO              reduce using rule 154 (expression_comp -> expression_comp_2 m_exp release_exp .)


state 317

    (76) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 . SEMICOLON end_condition

    SEMICOLON       shift and go to state 335


state 318

    (77) condition2 -> ELSE . condition_GOTO body
    (80) condition_GOTO -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    condition_GOTO                 shift and go to state 336
    empty                          shift and go to state 337

state 319

    (78) condition2 -> empty .

    SEMICOLON       reduce using rule 78 (condition2 -> empty .)


state 320

    (43) variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .

    ASSIGN          reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    POWER           reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    MULTIPLY        reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    DIVIDE          reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    MODULE          reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    PLUS            reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    MINUS           reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    GTHAN           reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    EQUAL           reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    NOTEQUAL        reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    LTHAN           reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    GORE            reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    LORE            reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    AND             reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    OR              reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    SEMICOLON       reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    RPAREN          reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    COMMA           reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    RSQBRACKET      reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)
    TO              reduce using rule 43 (variable_matrix -> LSQBRACKET index_arr_mat RSQBRACKET .)


state 321

    (98) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end . body for_np2
    (67) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 166

    body                           shift and go to state 338

state 322

    (101) for_end -> int_const_saver . RPAREN

    RPAREN          shift and go to state 339


state 323

    (95) while -> DO seed body WHILE LPAREN exp RPAREN . SEMICOLON gotoV

    SEMICOLON       shift and go to state 340


state 324

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body . return end_function program_function
    (60) return -> . return_np exp return_quad SEMICOLON
    (61) return -> . empty_path_return
    (62) return_np -> . RETURN
    (64) empty_path_return -> . empty
    (4) empty -> .

    RETURN          shift and go to state 344
    RBRACKET        reduce using rule 4 (empty -> .)

    return                         shift and go to state 341
    return_np                      shift and go to state 342
    empty_path_return              shift and go to state 343
    empty                          shift and go to state 345

state 325

    (57) param2 -> COMMA s_type . id_saver add_params param2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 346

state 326

    (132) explor_cte -> sp_param . int_const_saver
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 313
    RPAREN          reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 347
    empty                          shift and go to state 314

state 327

    (130) explore_var -> sp_param variable explor_cte .

    RPAREN          reduce using rule 130 (explore_var -> sp_param variable explor_cte .)


state 328

    (133) explor_cte -> empty .

    RPAREN          reduce using rule 133 (explor_cte -> empty .)


state 329

    (134) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param . variable sp_param variable np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 348
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 330

    (137) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param variable dr_array . dr_int np_check_size
    (142) dr_int -> . COMMA int_const_saver
    (143) dr_int -> . empty
    (4) empty -> .

    COMMA           shift and go to state 350
    RPAREN          reduce using rule 4 (empty -> .)

    dr_int                         shift and go to state 349
    empty                          shift and go to state 351

state 331

    (138) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 352


state 332

    (139) dr_array -> empty .

    COMMA           reduce using rule 139 (dr_array -> empty .)
    RPAREN          reduce using rule 139 (dr_array -> empty .)


state 333

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param . int_const_saver sp_param int_const_saver np_check_size
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 313
    COMMA           reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 353
    empty                          shift and go to state 314

state 334

    (144) model_predict -> MODEL_PREDICT tag_sp variable sp_param variable np_check_size .

    SEMICOLON       reduce using rule 144 (model_predict -> MODEL_PREDICT tag_sp variable sp_param variable np_check_size .)


state 335

    (76) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON . end_condition
    (81) end_condition -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    end_condition                  shift and go to state 354
    empty                          shift and go to state 355

state 336

    (77) condition2 -> ELSE condition_GOTO . body
    (67) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 166

    body                           shift and go to state 356

state 337

    (80) condition_GOTO -> empty .

    LBRACKET        reduce using rule 80 (condition_GOTO -> empty .)


state 338

    (98) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body . for_np2
    (102) for_np2 -> . SEMICOLON

    SEMICOLON       shift and go to state 358

    for_np2                        shift and go to state 357

state 339

    (101) for_end -> int_const_saver RPAREN .

    LBRACKET        reduce using rule 101 (for_end -> int_const_saver RPAREN .)


state 340

    (95) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON . gotoV
    (97) gotoV -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    gotoV                          shift and go to state 359
    empty                          shift and go to state 360

state 341

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return . end_function program_function
    (54) end_function -> . RBRACKET

    RBRACKET        shift and go to state 362

    end_function                   shift and go to state 361

state 342

    (60) return -> return_np . exp return_quad SEMICOLON
    (145) exp -> . t_exp release_exp exp_or
    (149) t_exp -> . expression release_exp t_exp_and
    (153) expression -> . m_exp release_exp expression_comp
    (162) m_exp -> . term release_exp m_exp_sr
    (167) term -> . sub_factor release_exp term_pc
    (173) sub_factor -> . factor release_exp sub_factor_pc
    (177) factor -> . factor_exp
    (178) factor -> . factor_cte
    (179) factor -> . variable
    (180) factor -> . call_function
    (181) factor_exp -> . false_button exp release_false_button
    (184) factor_cte -> . CTE_FLOAT
    (185) factor_cte -> . CTE_INT
    (186) factor_cte -> . CTE_CHAR
    (39) variable -> . var_id_saver variable_array
    (103) call_function -> . function_saver function_flag call_params check_not_void
    (182) false_button -> . LPAREN
    (40) var_id_saver -> . id_saver
    (108) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    LPAREN          shift and go to state 131
    ID              shift and go to state 82

    exp                            shift and go to state 363
    t_exp                          shift and go to state 123
    expression                     shift and go to state 132
    m_exp                          shift and go to state 140
    term                           shift and go to state 141
    sub_factor                     shift and go to state 142
    factor                         shift and go to state 143
    factor_exp                     shift and go to state 144
    factor_cte                     shift and go to state 145
    variable                       shift and go to state 118
    call_function                  shift and go to state 146
    false_button                   shift and go to state 147
    var_id_saver                   shift and go to state 79
    function_saver                 shift and go to state 151
    id_saver                       shift and go to state 83

state 343

    (61) return -> empty_path_return .

    RBRACKET        reduce using rule 61 (return -> empty_path_return .)


state 344

    (62) return_np -> RETURN .

    CTE_FLOAT       reduce using rule 62 (return_np -> RETURN .)
    CTE_INT         reduce using rule 62 (return_np -> RETURN .)
    CTE_CHAR        reduce using rule 62 (return_np -> RETURN .)
    LPAREN          reduce using rule 62 (return_np -> RETURN .)
    ID              reduce using rule 62 (return_np -> RETURN .)


state 345

    (64) empty_path_return -> empty .

    RBRACKET        reduce using rule 64 (empty_path_return -> empty .)


state 346

    (57) param2 -> COMMA s_type id_saver . add_params param2
    (59) add_params -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    add_params                     shift and go to state 364
    empty                          shift and go to state 272

state 347

    (132) explor_cte -> sp_param int_const_saver .

    RPAREN          reduce using rule 132 (explor_cte -> sp_param int_const_saver .)


state 348

    (134) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param variable . sp_param variable np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 365

state 349

    (137) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param variable dr_array dr_int . np_check_size
    (129) np_check_size -> . RPAREN

    RPAREN          shift and go to state 285

    np_check_size                  shift and go to state 366

state 350

    (142) dr_int -> COMMA . int_const_saver
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 313
    RPAREN          reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 367
    empty                          shift and go to state 314

state 351

    (143) dr_int -> empty .

    RPAREN          reduce using rule 143 (dr_int -> empty .)


state 352

    (138) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 368


state 353

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param int_const_saver . sp_param int_const_saver np_check_size
    (128) sp_param -> . COMMA

    COMMA           shift and go to state 281

    sp_param                       shift and go to state 369

state 354

    (76) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .

    IF              reduce using rule 76 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    PRINT           reduce using rule 76 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    FOR             reduce using rule 76 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    DO              reduce using rule 76 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    ID              reduce using rule 76 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RBRACKET        reduce using rule 76 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RETURN          reduce using rule 76 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)


state 355

    (81) end_condition -> empty .

    IF              reduce using rule 81 (end_condition -> empty .)
    PRINT           reduce using rule 81 (end_condition -> empty .)
    FOR             reduce using rule 81 (end_condition -> empty .)
    DO              reduce using rule 81 (end_condition -> empty .)
    ID              reduce using rule 81 (end_condition -> empty .)
    RBRACKET        reduce using rule 81 (end_condition -> empty .)
    RETURN          reduce using rule 81 (end_condition -> empty .)


state 356

    (77) condition2 -> ELSE condition_GOTO body .

    SEMICOLON       reduce using rule 77 (condition2 -> ELSE condition_GOTO body .)


state 357

    (98) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .

    IF              reduce using rule 98 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    PRINT           reduce using rule 98 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    FOR             reduce using rule 98 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    DO              reduce using rule 98 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    ID              reduce using rule 98 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    RBRACKET        reduce using rule 98 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    RETURN          reduce using rule 98 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)


state 358

    (102) for_np2 -> SEMICOLON .

    IF              reduce using rule 102 (for_np2 -> SEMICOLON .)
    PRINT           reduce using rule 102 (for_np2 -> SEMICOLON .)
    FOR             reduce using rule 102 (for_np2 -> SEMICOLON .)
    DO              reduce using rule 102 (for_np2 -> SEMICOLON .)
    ID              reduce using rule 102 (for_np2 -> SEMICOLON .)
    RBRACKET        reduce using rule 102 (for_np2 -> SEMICOLON .)
    RETURN          reduce using rule 102 (for_np2 -> SEMICOLON .)


state 359

    (95) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .

    IF              reduce using rule 95 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    PRINT           reduce using rule 95 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    FOR             reduce using rule 95 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    DO              reduce using rule 95 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    ID              reduce using rule 95 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RBRACKET        reduce using rule 95 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RETURN          reduce using rule 95 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)


state 360

    (97) gotoV -> empty .

    IF              reduce using rule 97 (gotoV -> empty .)
    PRINT           reduce using rule 97 (gotoV -> empty .)
    FOR             reduce using rule 97 (gotoV -> empty .)
    DO              reduce using rule 97 (gotoV -> empty .)
    ID              reduce using rule 97 (gotoV -> empty .)
    RBRACKET        reduce using rule 97 (gotoV -> empty .)
    RETURN          reduce using rule 97 (gotoV -> empty .)


state 361

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function . program_function
    (46) program_function -> . FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (47) program_function -> . empty
    (4) empty -> .

    FUNCTION        shift and go to state 17
    MAIN            reduce using rule 4 (empty -> .)

    program_function               shift and go to state 370
    empty                          shift and go to state 18

state 362

    (54) end_function -> RBRACKET .

    FUNCTION        reduce using rule 54 (end_function -> RBRACKET .)
    MAIN            reduce using rule 54 (end_function -> RBRACKET .)


state 363

    (60) return -> return_np exp . return_quad SEMICOLON
    (63) return_quad -> . empty
    (4) empty -> .

    SEMICOLON       reduce using rule 4 (empty -> .)

    return_quad                    shift and go to state 371
    empty                          shift and go to state 372

state 364

    (57) param2 -> COMMA s_type id_saver add_params . param2
    (57) param2 -> . COMMA s_type id_saver add_params param2
    (58) param2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 306
    RPAREN          reduce using rule 4 (empty -> .)

    param2                         shift and go to state 373
    empty                          shift and go to state 307

state 365

    (134) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param variable sp_param . variable np_check_size
    (39) variable -> . var_id_saver variable_array
    (40) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 374
    var_id_saver                   shift and go to state 79
    id_saver                       shift and go to state 83

state 366

    (137) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param variable dr_array dr_int np_check_size .

    SEMICOLON       reduce using rule 137 (dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param variable dr_array dr_int np_check_size .)


state 367

    (142) dr_int -> COMMA int_const_saver .

    RPAREN          reduce using rule 142 (dr_int -> COMMA int_const_saver .)


state 368

    (138) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (140) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (141) dr_array_mp -> . empty
    (4) empty -> .

    COMMA           shift and go to state 375
    RSQBRACKET      reduce using rule 4 (empty -> .)

    dr_array_mp                    shift and go to state 376
    empty                          shift and go to state 377

state 369

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param int_const_saver sp_param . int_const_saver np_check_size
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 313
    RPAREN          reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 378
    empty                          shift and go to state 314

state 370

    (46) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function .

    MAIN            reduce using rule 46 (program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function .)


state 371

    (60) return -> return_np exp return_quad . SEMICOLON

    SEMICOLON       shift and go to state 379


state 372

    (63) return_quad -> empty .

    SEMICOLON       reduce using rule 63 (return_quad -> empty .)


state 373

    (57) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 57 (param2 -> COMMA s_type id_saver add_params param2 .)


state 374

    (134) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param variable sp_param variable . np_check_size
    (129) np_check_size -> . RPAREN

    RPAREN          shift and go to state 285

    np_check_size                  shift and go to state 380

state 375

    (140) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 381


state 376

    (138) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 382


state 377

    (141) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 141 (dr_array_mp -> empty .)


state 378

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver . np_check_size
    (129) np_check_size -> . RPAREN

    RPAREN          shift and go to state 285

    np_check_size                  shift and go to state 383

state 379

    (60) return -> return_np exp return_quad SEMICOLON .

    RBRACKET        reduce using rule 60 (return -> return_np exp return_quad SEMICOLON .)


state 380

    (134) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param variable sp_param variable np_check_size .

    SEMICOLON       reduce using rule 134 (financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param variable sp_param variable np_check_size .)


state 381

    (140) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (140) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (141) dr_array_mp -> . empty
    (4) empty -> .

    COMMA           shift and go to state 375
    RSQBRACKET      reduce using rule 4 (empty -> .)

    dr_array_mp                    shift and go to state 384
    empty                          shift and go to state 377

state 382

    (138) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 138 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 138 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 383

    (136) trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size .

    SEMICOLON       reduce using rule 136 (trend_prediction -> TREND_PREDICTION tag_sp variable sp_param int_const_saver sp_param int_const_saver sp_param int_const_saver np_check_size .)


state 384

    (140) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 140 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 311 resolved as shift
