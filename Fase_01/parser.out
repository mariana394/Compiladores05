Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END
Rule 2     empty -> <empty>
Rule 3     program_libraries -> from_library import_library
Rule 4     program_libraries -> empty
Rule 5     from_library -> FROM ID
Rule 6     from_library -> empty
Rule 7     import_library -> IMPORT ID AS ID program_libraries
Rule 8     var_type -> var_c_type
Rule 9     var_type -> var_s_type
Rule 10    program_vars -> VAR var_type
Rule 11    program_vars -> empty
Rule 12    s_type -> INT
Rule 13    s_type -> FLOAT
Rule 14    s_type -> CHAR
Rule 15    c_type -> DATAFRAME
Rule 16    c_type -> DATE
Rule 17    var_multiple -> var_type
Rule 18    var_multiple -> empty
Rule 19    var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple
Rule 20    var_c_type2 -> COMMA ID var_c_type2
Rule 21    var_c_type2 -> empty
Rule 22    var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
Rule 23    var_s_type2 -> COMMA ID var_s_array var_s_type2
Rule 24    var_s_type2 -> empty
Rule 25    var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
Rule 26    var_s_array -> empty
Rule 27    var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET
Rule 28    var_s_matrix -> empty
Rule 29    variable -> ID variable_array
Rule 30    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 31    variable_array -> empty
Rule 32    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 33    variable_matrix -> empty
Rule 34    program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
Rule 35    program_function -> empty
Rule 36    function_type -> s_type
Rule 37    function_type -> VOID
Rule 38    param -> s_type ID param2
Rule 39    param2 -> COMMA s_type ID param2
Rule 40    param2 -> empty
Rule 41    return -> RETURN exp SEMICOLON
Rule 42    return -> empty
Rule 43    program_main -> MAIN LBRACKET program_vars inner_body RBRACKET
Rule 44    body -> LBRACKET inner_body RBRACKET
Rule 45    inner_body -> statement inner_body
Rule 46    inner_body -> empty
Rule 47    assign -> variable ASSIGN specialf_assign SEMICOLON
Rule 48    specialf_assign -> exp
Rule 49    specialf_assign -> special_function
Rule 50    specialf_assign -> read
Rule 51    condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON
Rule 52    condition2 -> ELSE body
Rule 53    condition2 -> empty
Rule 54    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 55    print_type -> exp
Rule 56    print_many -> print_type print_many2
Rule 57    print_many2 -> COMMA print_type print_many2
Rule 58    print_many2 -> empty
Rule 59    read -> READ LPAREN variable RPAREN
Rule 60    cycle -> for
Rule 61    cycle -> while
Rule 62    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 63    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 64    for_end -> CTE_INT
Rule 65    for_end -> ID
Rule 66    call_function -> ID LPAREN exp exp_many RPAREN
Rule 67    exp_many -> COMMA exp exp_many
Rule 68    exp_many -> empty
Rule 69    statement -> assign
Rule 70    statement -> condition
Rule 71    statement -> print
Rule 72    statement -> cycle
Rule 73    statement -> call_function
Rule 74    special_function -> exploration
Rule 75    special_function -> financial_state
Rule 76    special_function -> dummi_regression
Rule 77    special_function -> season_analysis
Rule 78    special_function -> trend_prediction
Rule 79    special_function -> model_predict
Rule 80    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 81    explore_var -> COMMA variable
Rule 82    explore_var -> empty
Rule 83    explor_cte -> COMMA CTE_INT
Rule 84    explor_cte -> empty
Rule 85    financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 86    season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 87    trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
Rule 88    dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 89    dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 90    dr_array -> empty
Rule 91    dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 92    dr_array_mp -> empty
Rule 93    dr_int -> COMMA CTE_INT
Rule 94    dr_int -> empty
Rule 95    model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 96    exp -> t_exp exp_or
Rule 97    exp_or -> OR exp
Rule 98    exp_or -> empty
Rule 99    t_exp -> expression t_exp_and
Rule 100   t_exp_and -> AND t_exp
Rule 101   t_exp_and -> empty
Rule 102   expression -> m_exp expression_comp
Rule 103   expression_comp -> expression_comp_2 m_exp
Rule 104   expression_comp -> empty
Rule 105   expression_comp_2 -> EQUAL
Rule 106   expression_comp_2 -> NOTEQUAL
Rule 107   expression_comp_2 -> LTHAN
Rule 108   expression_comp_2 -> GTHAN
Rule 109   m_exp -> term m_exp_sr
Rule 110   m_exp_sr -> m_exp_sr_2 m_exp
Rule 111   m_exp_sr -> empty
Rule 112   m_exp_sr_2 -> PLUS
Rule 113   m_exp_sr_2 -> MINUS
Rule 114   term -> factor term_pc
Rule 115   term_pc -> term_pc_2 term
Rule 116   term_pc -> empty
Rule 117   term_pc_2 -> MULTIPLY
Rule 118   term_pc_2 -> DIVIDE
Rule 119   factor -> factor_exp
Rule 120   factor -> factor_cte
Rule 121   factor -> variable
Rule 122   factor -> call_function
Rule 123   factor_exp -> LPAREN exp RPAREN
Rule 124   factor_cte -> CTE_INT
Rule 125   factor_cte -> CTE_FLOAT
Rule 126   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 100
AS                   : 7
ASSIGN               : 47
CHAR                 : 14
COLON                : 
COMMA                : 20 23 39 57 67 81 83 85 85 85 87 87 87 88 89 91 93 95 95
CTE_CHAR             : 89 91 126
CTE_FLOAT            : 125
CTE_INT              : 25 27 64 83 87 87 87 93 124
DATAFRAME            : 15
DATE                 : 16
DIVIDE               : 118
DO                   : 62
DUMMI_REGRESSION     : 88
ELSE                 : 52
END                  : 1
EQUAL                : 105
EXPLORATION          : 80
FINANCIAL_STATE      : 85
FLOAT                : 13
FOR                  : 63
FROM                 : 5
FUNCTION             : 34
GTHAN                : 108
ID                   : 1 5 7 7 19 20 22 23 29 34 38 39 63 65 66
IF                   : 51
IMPORT               : 7
INT                  : 12
LBRACKET             : 34 43 44
LPAREN               : 34 51 54 59 62 63 66 80 85 86 87 88 95 123
LSQBRACKET           : 25 27 30 32 89
LTHAN                : 107
MAIN                 : 43
MINUS                : 113
MODEL_PREDICT        : 95
MULTIPLY             : 117
NOTEQUAL             : 106
OR                   : 97
PLUS                 : 112
PRINT                : 54
PROGRAM              : 1
RBRACKET             : 34 43 44
READ                 : 59
RETURN               : 41
RPAREN               : 34 51 54 59 62 63 66 80 85 86 87 88 95 123
RSQBRACKET           : 25 27 30 32 89
SEASON_ANALYSIS      : 86
SEMICOLON            : 1 19 22 41 47 51 54 62 63
TO                   : 63
TREND_PREDICTION     : 87
VAR                  : 10
VOID                 : 37
WHILE                : 62
error                : 

Nonterminals, with rules where they appear

assign               : 69
body                 : 51 52 62 63
c_type               : 19
call_function        : 73 122
condition            : 70
condition2           : 51
cycle                : 72
dr_array             : 88
dr_array_mp          : 89 91
dr_int               : 88
dummi_regression     : 76
empty                : 4 6 11 18 21 24 26 28 31 33 35 40 42 46 53 58 68 82 84 90 92 94 98 101 104 111 116
exp                  : 30 32 41 48 51 55 62 66 67 97 123
exp_many             : 66 67
exp_or               : 96
explor_cte           : 80
exploration          : 74
explore_var          : 80
expression           : 99
expression_comp      : 102
expression_comp_2    : 103
factor               : 114
factor_cte           : 120
factor_exp           : 119
financial_state      : 75
for                  : 60
for_end              : 63
from_library         : 3
function_type        : 34
import_library       : 3
inner_body           : 34 43 44 45
m_exp                : 102 103 110
m_exp_sr             : 109
m_exp_sr_2           : 110
model_predict        : 79
param                : 34
param2               : 38 39
print                : 71
print_many           : 54
print_many2          : 56 57
print_type           : 56 57
program              : 0
program_function     : 1 34
program_libraries    : 1 7
program_main         : 1
program_vars         : 1 34 43
read                 : 50
return               : 34
s_type               : 22 36 38 39
season_analysis      : 77
special_function     : 49
specialf_assign      : 47
statement            : 45
t_exp                : 96 100
t_exp_and            : 99
term                 : 109 115
term_pc              : 114
term_pc_2            : 115
trend_prediction     : 78
var_c_type           : 8
var_c_type2          : 19 20
var_multiple         : 19 22
var_s_array          : 22 23
var_s_matrix         : 25
var_s_type           : 9
var_s_type2          : 22 23
var_type             : 10 17
variable             : 47 59 80 81 85 85 85 85 86 87 88 88 95 95 121
variable_array       : 29
variable_matrix      : 30
while                : 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main END
    (3) program_libraries -> . from_library import_library
    (4) program_libraries -> . empty
    (5) from_library -> . FROM ID
    (6) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main END
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (3) program_libraries -> from_library . import_library
    (7) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (4) program_libraries -> empty .
    (6) from_library -> empty .

    VAR             reduce using rule 4 (program_libraries -> empty .)
    FUNCTION        reduce using rule 4 (program_libraries -> empty .)
    MAIN            reduce using rule 4 (program_libraries -> empty .)
    IMPORT          reduce using rule 6 (from_library -> empty .)


state 8

    (5) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main END
    (34) program_function -> . FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (35) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 15
    empty                          shift and go to state 17

state 10

    (10) program_vars -> VAR . var_type
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (19) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (22) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (15) c_type -> . DATAFRAME
    (16) c_type -> . DATE
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    var_type                       shift and go to state 18
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21
    s_type                         shift and go to state 22

state 11

    (11) program_vars -> empty .

    FUNCTION        reduce using rule 11 (program_vars -> empty .)
    MAIN            reduce using rule 11 (program_vars -> empty .)
    IF              reduce using rule 11 (program_vars -> empty .)
    PRINT           reduce using rule 11 (program_vars -> empty .)
    ID              reduce using rule 11 (program_vars -> empty .)
    FOR             reduce using rule 11 (program_vars -> empty .)
    DO              reduce using rule 11 (program_vars -> empty .)
    RBRACKET        reduce using rule 11 (program_vars -> empty .)
    RETURN          reduce using rule 11 (program_vars -> empty .)


state 12

    (3) program_libraries -> from_library import_library .

    VAR             reduce using rule 3 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 3 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 3 (program_libraries -> from_library import_library .)


state 13

    (7) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 28


state 14

    (5) from_library -> FROM ID .

    IMPORT          reduce using rule 5 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main END
    (43) program_main -> . MAIN LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 30

    program_main                   shift and go to state 29

state 16

    (34) program_function -> FUNCTION . function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (36) function_type -> . s_type
    (37) function_type -> . VOID
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    VOID            shift and go to state 33
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    function_type                  shift and go to state 31
    s_type                         shift and go to state 32

state 17

    (35) program_function -> empty .

    MAIN            reduce using rule 35 (program_function -> empty .)


state 18

    (10) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 10 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 10 (program_vars -> VAR var_type .)
    IF              reduce using rule 10 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 10 (program_vars -> VAR var_type .)
    ID              reduce using rule 10 (program_vars -> VAR var_type .)
    FOR             reduce using rule 10 (program_vars -> VAR var_type .)
    DO              reduce using rule 10 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 10 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 10 (program_vars -> VAR var_type .)


state 19

    (8) var_type -> var_c_type .

    FUNCTION        reduce using rule 8 (var_type -> var_c_type .)
    MAIN            reduce using rule 8 (var_type -> var_c_type .)
    IF              reduce using rule 8 (var_type -> var_c_type .)
    PRINT           reduce using rule 8 (var_type -> var_c_type .)
    ID              reduce using rule 8 (var_type -> var_c_type .)
    FOR             reduce using rule 8 (var_type -> var_c_type .)
    DO              reduce using rule 8 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 8 (var_type -> var_c_type .)
    RETURN          reduce using rule 8 (var_type -> var_c_type .)


state 20

    (9) var_type -> var_s_type .

    FUNCTION        reduce using rule 9 (var_type -> var_s_type .)
    MAIN            reduce using rule 9 (var_type -> var_s_type .)
    IF              reduce using rule 9 (var_type -> var_s_type .)
    PRINT           reduce using rule 9 (var_type -> var_s_type .)
    ID              reduce using rule 9 (var_type -> var_s_type .)
    FOR             reduce using rule 9 (var_type -> var_s_type .)
    DO              reduce using rule 9 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 9 (var_type -> var_s_type .)
    RETURN          reduce using rule 9 (var_type -> var_s_type .)


state 21

    (19) var_c_type -> c_type . ID var_c_type2 SEMICOLON var_multiple

    ID              shift and go to state 34


state 22

    (22) var_s_type -> s_type . ID var_s_array var_s_type2 SEMICOLON var_multiple

    ID              shift and go to state 35


state 23

    (15) c_type -> DATAFRAME .

    ID              reduce using rule 15 (c_type -> DATAFRAME .)


state 24

    (16) c_type -> DATE .

    ID              reduce using rule 16 (c_type -> DATE .)


state 25

    (12) s_type -> INT .

    ID              reduce using rule 12 (s_type -> INT .)


state 26

    (13) s_type -> FLOAT .

    ID              reduce using rule 13 (s_type -> FLOAT .)


state 27

    (14) s_type -> CHAR .

    ID              reduce using rule 14 (s_type -> CHAR .)


state 28

    (7) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 36


state 29

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . END

    END             shift and go to state 37


state 30

    (43) program_main -> MAIN . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 38


state 31

    (34) program_function -> FUNCTION function_type . ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    ID              shift and go to state 39


state 32

    (36) function_type -> s_type .

    ID              reduce using rule 36 (function_type -> s_type .)


state 33

    (37) function_type -> VOID .

    ID              reduce using rule 37 (function_type -> VOID .)


state 34

    (19) var_c_type -> c_type ID . var_c_type2 SEMICOLON var_multiple
    (20) var_c_type2 -> . COMMA ID var_c_type2
    (21) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 41
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 40
    empty                          shift and go to state 42

state 35

    (22) var_s_type -> s_type ID . var_s_array var_s_type2 SEMICOLON var_multiple
    (25) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (26) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 44
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 43
    empty                          shift and go to state 45

state 36

    (7) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 46


state 37

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .)


state 38

    (43) program_main -> MAIN LBRACKET . program_vars inner_body RBRACKET
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 47
    empty                          shift and go to state 11

state 39

    (34) program_function -> FUNCTION function_type ID . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    LPAREN          shift and go to state 48


state 40

    (19) var_c_type -> c_type ID var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 49


state 41

    (20) var_c_type2 -> COMMA . ID var_c_type2

    ID              shift and go to state 50


state 42

    (21) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 21 (var_c_type2 -> empty .)


state 43

    (22) var_s_type -> s_type ID var_s_array . var_s_type2 SEMICOLON var_multiple
    (23) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (24) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 51
    empty                          shift and go to state 53

state 44

    (25) var_s_array -> LSQBRACKET . CTE_INT RSQBRACKET var_s_matrix

    CTE_INT         shift and go to state 54


state 45

    (26) var_s_array -> empty .

    COMMA           reduce using rule 26 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 26 (var_s_array -> empty .)


state 46

    (7) import_library -> IMPORT ID AS ID . program_libraries
    (3) program_libraries -> . from_library import_library
    (4) program_libraries -> . empty
    (5) from_library -> . FROM ID
    (6) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 55
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 47

    (43) program_main -> MAIN LBRACKET program_vars . inner_body RBRACKET
    (45) inner_body -> . statement inner_body
    (46) inner_body -> . empty
    (69) statement -> . assign
    (70) statement -> . condition
    (71) statement -> . print
    (72) statement -> . cycle
    (73) statement -> . call_function
    (2) empty -> .
    (47) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (51) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (54) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (60) cycle -> . for
    (61) cycle -> . while
    (66) call_function -> . ID LPAREN exp exp_many RPAREN
    (29) variable -> . ID variable_array
    (63) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (62) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 65
    PRINT           shift and go to state 66
    ID              shift and go to state 69
    FOR             shift and go to state 70
    DO              shift and go to state 71

    inner_body                     shift and go to state 56
    statement                      shift and go to state 57
    empty                          shift and go to state 58
    assign                         shift and go to state 59
    condition                      shift and go to state 60
    print                          shift and go to state 61
    cycle                          shift and go to state 62
    call_function                  shift and go to state 63
    variable                       shift and go to state 64
    for                            shift and go to state 67
    while                          shift and go to state 68

state 48

    (34) program_function -> FUNCTION function_type ID LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (38) param -> . s_type ID param2
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    param                          shift and go to state 72
    s_type                         shift and go to state 73

state 49

    (19) var_c_type -> c_type ID var_c_type2 SEMICOLON . var_multiple
    (17) var_multiple -> . var_type
    (18) var_multiple -> . empty
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (2) empty -> .
    (19) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (22) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (15) c_type -> . DATAFRAME
    (16) c_type -> . DATE
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    c_type                         shift and go to state 21
    var_multiple                   shift and go to state 74
    var_type                       shift and go to state 75
    empty                          shift and go to state 76
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    s_type                         shift and go to state 22

state 50

    (20) var_c_type2 -> COMMA ID . var_c_type2
    (20) var_c_type2 -> . COMMA ID var_c_type2
    (21) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 41
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 77
    empty                          shift and go to state 42

state 51

    (22) var_s_type -> s_type ID var_s_array var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 78


state 52

    (23) var_s_type2 -> COMMA . ID var_s_array var_s_type2

    ID              shift and go to state 79


state 53

    (24) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 24 (var_s_type2 -> empty .)


state 54

    (25) var_s_array -> LSQBRACKET CTE_INT . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 80


state 55

    (7) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 7 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 7 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 7 (import_library -> IMPORT ID AS ID program_libraries .)


state 56

    (43) program_main -> MAIN LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 81


state 57

    (45) inner_body -> statement . inner_body
    (45) inner_body -> . statement inner_body
    (46) inner_body -> . empty
    (69) statement -> . assign
    (70) statement -> . condition
    (71) statement -> . print
    (72) statement -> . cycle
    (73) statement -> . call_function
    (2) empty -> .
    (47) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (51) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (54) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (60) cycle -> . for
    (61) cycle -> . while
    (66) call_function -> . ID LPAREN exp exp_many RPAREN
    (29) variable -> . ID variable_array
    (63) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (62) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              shift and go to state 65
    PRINT           shift and go to state 66
    ID              shift and go to state 69
    FOR             shift and go to state 70
    DO              shift and go to state 71

    statement                      shift and go to state 57
    inner_body                     shift and go to state 82
    empty                          shift and go to state 58
    assign                         shift and go to state 59
    condition                      shift and go to state 60
    print                          shift and go to state 61
    cycle                          shift and go to state 62
    call_function                  shift and go to state 63
    variable                       shift and go to state 64
    for                            shift and go to state 67
    while                          shift and go to state 68

state 58

    (46) inner_body -> empty .

    RBRACKET        reduce using rule 46 (inner_body -> empty .)
    RETURN          reduce using rule 46 (inner_body -> empty .)


state 59

    (69) statement -> assign .

    IF              reduce using rule 69 (statement -> assign .)
    PRINT           reduce using rule 69 (statement -> assign .)
    ID              reduce using rule 69 (statement -> assign .)
    FOR             reduce using rule 69 (statement -> assign .)
    DO              reduce using rule 69 (statement -> assign .)
    RBRACKET        reduce using rule 69 (statement -> assign .)
    RETURN          reduce using rule 69 (statement -> assign .)


state 60

    (70) statement -> condition .

    IF              reduce using rule 70 (statement -> condition .)
    PRINT           reduce using rule 70 (statement -> condition .)
    ID              reduce using rule 70 (statement -> condition .)
    FOR             reduce using rule 70 (statement -> condition .)
    DO              reduce using rule 70 (statement -> condition .)
    RBRACKET        reduce using rule 70 (statement -> condition .)
    RETURN          reduce using rule 70 (statement -> condition .)


state 61

    (71) statement -> print .

    IF              reduce using rule 71 (statement -> print .)
    PRINT           reduce using rule 71 (statement -> print .)
    ID              reduce using rule 71 (statement -> print .)
    FOR             reduce using rule 71 (statement -> print .)
    DO              reduce using rule 71 (statement -> print .)
    RBRACKET        reduce using rule 71 (statement -> print .)
    RETURN          reduce using rule 71 (statement -> print .)


state 62

    (72) statement -> cycle .

    IF              reduce using rule 72 (statement -> cycle .)
    PRINT           reduce using rule 72 (statement -> cycle .)
    ID              reduce using rule 72 (statement -> cycle .)
    FOR             reduce using rule 72 (statement -> cycle .)
    DO              reduce using rule 72 (statement -> cycle .)
    RBRACKET        reduce using rule 72 (statement -> cycle .)
    RETURN          reduce using rule 72 (statement -> cycle .)


state 63

    (73) statement -> call_function .

    IF              reduce using rule 73 (statement -> call_function .)
    PRINT           reduce using rule 73 (statement -> call_function .)
    ID              reduce using rule 73 (statement -> call_function .)
    FOR             reduce using rule 73 (statement -> call_function .)
    DO              reduce using rule 73 (statement -> call_function .)
    RBRACKET        reduce using rule 73 (statement -> call_function .)
    RETURN          reduce using rule 73 (statement -> call_function .)


state 64

    (47) assign -> variable . ASSIGN specialf_assign SEMICOLON

    ASSIGN          shift and go to state 83


state 65

    (51) condition -> IF . LPAREN exp RPAREN body condition2 SEMICOLON

    LPAREN          shift and go to state 84


state 66

    (54) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 85


state 67

    (60) cycle -> for .

    IF              reduce using rule 60 (cycle -> for .)
    PRINT           reduce using rule 60 (cycle -> for .)
    ID              reduce using rule 60 (cycle -> for .)
    FOR             reduce using rule 60 (cycle -> for .)
    DO              reduce using rule 60 (cycle -> for .)
    RBRACKET        reduce using rule 60 (cycle -> for .)
    RETURN          reduce using rule 60 (cycle -> for .)


state 68

    (61) cycle -> while .

    IF              reduce using rule 61 (cycle -> while .)
    PRINT           reduce using rule 61 (cycle -> while .)
    ID              reduce using rule 61 (cycle -> while .)
    FOR             reduce using rule 61 (cycle -> while .)
    DO              reduce using rule 61 (cycle -> while .)
    RBRACKET        reduce using rule 61 (cycle -> while .)
    RETURN          reduce using rule 61 (cycle -> while .)


state 69

    (66) call_function -> ID . LPAREN exp exp_many RPAREN
    (29) variable -> ID . variable_array
    (30) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (31) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 86
    LSQBRACKET      shift and go to state 88
    ASSIGN          reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 87
    empty                          shift and go to state 89

state 70

    (63) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 90


state 71

    (62) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (44) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 92

    body                           shift and go to state 91

state 72

    (34) program_function -> FUNCTION function_type ID LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    RPAREN          shift and go to state 93


state 73

    (38) param -> s_type . ID param2

    ID              shift and go to state 94


state 74

    (19) var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)


state 75

    (17) var_multiple -> var_type .

    FUNCTION        reduce using rule 17 (var_multiple -> var_type .)
    MAIN            reduce using rule 17 (var_multiple -> var_type .)
    IF              reduce using rule 17 (var_multiple -> var_type .)
    PRINT           reduce using rule 17 (var_multiple -> var_type .)
    ID              reduce using rule 17 (var_multiple -> var_type .)
    FOR             reduce using rule 17 (var_multiple -> var_type .)
    DO              reduce using rule 17 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 17 (var_multiple -> var_type .)
    RETURN          reduce using rule 17 (var_multiple -> var_type .)


state 76

    (18) var_multiple -> empty .

    FUNCTION        reduce using rule 18 (var_multiple -> empty .)
    MAIN            reduce using rule 18 (var_multiple -> empty .)
    IF              reduce using rule 18 (var_multiple -> empty .)
    PRINT           reduce using rule 18 (var_multiple -> empty .)
    ID              reduce using rule 18 (var_multiple -> empty .)
    FOR             reduce using rule 18 (var_multiple -> empty .)
    DO              reduce using rule 18 (var_multiple -> empty .)
    RBRACKET        reduce using rule 18 (var_multiple -> empty .)
    RETURN          reduce using rule 18 (var_multiple -> empty .)


state 77

    (20) var_c_type2 -> COMMA ID var_c_type2 .

    SEMICOLON       reduce using rule 20 (var_c_type2 -> COMMA ID var_c_type2 .)


state 78

    (22) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON . var_multiple
    (17) var_multiple -> . var_type
    (18) var_multiple -> . empty
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (2) empty -> .
    (19) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (22) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (15) c_type -> . DATAFRAME
    (16) c_type -> . DATE
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 22
    var_multiple                   shift and go to state 95
    var_type                       shift and go to state 75
    empty                          shift and go to state 76
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21

state 79

    (23) var_s_type2 -> COMMA ID . var_s_array var_s_type2
    (25) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (26) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 44
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 96
    empty                          shift and go to state 45

state 80

    (25) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET . var_s_matrix
    (27) var_s_matrix -> . LSQBRACKET CTE_INT RSQBRACKET
    (28) var_s_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 97
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_matrix                   shift and go to state 98
    empty                          shift and go to state 99

state 81

    (43) program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 43 (program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .)


state 82

    (45) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 45 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 45 (inner_body -> statement inner_body .)


state 83

    (47) assign -> variable ASSIGN . specialf_assign SEMICOLON
    (48) specialf_assign -> . exp
    (49) specialf_assign -> . special_function
    (50) specialf_assign -> . read
    (96) exp -> . t_exp exp_or
    (74) special_function -> . exploration
    (75) special_function -> . financial_state
    (76) special_function -> . dummi_regression
    (77) special_function -> . season_analysis
    (78) special_function -> . trend_prediction
    (79) special_function -> . model_predict
    (59) read -> . READ LPAREN variable RPAREN
    (99) t_exp -> . expression t_exp_and
    (80) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (85) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (88) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (86) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (87) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (95) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    READ            shift and go to state 112
    EXPLORATION     shift and go to state 115
    FINANCIAL_STATE shift and go to state 116
    DUMMI_REGRESSION shift and go to state 117
    SEASON_ANALYSIS shift and go to state 118
    TREND_PREDICTION shift and go to state 119
    MODEL_PREDICT   shift and go to state 121
    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    variable                       shift and go to state 100
    specialf_assign                shift and go to state 101
    exp                            shift and go to state 102
    special_function               shift and go to state 103
    read                           shift and go to state 104
    t_exp                          shift and go to state 105
    exploration                    shift and go to state 106
    financial_state                shift and go to state 107
    dummi_regression               shift and go to state 108
    season_analysis                shift and go to state 109
    trend_prediction               shift and go to state 110
    model_predict                  shift and go to state 111
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    call_function                  shift and go to state 127

state 84

    (51) condition -> IF LPAREN . exp RPAREN body condition2 SEMICOLON
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 131
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 85

    (54) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (56) print_many -> . print_type print_many2
    (55) print_type -> . exp
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    print_many                     shift and go to state 132
    print_type                     shift and go to state 133
    exp                            shift and go to state 134
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 86

    (66) call_function -> ID LPAREN . exp exp_many RPAREN
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 135
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 87

    (29) variable -> ID variable_array .

    ASSIGN          reduce using rule 29 (variable -> ID variable_array .)
    MULTIPLY        reduce using rule 29 (variable -> ID variable_array .)
    DIVIDE          reduce using rule 29 (variable -> ID variable_array .)
    PLUS            reduce using rule 29 (variable -> ID variable_array .)
    MINUS           reduce using rule 29 (variable -> ID variable_array .)
    EQUAL           reduce using rule 29 (variable -> ID variable_array .)
    NOTEQUAL        reduce using rule 29 (variable -> ID variable_array .)
    LTHAN           reduce using rule 29 (variable -> ID variable_array .)
    GTHAN           reduce using rule 29 (variable -> ID variable_array .)
    AND             reduce using rule 29 (variable -> ID variable_array .)
    OR              reduce using rule 29 (variable -> ID variable_array .)
    SEMICOLON       reduce using rule 29 (variable -> ID variable_array .)
    RPAREN          reduce using rule 29 (variable -> ID variable_array .)
    COMMA           reduce using rule 29 (variable -> ID variable_array .)
    RSQBRACKET      reduce using rule 29 (variable -> ID variable_array .)


state 88

    (30) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 136
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 89

    (31) variable_array -> empty .

    ASSIGN          reduce using rule 31 (variable_array -> empty .)
    MULTIPLY        reduce using rule 31 (variable_array -> empty .)
    DIVIDE          reduce using rule 31 (variable_array -> empty .)
    PLUS            reduce using rule 31 (variable_array -> empty .)
    MINUS           reduce using rule 31 (variable_array -> empty .)
    EQUAL           reduce using rule 31 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 31 (variable_array -> empty .)
    LTHAN           reduce using rule 31 (variable_array -> empty .)
    GTHAN           reduce using rule 31 (variable_array -> empty .)
    AND             reduce using rule 31 (variable_array -> empty .)
    OR              reduce using rule 31 (variable_array -> empty .)
    SEMICOLON       reduce using rule 31 (variable_array -> empty .)
    RPAREN          reduce using rule 31 (variable_array -> empty .)
    COMMA           reduce using rule 31 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 31 (variable_array -> empty .)


state 90

    (63) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 137


state 91

    (62) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 138


state 92

    (44) body -> LBRACKET . inner_body RBRACKET
    (45) inner_body -> . statement inner_body
    (46) inner_body -> . empty
    (69) statement -> . assign
    (70) statement -> . condition
    (71) statement -> . print
    (72) statement -> . cycle
    (73) statement -> . call_function
    (2) empty -> .
    (47) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (51) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (54) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (60) cycle -> . for
    (61) cycle -> . while
    (66) call_function -> . ID LPAREN exp exp_many RPAREN
    (29) variable -> . ID variable_array
    (63) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (62) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 65
    PRINT           shift and go to state 66
    ID              shift and go to state 69
    FOR             shift and go to state 70
    DO              shift and go to state 71

    inner_body                     shift and go to state 139
    statement                      shift and go to state 57
    empty                          shift and go to state 58
    assign                         shift and go to state 59
    condition                      shift and go to state 60
    print                          shift and go to state 61
    cycle                          shift and go to state 62
    call_function                  shift and go to state 63
    variable                       shift and go to state 64
    for                            shift and go to state 67
    while                          shift and go to state 68

state 93

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET program_function

    LBRACKET        shift and go to state 140


state 94

    (38) param -> s_type ID . param2
    (39) param2 -> . COMMA s_type ID param2
    (40) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 142
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 141
    empty                          shift and go to state 143

state 95

    (22) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)


state 96

    (23) var_s_type2 -> COMMA ID var_s_array . var_s_type2
    (23) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (24) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 144
    empty                          shift and go to state 53

state 97

    (27) var_s_matrix -> LSQBRACKET . CTE_INT RSQBRACKET

    CTE_INT         shift and go to state 145


state 98

    (25) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 25 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 25 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)


state 99

    (28) var_s_matrix -> empty .

    COMMA           reduce using rule 28 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 28 (var_s_matrix -> empty .)


state 100

    (121) factor -> variable .

    MULTIPLY        reduce using rule 121 (factor -> variable .)
    DIVIDE          reduce using rule 121 (factor -> variable .)
    PLUS            reduce using rule 121 (factor -> variable .)
    MINUS           reduce using rule 121 (factor -> variable .)
    EQUAL           reduce using rule 121 (factor -> variable .)
    NOTEQUAL        reduce using rule 121 (factor -> variable .)
    LTHAN           reduce using rule 121 (factor -> variable .)
    GTHAN           reduce using rule 121 (factor -> variable .)
    AND             reduce using rule 121 (factor -> variable .)
    OR              reduce using rule 121 (factor -> variable .)
    SEMICOLON       reduce using rule 121 (factor -> variable .)
    RPAREN          reduce using rule 121 (factor -> variable .)
    COMMA           reduce using rule 121 (factor -> variable .)
    RSQBRACKET      reduce using rule 121 (factor -> variable .)


state 101

    (47) assign -> variable ASSIGN specialf_assign . SEMICOLON

    SEMICOLON       shift and go to state 146


state 102

    (48) specialf_assign -> exp .

    SEMICOLON       reduce using rule 48 (specialf_assign -> exp .)


state 103

    (49) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 49 (specialf_assign -> special_function .)


state 104

    (50) specialf_assign -> read .

    SEMICOLON       reduce using rule 50 (specialf_assign -> read .)


state 105

    (96) exp -> t_exp . exp_or
    (97) exp_or -> . OR exp
    (98) exp_or -> . empty
    (2) empty -> .

    OR              shift and go to state 148
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp_or                         shift and go to state 147
    empty                          shift and go to state 149

state 106

    (74) special_function -> exploration .

    SEMICOLON       reduce using rule 74 (special_function -> exploration .)


state 107

    (75) special_function -> financial_state .

    SEMICOLON       reduce using rule 75 (special_function -> financial_state .)


state 108

    (76) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 76 (special_function -> dummi_regression .)


state 109

    (77) special_function -> season_analysis .

    SEMICOLON       reduce using rule 77 (special_function -> season_analysis .)


state 110

    (78) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 78 (special_function -> trend_prediction .)


state 111

    (79) special_function -> model_predict .

    SEMICOLON       reduce using rule 79 (special_function -> model_predict .)


state 112

    (59) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 150


state 113

    (123) factor_exp -> LPAREN . exp RPAREN
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 151
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 114

    (99) t_exp -> expression . t_exp_and
    (100) t_exp_and -> . AND t_exp
    (101) t_exp_and -> . empty
    (2) empty -> .

    AND             shift and go to state 153
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    t_exp_and                      shift and go to state 152
    empty                          shift and go to state 154

state 115

    (80) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 155


state 116

    (85) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 156


state 117

    (88) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 157


state 118

    (86) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 158


state 119

    (87) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    LPAREN          shift and go to state 159


state 120

    (124) factor_cte -> CTE_INT .

    MULTIPLY        reduce using rule 124 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 124 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 124 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 124 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 124 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 124 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 124 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 124 (factor_cte -> CTE_INT .)
    AND             reduce using rule 124 (factor_cte -> CTE_INT .)
    OR              reduce using rule 124 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 124 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 124 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 124 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 124 (factor_cte -> CTE_INT .)


state 121

    (95) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 160


state 122

    (102) expression -> m_exp . expression_comp
    (103) expression_comp -> . expression_comp_2 m_exp
    (104) expression_comp -> . empty
    (105) expression_comp_2 -> . EQUAL
    (106) expression_comp_2 -> . NOTEQUAL
    (107) expression_comp_2 -> . LTHAN
    (108) expression_comp_2 -> . GTHAN
    (2) empty -> .

    EQUAL           shift and go to state 164
    NOTEQUAL        shift and go to state 165
    LTHAN           shift and go to state 166
    GTHAN           shift and go to state 167
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    expression_comp                shift and go to state 161
    expression_comp_2              shift and go to state 162
    empty                          shift and go to state 163

state 123

    (109) m_exp -> term . m_exp_sr
    (110) m_exp_sr -> . m_exp_sr_2 m_exp
    (111) m_exp_sr -> . empty
    (112) m_exp_sr_2 -> . PLUS
    (113) m_exp_sr_2 -> . MINUS
    (2) empty -> .

    PLUS            shift and go to state 171
    MINUS           shift and go to state 172
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp_sr                       shift and go to state 168
    m_exp_sr_2                     shift and go to state 169
    empty                          shift and go to state 170

state 124

    (114) term -> factor . term_pc
    (115) term_pc -> . term_pc_2 term
    (116) term_pc -> . empty
    (117) term_pc_2 -> . MULTIPLY
    (118) term_pc_2 -> . DIVIDE
    (2) empty -> .

    MULTIPLY        shift and go to state 176
    DIVIDE          shift and go to state 177
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    term_pc                        shift and go to state 173
    term_pc_2                      shift and go to state 174
    empty                          shift and go to state 175

state 125

    (119) factor -> factor_exp .

    MULTIPLY        reduce using rule 119 (factor -> factor_exp .)
    DIVIDE          reduce using rule 119 (factor -> factor_exp .)
    PLUS            reduce using rule 119 (factor -> factor_exp .)
    MINUS           reduce using rule 119 (factor -> factor_exp .)
    EQUAL           reduce using rule 119 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 119 (factor -> factor_exp .)
    LTHAN           reduce using rule 119 (factor -> factor_exp .)
    GTHAN           reduce using rule 119 (factor -> factor_exp .)
    AND             reduce using rule 119 (factor -> factor_exp .)
    OR              reduce using rule 119 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 119 (factor -> factor_exp .)
    RPAREN          reduce using rule 119 (factor -> factor_exp .)
    COMMA           reduce using rule 119 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 119 (factor -> factor_exp .)


state 126

    (120) factor -> factor_cte .

    MULTIPLY        reduce using rule 120 (factor -> factor_cte .)
    DIVIDE          reduce using rule 120 (factor -> factor_cte .)
    PLUS            reduce using rule 120 (factor -> factor_cte .)
    MINUS           reduce using rule 120 (factor -> factor_cte .)
    EQUAL           reduce using rule 120 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 120 (factor -> factor_cte .)
    LTHAN           reduce using rule 120 (factor -> factor_cte .)
    GTHAN           reduce using rule 120 (factor -> factor_cte .)
    AND             reduce using rule 120 (factor -> factor_cte .)
    OR              reduce using rule 120 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 120 (factor -> factor_cte .)
    RPAREN          reduce using rule 120 (factor -> factor_cte .)
    COMMA           reduce using rule 120 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 120 (factor -> factor_cte .)


state 127

    (122) factor -> call_function .

    MULTIPLY        reduce using rule 122 (factor -> call_function .)
    DIVIDE          reduce using rule 122 (factor -> call_function .)
    PLUS            reduce using rule 122 (factor -> call_function .)
    MINUS           reduce using rule 122 (factor -> call_function .)
    EQUAL           reduce using rule 122 (factor -> call_function .)
    NOTEQUAL        reduce using rule 122 (factor -> call_function .)
    LTHAN           reduce using rule 122 (factor -> call_function .)
    GTHAN           reduce using rule 122 (factor -> call_function .)
    AND             reduce using rule 122 (factor -> call_function .)
    OR              reduce using rule 122 (factor -> call_function .)
    SEMICOLON       reduce using rule 122 (factor -> call_function .)
    RPAREN          reduce using rule 122 (factor -> call_function .)
    COMMA           reduce using rule 122 (factor -> call_function .)
    RSQBRACKET      reduce using rule 122 (factor -> call_function .)


state 128

    (125) factor_cte -> CTE_FLOAT .

    MULTIPLY        reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 125 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 125 (factor_cte -> CTE_FLOAT .)


state 129

    (126) factor_cte -> CTE_CHAR .

    MULTIPLY        reduce using rule 126 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 126 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 126 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 126 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 126 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 126 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 126 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 126 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 126 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 126 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 126 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 126 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 126 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 126 (factor_cte -> CTE_CHAR .)


state 130

    (29) variable -> ID . variable_array
    (66) call_function -> ID . LPAREN exp exp_many RPAREN
    (30) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (31) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 86
    LSQBRACKET      shift and go to state 88
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 87
    empty                          shift and go to state 89

state 131

    (51) condition -> IF LPAREN exp . RPAREN body condition2 SEMICOLON

    RPAREN          shift and go to state 178


state 132

    (54) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 179


state 133

    (56) print_many -> print_type . print_many2
    (57) print_many2 -> . COMMA print_type print_many2
    (58) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 180
    empty                          shift and go to state 182

state 134

    (55) print_type -> exp .

    COMMA           reduce using rule 55 (print_type -> exp .)
    RPAREN          reduce using rule 55 (print_type -> exp .)


state 135

    (66) call_function -> ID LPAREN exp . exp_many RPAREN
    (67) exp_many -> . COMMA exp exp_many
    (68) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 184
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 183
    empty                          shift and go to state 185

state 136

    (30) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 186


state 137

    (63) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 187


state 138

    (62) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 188


state 139

    (44) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 189


state 140

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET program_function
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 190
    empty                          shift and go to state 11

state 141

    (38) param -> s_type ID param2 .

    RPAREN          reduce using rule 38 (param -> s_type ID param2 .)


state 142

    (39) param2 -> COMMA . s_type ID param2
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 191

state 143

    (40) param2 -> empty .

    RPAREN          reduce using rule 40 (param2 -> empty .)


state 144

    (23) var_s_type2 -> COMMA ID var_s_array var_s_type2 .

    SEMICOLON       reduce using rule 23 (var_s_type2 -> COMMA ID var_s_array var_s_type2 .)


state 145

    (27) var_s_matrix -> LSQBRACKET CTE_INT . RSQBRACKET

    RSQBRACKET      shift and go to state 192


state 146

    (47) assign -> variable ASSIGN specialf_assign SEMICOLON .

    IF              reduce using rule 47 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    PRINT           reduce using rule 47 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    ID              reduce using rule 47 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    FOR             reduce using rule 47 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    DO              reduce using rule 47 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RBRACKET        reduce using rule 47 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RETURN          reduce using rule 47 (assign -> variable ASSIGN specialf_assign SEMICOLON .)


state 147

    (96) exp -> t_exp exp_or .

    SEMICOLON       reduce using rule 96 (exp -> t_exp exp_or .)
    RPAREN          reduce using rule 96 (exp -> t_exp exp_or .)
    COMMA           reduce using rule 96 (exp -> t_exp exp_or .)
    RSQBRACKET      reduce using rule 96 (exp -> t_exp exp_or .)


state 148

    (97) exp_or -> OR . exp
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 193
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 149

    (98) exp_or -> empty .

    SEMICOLON       reduce using rule 98 (exp_or -> empty .)
    RPAREN          reduce using rule 98 (exp_or -> empty .)
    COMMA           reduce using rule 98 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 98 (exp_or -> empty .)


state 150

    (59) read -> READ LPAREN . variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 194

state 151

    (123) factor_exp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 196


state 152

    (99) t_exp -> expression t_exp_and .

    OR              reduce using rule 99 (t_exp -> expression t_exp_and .)
    SEMICOLON       reduce using rule 99 (t_exp -> expression t_exp_and .)
    RPAREN          reduce using rule 99 (t_exp -> expression t_exp_and .)
    COMMA           reduce using rule 99 (t_exp -> expression t_exp_and .)
    RSQBRACKET      reduce using rule 99 (t_exp -> expression t_exp_and .)


state 153

    (100) t_exp_and -> AND . t_exp
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    t_exp                          shift and go to state 197
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 154

    (101) t_exp_and -> empty .

    OR              reduce using rule 101 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 101 (t_exp_and -> empty .)
    RPAREN          reduce using rule 101 (t_exp_and -> empty .)
    COMMA           reduce using rule 101 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 101 (t_exp_and -> empty .)


state 155

    (80) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 198

state 156

    (85) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 199

state 157

    (88) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 200

state 158

    (86) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 201

state 159

    (87) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 202

state 160

    (95) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 203

state 161

    (102) expression -> m_exp expression_comp .

    AND             reduce using rule 102 (expression -> m_exp expression_comp .)
    OR              reduce using rule 102 (expression -> m_exp expression_comp .)
    SEMICOLON       reduce using rule 102 (expression -> m_exp expression_comp .)
    RPAREN          reduce using rule 102 (expression -> m_exp expression_comp .)
    COMMA           reduce using rule 102 (expression -> m_exp expression_comp .)
    RSQBRACKET      reduce using rule 102 (expression -> m_exp expression_comp .)


state 162

    (103) expression_comp -> expression_comp_2 . m_exp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    m_exp                          shift and go to state 204
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 163

    (104) expression_comp -> empty .

    AND             reduce using rule 104 (expression_comp -> empty .)
    OR              reduce using rule 104 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 104 (expression_comp -> empty .)
    RPAREN          reduce using rule 104 (expression_comp -> empty .)
    COMMA           reduce using rule 104 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 104 (expression_comp -> empty .)


state 164

    (105) expression_comp_2 -> EQUAL .

    LPAREN          reduce using rule 105 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 105 (expression_comp_2 -> EQUAL .)
    CTE_FLOAT       reduce using rule 105 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 105 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 105 (expression_comp_2 -> EQUAL .)


state 165

    (106) expression_comp_2 -> NOTEQUAL .

    LPAREN          reduce using rule 106 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 106 (expression_comp_2 -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 106 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 106 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 106 (expression_comp_2 -> NOTEQUAL .)


state 166

    (107) expression_comp_2 -> LTHAN .

    LPAREN          reduce using rule 107 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 107 (expression_comp_2 -> LTHAN .)
    CTE_FLOAT       reduce using rule 107 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 107 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 107 (expression_comp_2 -> LTHAN .)


state 167

    (108) expression_comp_2 -> GTHAN .

    LPAREN          reduce using rule 108 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 108 (expression_comp_2 -> GTHAN .)
    CTE_FLOAT       reduce using rule 108 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 108 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 108 (expression_comp_2 -> GTHAN .)


state 168

    (109) m_exp -> term m_exp_sr .

    EQUAL           reduce using rule 109 (m_exp -> term m_exp_sr .)
    NOTEQUAL        reduce using rule 109 (m_exp -> term m_exp_sr .)
    LTHAN           reduce using rule 109 (m_exp -> term m_exp_sr .)
    GTHAN           reduce using rule 109 (m_exp -> term m_exp_sr .)
    AND             reduce using rule 109 (m_exp -> term m_exp_sr .)
    OR              reduce using rule 109 (m_exp -> term m_exp_sr .)
    SEMICOLON       reduce using rule 109 (m_exp -> term m_exp_sr .)
    RPAREN          reduce using rule 109 (m_exp -> term m_exp_sr .)
    COMMA           reduce using rule 109 (m_exp -> term m_exp_sr .)
    RSQBRACKET      reduce using rule 109 (m_exp -> term m_exp_sr .)


state 169

    (110) m_exp_sr -> m_exp_sr_2 . m_exp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    m_exp                          shift and go to state 205
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 170

    (111) m_exp_sr -> empty .

    EQUAL           reduce using rule 111 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 111 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 111 (m_exp_sr -> empty .)
    GTHAN           reduce using rule 111 (m_exp_sr -> empty .)
    AND             reduce using rule 111 (m_exp_sr -> empty .)
    OR              reduce using rule 111 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 111 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 111 (m_exp_sr -> empty .)
    COMMA           reduce using rule 111 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 111 (m_exp_sr -> empty .)


state 171

    (112) m_exp_sr_2 -> PLUS .

    LPAREN          reduce using rule 112 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 112 (m_exp_sr_2 -> PLUS .)
    CTE_FLOAT       reduce using rule 112 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 112 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 112 (m_exp_sr_2 -> PLUS .)


state 172

    (113) m_exp_sr_2 -> MINUS .

    LPAREN          reduce using rule 113 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 113 (m_exp_sr_2 -> MINUS .)
    CTE_FLOAT       reduce using rule 113 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 113 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 113 (m_exp_sr_2 -> MINUS .)


state 173

    (114) term -> factor term_pc .

    PLUS            reduce using rule 114 (term -> factor term_pc .)
    MINUS           reduce using rule 114 (term -> factor term_pc .)
    EQUAL           reduce using rule 114 (term -> factor term_pc .)
    NOTEQUAL        reduce using rule 114 (term -> factor term_pc .)
    LTHAN           reduce using rule 114 (term -> factor term_pc .)
    GTHAN           reduce using rule 114 (term -> factor term_pc .)
    AND             reduce using rule 114 (term -> factor term_pc .)
    OR              reduce using rule 114 (term -> factor term_pc .)
    SEMICOLON       reduce using rule 114 (term -> factor term_pc .)
    RPAREN          reduce using rule 114 (term -> factor term_pc .)
    COMMA           reduce using rule 114 (term -> factor term_pc .)
    RSQBRACKET      reduce using rule 114 (term -> factor term_pc .)


state 174

    (115) term_pc -> term_pc_2 . term
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    term                           shift and go to state 206
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 175

    (116) term_pc -> empty .

    PLUS            reduce using rule 116 (term_pc -> empty .)
    MINUS           reduce using rule 116 (term_pc -> empty .)
    EQUAL           reduce using rule 116 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 116 (term_pc -> empty .)
    LTHAN           reduce using rule 116 (term_pc -> empty .)
    GTHAN           reduce using rule 116 (term_pc -> empty .)
    AND             reduce using rule 116 (term_pc -> empty .)
    OR              reduce using rule 116 (term_pc -> empty .)
    SEMICOLON       reduce using rule 116 (term_pc -> empty .)
    RPAREN          reduce using rule 116 (term_pc -> empty .)
    COMMA           reduce using rule 116 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 116 (term_pc -> empty .)


state 176

    (117) term_pc_2 -> MULTIPLY .

    LPAREN          reduce using rule 117 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 117 (term_pc_2 -> MULTIPLY .)
    CTE_FLOAT       reduce using rule 117 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 117 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 117 (term_pc_2 -> MULTIPLY .)


state 177

    (118) term_pc_2 -> DIVIDE .

    LPAREN          reduce using rule 118 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 118 (term_pc_2 -> DIVIDE .)
    CTE_FLOAT       reduce using rule 118 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 118 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 118 (term_pc_2 -> DIVIDE .)


state 178

    (51) condition -> IF LPAREN exp RPAREN . body condition2 SEMICOLON
    (44) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 92

    body                           shift and go to state 207

state 179

    (54) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 208


state 180

    (56) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 56 (print_many -> print_type print_many2 .)


state 181

    (57) print_many2 -> COMMA . print_type print_many2
    (55) print_type -> . exp
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    print_type                     shift and go to state 209
    exp                            shift and go to state 134
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 182

    (58) print_many2 -> empty .

    RPAREN          reduce using rule 58 (print_many2 -> empty .)


state 183

    (66) call_function -> ID LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 210


state 184

    (67) exp_many -> COMMA . exp exp_many
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 211
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 185

    (68) exp_many -> empty .

    RPAREN          reduce using rule 68 (exp_many -> empty .)


state 186

    (30) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (32) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (33) variable_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 212
    ASSIGN          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_matrix                shift and go to state 213
    empty                          shift and go to state 214

state 187

    (63) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (64) for_end -> . CTE_INT
    (65) for_end -> . ID

    CTE_INT         shift and go to state 217
    ID              shift and go to state 215

    for_end                        shift and go to state 216

state 188

    (62) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 218
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 189

    (44) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 44 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 44 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 44 (body -> LBRACKET inner_body RBRACKET .)


state 190

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET program_function
    (45) inner_body -> . statement inner_body
    (46) inner_body -> . empty
    (69) statement -> . assign
    (70) statement -> . condition
    (71) statement -> . print
    (72) statement -> . cycle
    (73) statement -> . call_function
    (2) empty -> .
    (47) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (51) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (54) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (60) cycle -> . for
    (61) cycle -> . while
    (66) call_function -> . ID LPAREN exp exp_many RPAREN
    (29) variable -> . ID variable_array
    (63) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (62) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 65
    PRINT           shift and go to state 66
    ID              shift and go to state 69
    FOR             shift and go to state 70
    DO              shift and go to state 71

    inner_body                     shift and go to state 219
    statement                      shift and go to state 57
    empty                          shift and go to state 58
    assign                         shift and go to state 59
    condition                      shift and go to state 60
    print                          shift and go to state 61
    cycle                          shift and go to state 62
    call_function                  shift and go to state 63
    variable                       shift and go to state 64
    for                            shift and go to state 67
    while                          shift and go to state 68

state 191

    (39) param2 -> COMMA s_type . ID param2

    ID              shift and go to state 220


state 192

    (27) var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .

    COMMA           reduce using rule 27 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)
    SEMICOLON       reduce using rule 27 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)


state 193

    (97) exp_or -> OR exp .

    SEMICOLON       reduce using rule 97 (exp_or -> OR exp .)
    RPAREN          reduce using rule 97 (exp_or -> OR exp .)
    COMMA           reduce using rule 97 (exp_or -> OR exp .)
    RSQBRACKET      reduce using rule 97 (exp_or -> OR exp .)


state 194

    (59) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 221


state 195

    (29) variable -> ID . variable_array
    (30) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (31) variable_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 88
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 87
    empty                          shift and go to state 89

state 196

    (123) factor_exp -> LPAREN exp RPAREN .

    MULTIPLY        reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    LTHAN           reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    GTHAN           reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)
    RSQBRACKET      reduce using rule 123 (factor_exp -> LPAREN exp RPAREN .)


state 197

    (100) t_exp_and -> AND t_exp .

    OR              reduce using rule 100 (t_exp_and -> AND t_exp .)
    SEMICOLON       reduce using rule 100 (t_exp_and -> AND t_exp .)
    RPAREN          reduce using rule 100 (t_exp_and -> AND t_exp .)
    COMMA           reduce using rule 100 (t_exp_and -> AND t_exp .)
    RSQBRACKET      reduce using rule 100 (t_exp_and -> AND t_exp .)


state 198

    (80) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (81) explore_var -> . COMMA variable
    (82) explore_var -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 223
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    explore_var                    shift and go to state 222
    empty                          shift and go to state 224

state 199

    (85) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 225


state 200

    (88) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 226


state 201

    (86) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 227


state 202

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 228


state 203

    (95) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 229


state 204

    (103) expression_comp -> expression_comp_2 m_exp .

    AND             reduce using rule 103 (expression_comp -> expression_comp_2 m_exp .)
    OR              reduce using rule 103 (expression_comp -> expression_comp_2 m_exp .)
    SEMICOLON       reduce using rule 103 (expression_comp -> expression_comp_2 m_exp .)
    RPAREN          reduce using rule 103 (expression_comp -> expression_comp_2 m_exp .)
    COMMA           reduce using rule 103 (expression_comp -> expression_comp_2 m_exp .)
    RSQBRACKET      reduce using rule 103 (expression_comp -> expression_comp_2 m_exp .)


state 205

    (110) m_exp_sr -> m_exp_sr_2 m_exp .

    EQUAL           reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GTHAN           reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 110 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 206

    (115) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 115 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 115 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 115 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 115 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 115 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 115 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 115 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 115 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 115 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 115 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 115 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 115 (term_pc -> term_pc_2 term .)


state 207

    (51) condition -> IF LPAREN exp RPAREN body . condition2 SEMICOLON
    (52) condition2 -> . ELSE body
    (53) condition2 -> . empty
    (2) empty -> .

    ELSE            shift and go to state 231
    SEMICOLON       reduce using rule 2 (empty -> .)

    condition2                     shift and go to state 230
    empty                          shift and go to state 232

state 208

    (54) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 54 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 54 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 54 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 54 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 54 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 54 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 54 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 209

    (57) print_many2 -> COMMA print_type . print_many2
    (57) print_many2 -> . COMMA print_type print_many2
    (58) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 233
    empty                          shift and go to state 182

state 210

    (66) call_function -> ID LPAREN exp exp_many RPAREN .

    IF              reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 66 (call_function -> ID LPAREN exp exp_many RPAREN .)


state 211

    (67) exp_many -> COMMA exp . exp_many
    (67) exp_many -> . COMMA exp exp_many
    (68) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 184
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 234
    empty                          shift and go to state 185

state 212

    (32) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 235
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 213

    (30) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 214

    (33) variable_matrix -> empty .

    ASSIGN          reduce using rule 33 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 33 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 33 (variable_matrix -> empty .)
    PLUS            reduce using rule 33 (variable_matrix -> empty .)
    MINUS           reduce using rule 33 (variable_matrix -> empty .)
    EQUAL           reduce using rule 33 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 33 (variable_matrix -> empty .)
    LTHAN           reduce using rule 33 (variable_matrix -> empty .)
    GTHAN           reduce using rule 33 (variable_matrix -> empty .)
    AND             reduce using rule 33 (variable_matrix -> empty .)
    OR              reduce using rule 33 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 33 (variable_matrix -> empty .)
    RPAREN          reduce using rule 33 (variable_matrix -> empty .)
    COMMA           reduce using rule 33 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 33 (variable_matrix -> empty .)


state 215

    (65) for_end -> ID .

    RPAREN          reduce using rule 65 (for_end -> ID .)


state 216

    (63) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 236


state 217

    (64) for_end -> CTE_INT .

    RPAREN          reduce using rule 64 (for_end -> CTE_INT .)


state 218

    (62) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 237


state 219

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET program_function
    (41) return -> . RETURN exp SEMICOLON
    (42) return -> . empty
    (2) empty -> .

    RETURN          shift and go to state 239
    RBRACKET        reduce using rule 2 (empty -> .)

    return                         shift and go to state 238
    empty                          shift and go to state 240

state 220

    (39) param2 -> COMMA s_type ID . param2
    (39) param2 -> . COMMA s_type ID param2
    (40) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 142
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 241
    empty                          shift and go to state 143

state 221

    (59) read -> READ LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 59 (read -> READ LPAREN variable RPAREN .)


state 222

    (80) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (83) explor_cte -> . COMMA CTE_INT
    (84) explor_cte -> . empty
    (2) empty -> .

    COMMA           shift and go to state 243
    RPAREN          reduce using rule 2 (empty -> .)

    explor_cte                     shift and go to state 242
    empty                          shift and go to state 244

state 223

    (81) explore_var -> COMMA . variable
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 245

state 224

    (82) explore_var -> empty .

    COMMA           reduce using rule 82 (explore_var -> empty .)
    RPAREN          reduce using rule 82 (explore_var -> empty .)


state 225

    (85) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 246

state 226

    (88) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 247

state 227

    (86) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 86 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 228

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 248


state 229

    (95) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 249

state 230

    (51) condition -> IF LPAREN exp RPAREN body condition2 . SEMICOLON

    SEMICOLON       shift and go to state 250


state 231

    (52) condition2 -> ELSE . body
    (44) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 92

    body                           shift and go to state 251

state 232

    (53) condition2 -> empty .

    SEMICOLON       reduce using rule 53 (condition2 -> empty .)


state 233

    (57) print_many2 -> COMMA print_type print_many2 .

    RPAREN          reduce using rule 57 (print_many2 -> COMMA print_type print_many2 .)


state 234

    (67) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 67 (exp_many -> COMMA exp exp_many .)


state 235

    (32) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 252


state 236

    (63) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (44) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 92

    body                           shift and go to state 253

state 237

    (62) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 254


state 238

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET program_function

    RBRACKET        shift and go to state 255


state 239

    (41) return -> RETURN . exp SEMICOLON
    (96) exp -> . t_exp exp_or
    (99) t_exp -> . expression t_exp_and
    (102) expression -> . m_exp expression_comp
    (109) m_exp -> . term m_exp_sr
    (114) term -> . factor term_pc
    (119) factor -> . factor_exp
    (120) factor -> . factor_cte
    (121) factor -> . variable
    (122) factor -> . call_function
    (123) factor_exp -> . LPAREN exp RPAREN
    (124) factor_cte -> . CTE_INT
    (125) factor_cte -> . CTE_FLOAT
    (126) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (66) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 113
    CTE_INT         shift and go to state 120
    CTE_FLOAT       shift and go to state 128
    CTE_CHAR        shift and go to state 129
    ID              shift and go to state 130

    exp                            shift and go to state 256
    t_exp                          shift and go to state 105
    expression                     shift and go to state 114
    m_exp                          shift and go to state 122
    term                           shift and go to state 123
    factor                         shift and go to state 124
    factor_exp                     shift and go to state 125
    factor_cte                     shift and go to state 126
    variable                       shift and go to state 100
    call_function                  shift and go to state 127

state 240

    (42) return -> empty .

    RBRACKET        reduce using rule 42 (return -> empty .)


state 241

    (39) param2 -> COMMA s_type ID param2 .

    RPAREN          reduce using rule 39 (param2 -> COMMA s_type ID param2 .)


state 242

    (80) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 257


state 243

    (83) explor_cte -> COMMA . CTE_INT

    CTE_INT         shift and go to state 258


state 244

    (84) explor_cte -> empty .

    RPAREN          reduce using rule 84 (explor_cte -> empty .)


state 245

    (81) explore_var -> COMMA variable .

    COMMA           reduce using rule 81 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 81 (explore_var -> COMMA variable .)


state 246

    (85) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 259


state 247

    (88) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (89) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (90) dr_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 260
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    dr_array                       shift and go to state 261
    empty                          shift and go to state 262

state 248

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT . COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 263


state 249

    (95) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 264


state 250

    (51) condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .

    IF              reduce using rule 51 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    PRINT           reduce using rule 51 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ID              reduce using rule 51 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FOR             reduce using rule 51 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DO              reduce using rule 51 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RBRACKET        reduce using rule 51 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RETURN          reduce using rule 51 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)


state 251

    (52) condition2 -> ELSE body .

    SEMICOLON       reduce using rule 52 (condition2 -> ELSE body .)


state 252

    (32) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 253

    (63) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 265


state 254

    (62) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 62 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 62 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 62 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 62 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 62 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 62 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 255

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET . program_function
    (34) program_function -> . FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (35) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 266
    empty                          shift and go to state 17

state 256

    (41) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 267


state 257

    (80) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 80 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 258

    (83) explor_cte -> COMMA CTE_INT .

    RPAREN          reduce using rule 83 (explor_cte -> COMMA CTE_INT .)


state 259

    (85) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 268

state 260

    (89) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 269


state 261

    (88) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (93) dr_int -> . COMMA CTE_INT
    (94) dr_int -> . empty
    (2) empty -> .

    COMMA           shift and go to state 270
    RPAREN          reduce using rule 2 (empty -> .)

    dr_int                         shift and go to state 271
    empty                          shift and go to state 272

state 262

    (90) dr_array -> empty .

    COMMA           reduce using rule 90 (dr_array -> empty .)
    RPAREN          reduce using rule 90 (dr_array -> empty .)


state 263

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA . CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 273


state 264

    (95) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 274


state 265

    (63) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 63 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 63 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 63 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 63 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 63 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 63 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 63 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 266

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .

    MAIN            reduce using rule 34 (program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .)


state 267

    (41) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 41 (return -> RETURN exp SEMICOLON .)


state 268

    (85) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 275


state 269

    (89) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 276


state 270

    (93) dr_int -> COMMA . CTE_INT

    CTE_INT         shift and go to state 277


state 271

    (88) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 278


state 272

    (94) dr_int -> empty .

    RPAREN          reduce using rule 94 (dr_int -> empty .)


state 273

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT . COMMA CTE_INT RPAREN

    COMMA           shift and go to state 279


state 274

    (95) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 95 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 275

    (85) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 195

    variable                       shift and go to state 280

state 276

    (89) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (91) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (92) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 281
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 282
    empty                          shift and go to state 283

state 277

    (93) dr_int -> COMMA CTE_INT .

    RPAREN          reduce using rule 93 (dr_int -> COMMA CTE_INT .)


state 278

    (88) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 88 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 279

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA . CTE_INT RPAREN

    CTE_INT         shift and go to state 284


state 280

    (85) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 285


state 281

    (91) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 286


state 282

    (89) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 287


state 283

    (92) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 92 (dr_array_mp -> empty .)


state 284

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT . RPAREN

    RPAREN          shift and go to state 288


state 285

    (85) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 85 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 286

    (91) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (91) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (92) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 281
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 289
    empty                          shift and go to state 283

state 287

    (89) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 89 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 89 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 288

    (87) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .

    SEMICOLON       reduce using rule 87 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)


state 289

    (91) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 91 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 198 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 247 resolved as shift
