Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    POWER

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END
Rule 2     empty -> <empty>
Rule 3     id_saver -> ID empty
Rule 4     program_libraries -> from_library import_library
Rule 5     program_libraries -> empty
Rule 6     from_library -> FROM ID
Rule 7     from_library -> empty
Rule 8     import_library -> IMPORT ID AS ID program_libraries
Rule 9     var_type -> var_c_type
Rule 10    var_type -> var_s_type
Rule 11    program_vars -> VAR var_type
Rule 12    program_vars -> empty
Rule 13    s_type -> INT
Rule 14    s_type -> FLOAT
Rule 15    s_type -> CHAR
Rule 16    c_type -> DATAFRAME
Rule 17    c_type -> DATE
Rule 18    var_multiple -> var_type
Rule 19    var_multiple -> empty
Rule 20    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 21    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 22    var_c_type2 -> empty
Rule 23    add_c_var -> empty
Rule 24    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 25    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 26    var_s_type2 -> empty
Rule 27    add_s_var -> empty
Rule 28    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 29    var_s_array -> empty
Rule 30    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 31    var_s_matrix -> empty
Rule 32    var_s_dimesions -> CTE_INT empty
Rule 33    variable -> id_saver variable_array
Rule 34    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 35    variable_array -> empty
Rule 36    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 37    variable_matrix -> empty
Rule 38    program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
Rule 39    program_function -> empty
Rule 40    f_type -> INT
Rule 41    f_type -> FLOAT
Rule 42    f_type -> CHAR
Rule 43    f_type -> VOID
Rule 44    func_creator -> empty
Rule 45    param -> s_type id_saver add_params param2
Rule 46    param2 -> COMMA s_type id_saver add_params param2
Rule 47    param2 -> empty
Rule 48    add_params -> empty
Rule 49    return -> RETURN exp SEMICOLON
Rule 50    return -> empty
Rule 51    program_main -> MAIN LBRACKET program_vars inner_body RBRACKET
Rule 52    body -> LBRACKET inner_body RBRACKET
Rule 53    inner_body -> statement inner_body
Rule 54    inner_body -> empty
Rule 55    assign -> variable ASSIGN specialf_assign SEMICOLON
Rule 56    specialf_assign -> exp
Rule 57    specialf_assign -> special_function
Rule 58    specialf_assign -> read
Rule 59    condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON
Rule 60    condition2 -> ELSE body
Rule 61    condition2 -> empty
Rule 62    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 63    print_type -> exp
Rule 64    print_many -> print_type print_many2
Rule 65    print_many2 -> COMMA print_type print_many2
Rule 66    print_many2 -> empty
Rule 67    read -> READ LPAREN variable RPAREN
Rule 68    cycle -> for
Rule 69    cycle -> while
Rule 70    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 71    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 72    for_end -> CTE_INT
Rule 73    for_end -> ID
Rule 74    call_function -> ID LPAREN exp exp_many RPAREN
Rule 75    exp_many -> COMMA exp exp_many
Rule 76    exp_many -> empty
Rule 77    statement -> assign
Rule 78    statement -> condition
Rule 79    statement -> print
Rule 80    statement -> cycle
Rule 81    statement -> call_function
Rule 82    special_function -> exploration
Rule 83    special_function -> financial_state
Rule 84    special_function -> dummi_regression
Rule 85    special_function -> season_analysis
Rule 86    special_function -> trend_prediction
Rule 87    special_function -> model_predict
Rule 88    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 89    explore_var -> COMMA variable
Rule 90    explore_var -> empty
Rule 91    explor_cte -> COMMA CTE_INT
Rule 92    explor_cte -> empty
Rule 93    financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 94    season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 95    trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
Rule 96    dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 97    dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 98    dr_array -> empty
Rule 99    dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 100   dr_array_mp -> empty
Rule 101   dr_int -> COMMA CTE_INT
Rule 102   dr_int -> empty
Rule 103   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 104   exp -> t_exp exp_or
Rule 105   exp_or -> OR exp
Rule 106   exp_or -> empty
Rule 107   t_exp -> expression t_exp_and
Rule 108   t_exp_and -> AND t_exp
Rule 109   t_exp_and -> empty
Rule 110   expression -> m_exp expression_comp
Rule 111   expression_comp -> expression_comp_2 m_exp
Rule 112   expression_comp -> empty
Rule 113   expression_comp_2 -> EQUAL
Rule 114   expression_comp_2 -> NOTEQUAL
Rule 115   expression_comp_2 -> LTHAN
Rule 116   expression_comp_2 -> GTHAN
Rule 117   m_exp -> term m_exp_sr
Rule 118   m_exp_sr -> m_exp_sr_2 m_exp
Rule 119   m_exp_sr -> empty
Rule 120   m_exp_sr_2 -> PLUS
Rule 121   m_exp_sr_2 -> MINUS
Rule 122   term -> sub_factor term_pc
Rule 123   term_pc -> term_pc_2 term
Rule 124   term_pc -> empty
Rule 125   term_pc_2 -> MULTIPLY
Rule 126   term_pc_2 -> DIVIDE
Rule 127   term_pc_2 -> MODULE
Rule 128   sub_factor -> factor sub_factor_pc
Rule 129   sub_factor_pc -> MODULE sub_factor
Rule 130   sub_factor_pc -> empty
Rule 131   factor -> factor_exp
Rule 132   factor -> factor_cte
Rule 133   factor -> variable
Rule 134   factor -> call_function
Rule 135   factor_exp -> LPAREN exp RPAREN
Rule 136   factor_cte -> CTE_INT
Rule 137   factor_cte -> CTE_FLOAT
Rule 138   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 108
AS                   : 8
ASSIGN               : 55
CHAR                 : 15 42
COLON                : 
COMMA                : 21 25 46 65 75 89 91 93 93 93 95 95 95 96 97 99 101 103 103
CTE_CHAR             : 97 99 138
CTE_FLOAT            : 137
CTE_INT              : 32 72 91 95 95 95 101 136
DATAFRAME            : 16
DATE                 : 17
DIVIDE               : 126
DO                   : 70
DUMMI_REGRESSION     : 96
ELSE                 : 60
END                  : 1
EQUAL                : 113
EXPLORATION          : 88
FINANCIAL_STATE      : 93
FLOAT                : 14 41
FOR                  : 71
FROM                 : 6
FUNCTION             : 38
GTHAN                : 116
ID                   : 1 3 6 8 8 71 73 74
IF                   : 59
IMPORT               : 8
INT                  : 13 40
LBRACKET             : 38 51 52
LPAREN               : 38 59 62 67 70 71 74 88 93 94 95 96 103 135
LSQBRACKET           : 28 30 34 36 97
LTHAN                : 115
MAIN                 : 51
MINUS                : 121
MODEL_PREDICT        : 103
MODULE               : 127 129
MULTIPLY             : 125
NOTEQUAL             : 114
OR                   : 105
PLUS                 : 120
POWER                : 
PRINT                : 62
PROGRAM              : 1
RBRACKET             : 38 51 52
READ                 : 67
RETURN               : 49
RPAREN               : 38 59 62 67 70 71 74 88 93 94 95 96 103 135
RSQBRACKET           : 28 30 34 36 97
SEASON_ANALYSIS      : 94
SEMICOLON            : 1 20 24 49 55 59 62 70 71
TO                   : 71
TREND_PREDICTION     : 95
VAR                  : 11
VOID                 : 43
WHILE                : 70
error                : 

Nonterminals, with rules where they appear

add_c_var            : 20 21
add_params           : 45 46
add_s_var            : 24 25
assign               : 77
body                 : 59 60 70 71
c_type               : 20
call_function        : 81 134
condition            : 78
condition2           : 59
cycle                : 80
dr_array             : 96
dr_array_mp          : 97 99
dr_int               : 96
dummi_regression     : 84
empty                : 3 5 7 12 19 22 23 26 27 29 31 32 35 37 39 44 47 48 50 54 61 66 76 90 92 98 100 102 106 109 112 119 124 130
exp                  : 34 36 49 56 59 63 70 74 75 105 135
exp_many             : 74 75
exp_or               : 104
explor_cte           : 88
exploration          : 82
explore_var          : 88
expression           : 107
expression_comp      : 110
expression_comp_2    : 111
f_type               : 38
factor               : 128
factor_cte           : 132
factor_exp           : 131
financial_state      : 83
for                  : 68
for_end              : 71
from_library         : 4
func_creator         : 38
id_saver             : 20 21 24 25 33 38 45 46
import_library       : 4
inner_body           : 38 51 52 53
m_exp                : 110 111 118
m_exp_sr             : 117
m_exp_sr_2           : 118
model_predict        : 87
param                : 38
param2               : 45 46
print                : 79
print_many           : 62
print_many2          : 64 65
print_type           : 64 65
program              : 0
program_function     : 1 38
program_libraries    : 1 8
program_main         : 1
program_vars         : 1 38 51
read                 : 58
return               : 38
s_type               : 24 45 46
season_analysis      : 85
special_function     : 57
specialf_assign      : 55
statement            : 53
sub_factor           : 122 129
sub_factor_pc        : 128
t_exp                : 104 108
t_exp_and            : 107
term                 : 117 123
term_pc              : 122
term_pc_2            : 123
trend_prediction     : 86
var_c_type           : 9
var_c_type2          : 20 21
var_multiple         : 20 24
var_s_array          : 24 25
var_s_dimesions      : 28 30
var_s_matrix         : 28
var_s_type           : 10
var_s_type2          : 24 25
var_type             : 11 18
variable             : 55 67 88 89 93 93 93 93 94 95 96 96 103 103 133
variable_array       : 33
variable_matrix      : 34
while                : 69

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main END
    (4) program_libraries -> . from_library import_library
    (5) program_libraries -> . empty
    (6) from_library -> . FROM ID
    (7) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main END
    (11) program_vars -> . VAR var_type
    (12) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (4) program_libraries -> from_library . import_library
    (8) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (5) program_libraries -> empty .
    (7) from_library -> empty .

    VAR             reduce using rule 5 (program_libraries -> empty .)
    FUNCTION        reduce using rule 5 (program_libraries -> empty .)
    MAIN            reduce using rule 5 (program_libraries -> empty .)
    IMPORT          reduce using rule 7 (from_library -> empty .)


state 8

    (6) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main END
    (38) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (39) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 15
    empty                          shift and go to state 17

state 10

    (11) program_vars -> VAR . var_type
    (9) var_type -> . var_c_type
    (10) var_type -> . var_s_type
    (20) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (24) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (16) c_type -> . DATAFRAME
    (17) c_type -> . DATE
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    var_type                       shift and go to state 18
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21
    s_type                         shift and go to state 22

state 11

    (12) program_vars -> empty .

    FUNCTION        reduce using rule 12 (program_vars -> empty .)
    MAIN            reduce using rule 12 (program_vars -> empty .)
    IF              reduce using rule 12 (program_vars -> empty .)
    PRINT           reduce using rule 12 (program_vars -> empty .)
    ID              reduce using rule 12 (program_vars -> empty .)
    FOR             reduce using rule 12 (program_vars -> empty .)
    DO              reduce using rule 12 (program_vars -> empty .)
    RBRACKET        reduce using rule 12 (program_vars -> empty .)
    RETURN          reduce using rule 12 (program_vars -> empty .)


state 12

    (4) program_libraries -> from_library import_library .

    VAR             reduce using rule 4 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 4 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 4 (program_libraries -> from_library import_library .)


state 13

    (8) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 28


state 14

    (6) from_library -> FROM ID .

    IMPORT          reduce using rule 6 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main END
    (51) program_main -> . MAIN LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 30

    program_main                   shift and go to state 29

state 16

    (38) program_function -> FUNCTION . f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (40) f_type -> . INT
    (41) f_type -> . FLOAT
    (42) f_type -> . CHAR
    (43) f_type -> . VOID

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    f_type                         shift and go to state 31

state 17

    (39) program_function -> empty .

    MAIN            reduce using rule 39 (program_function -> empty .)


state 18

    (11) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 11 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 11 (program_vars -> VAR var_type .)
    IF              reduce using rule 11 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 11 (program_vars -> VAR var_type .)
    ID              reduce using rule 11 (program_vars -> VAR var_type .)
    FOR             reduce using rule 11 (program_vars -> VAR var_type .)
    DO              reduce using rule 11 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 11 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 11 (program_vars -> VAR var_type .)


state 19

    (9) var_type -> var_c_type .

    FUNCTION        reduce using rule 9 (var_type -> var_c_type .)
    MAIN            reduce using rule 9 (var_type -> var_c_type .)
    IF              reduce using rule 9 (var_type -> var_c_type .)
    PRINT           reduce using rule 9 (var_type -> var_c_type .)
    ID              reduce using rule 9 (var_type -> var_c_type .)
    FOR             reduce using rule 9 (var_type -> var_c_type .)
    DO              reduce using rule 9 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 9 (var_type -> var_c_type .)
    RETURN          reduce using rule 9 (var_type -> var_c_type .)


state 20

    (10) var_type -> var_s_type .

    FUNCTION        reduce using rule 10 (var_type -> var_s_type .)
    MAIN            reduce using rule 10 (var_type -> var_s_type .)
    IF              reduce using rule 10 (var_type -> var_s_type .)
    PRINT           reduce using rule 10 (var_type -> var_s_type .)
    ID              reduce using rule 10 (var_type -> var_s_type .)
    FOR             reduce using rule 10 (var_type -> var_s_type .)
    DO              reduce using rule 10 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 10 (var_type -> var_s_type .)
    RETURN          reduce using rule 10 (var_type -> var_s_type .)


state 21

    (20) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 36

state 22

    (24) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 38

state 23

    (16) c_type -> DATAFRAME .

    ID              reduce using rule 16 (c_type -> DATAFRAME .)


state 24

    (17) c_type -> DATE .

    ID              reduce using rule 17 (c_type -> DATE .)


state 25

    (13) s_type -> INT .

    ID              reduce using rule 13 (s_type -> INT .)


state 26

    (14) s_type -> FLOAT .

    ID              reduce using rule 14 (s_type -> FLOAT .)


state 27

    (15) s_type -> CHAR .

    ID              reduce using rule 15 (s_type -> CHAR .)


state 28

    (8) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 39


state 29

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . END

    END             shift and go to state 40


state 30

    (51) program_main -> MAIN . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 41


state 31

    (38) program_function -> FUNCTION f_type . id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 42

state 32

    (40) f_type -> INT .

    ID              reduce using rule 40 (f_type -> INT .)


state 33

    (41) f_type -> FLOAT .

    ID              reduce using rule 41 (f_type -> FLOAT .)


state 34

    (42) f_type -> CHAR .

    ID              reduce using rule 42 (f_type -> CHAR .)


state 35

    (43) f_type -> VOID .

    ID              reduce using rule 43 (f_type -> VOID .)


state 36

    (20) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (23) add_c_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_c_var                      shift and go to state 43
    empty                          shift and go to state 44

state 37

    (3) id_saver -> ID . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    LSQBRACKET      reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    empty                          shift and go to state 45

state 38

    (24) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (28) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (29) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 47
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 46
    empty                          shift and go to state 48

state 39

    (8) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 49


state 40

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .)


state 41

    (51) program_main -> MAIN LBRACKET . program_vars inner_body RBRACKET
    (11) program_vars -> . VAR var_type
    (12) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 50
    empty                          shift and go to state 11

state 42

    (38) program_function -> FUNCTION f_type id_saver . func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (44) func_creator -> . empty
    (2) empty -> .

    LPAREN          reduce using rule 2 (empty -> .)

    func_creator                   shift and go to state 51
    empty                          shift and go to state 52

state 43

    (20) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (21) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (22) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 54
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 53
    empty                          shift and go to state 55

state 44

    (23) add_c_var -> empty .

    COMMA           reduce using rule 23 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 23 (add_c_var -> empty .)


state 45

    (3) id_saver -> ID empty .

    COMMA           reduce using rule 3 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 3 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 3 (id_saver -> ID empty .)
    LPAREN          reduce using rule 3 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 3 (id_saver -> ID empty .)
    MODULE          reduce using rule 3 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 3 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 3 (id_saver -> ID empty .)
    PLUS            reduce using rule 3 (id_saver -> ID empty .)
    MINUS           reduce using rule 3 (id_saver -> ID empty .)
    EQUAL           reduce using rule 3 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 3 (id_saver -> ID empty .)
    LTHAN           reduce using rule 3 (id_saver -> ID empty .)
    GTHAN           reduce using rule 3 (id_saver -> ID empty .)
    AND             reduce using rule 3 (id_saver -> ID empty .)
    OR              reduce using rule 3 (id_saver -> ID empty .)
    RPAREN          reduce using rule 3 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 3 (id_saver -> ID empty .)


state 46

    (24) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (27) add_s_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_s_var                      shift and go to state 56
    empty                          shift and go to state 57

state 47

    (28) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (32) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 59

    var_s_dimesions                shift and go to state 58

state 48

    (29) var_s_array -> empty .

    COMMA           reduce using rule 29 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 29 (var_s_array -> empty .)


state 49

    (8) import_library -> IMPORT ID AS ID . program_libraries
    (4) program_libraries -> . from_library import_library
    (5) program_libraries -> . empty
    (6) from_library -> . FROM ID
    (7) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 60
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 50

    (51) program_main -> MAIN LBRACKET program_vars . inner_body RBRACKET
    (53) inner_body -> . statement inner_body
    (54) inner_body -> . empty
    (77) statement -> . assign
    (78) statement -> . condition
    (79) statement -> . print
    (80) statement -> . cycle
    (81) statement -> . call_function
    (2) empty -> .
    (55) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (59) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (62) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (68) cycle -> . for
    (69) cycle -> . while
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (33) variable -> . id_saver variable_array
    (71) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (70) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (3) id_saver -> . ID empty

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 76
    DO              shift and go to state 77

    inner_body                     shift and go to state 61
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73
    id_saver                       shift and go to state 75

state 51

    (38) program_function -> FUNCTION f_type id_saver func_creator . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    LPAREN          shift and go to state 78


state 52

    (44) func_creator -> empty .

    LPAREN          reduce using rule 44 (func_creator -> empty .)


state 53

    (20) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 79


state 54

    (21) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 80

state 55

    (22) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 22 (var_c_type2 -> empty .)


state 56

    (24) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (25) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (26) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 82
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 81
    empty                          shift and go to state 83

state 57

    (27) add_s_var -> empty .

    COMMA           reduce using rule 27 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 27 (add_s_var -> empty .)


state 58

    (28) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 84


state 59

    (32) var_s_dimesions -> CTE_INT . empty
    (2) empty -> .

    RSQBRACKET      reduce using rule 2 (empty -> .)

    empty                          shift and go to state 85

state 60

    (8) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 8 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 8 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 8 (import_library -> IMPORT ID AS ID program_libraries .)


state 61

    (51) program_main -> MAIN LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 86


state 62

    (53) inner_body -> statement . inner_body
    (53) inner_body -> . statement inner_body
    (54) inner_body -> . empty
    (77) statement -> . assign
    (78) statement -> . condition
    (79) statement -> . print
    (80) statement -> . cycle
    (81) statement -> . call_function
    (2) empty -> .
    (55) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (59) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (62) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (68) cycle -> . for
    (69) cycle -> . while
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (33) variable -> . id_saver variable_array
    (71) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (70) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (3) id_saver -> . ID empty

    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 76
    DO              shift and go to state 77

    statement                      shift and go to state 62
    inner_body                     shift and go to state 87
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73
    id_saver                       shift and go to state 75

state 63

    (54) inner_body -> empty .

    RBRACKET        reduce using rule 54 (inner_body -> empty .)
    RETURN          reduce using rule 54 (inner_body -> empty .)


state 64

    (77) statement -> assign .

    IF              reduce using rule 77 (statement -> assign .)
    PRINT           reduce using rule 77 (statement -> assign .)
    ID              reduce using rule 77 (statement -> assign .)
    FOR             reduce using rule 77 (statement -> assign .)
    DO              reduce using rule 77 (statement -> assign .)
    RBRACKET        reduce using rule 77 (statement -> assign .)
    RETURN          reduce using rule 77 (statement -> assign .)


state 65

    (78) statement -> condition .

    IF              reduce using rule 78 (statement -> condition .)
    PRINT           reduce using rule 78 (statement -> condition .)
    ID              reduce using rule 78 (statement -> condition .)
    FOR             reduce using rule 78 (statement -> condition .)
    DO              reduce using rule 78 (statement -> condition .)
    RBRACKET        reduce using rule 78 (statement -> condition .)
    RETURN          reduce using rule 78 (statement -> condition .)


state 66

    (79) statement -> print .

    IF              reduce using rule 79 (statement -> print .)
    PRINT           reduce using rule 79 (statement -> print .)
    ID              reduce using rule 79 (statement -> print .)
    FOR             reduce using rule 79 (statement -> print .)
    DO              reduce using rule 79 (statement -> print .)
    RBRACKET        reduce using rule 79 (statement -> print .)
    RETURN          reduce using rule 79 (statement -> print .)


state 67

    (80) statement -> cycle .

    IF              reduce using rule 80 (statement -> cycle .)
    PRINT           reduce using rule 80 (statement -> cycle .)
    ID              reduce using rule 80 (statement -> cycle .)
    FOR             reduce using rule 80 (statement -> cycle .)
    DO              reduce using rule 80 (statement -> cycle .)
    RBRACKET        reduce using rule 80 (statement -> cycle .)
    RETURN          reduce using rule 80 (statement -> cycle .)


state 68

    (81) statement -> call_function .

    IF              reduce using rule 81 (statement -> call_function .)
    PRINT           reduce using rule 81 (statement -> call_function .)
    ID              reduce using rule 81 (statement -> call_function .)
    FOR             reduce using rule 81 (statement -> call_function .)
    DO              reduce using rule 81 (statement -> call_function .)
    RBRACKET        reduce using rule 81 (statement -> call_function .)
    RETURN          reduce using rule 81 (statement -> call_function .)


state 69

    (55) assign -> variable . ASSIGN specialf_assign SEMICOLON

    ASSIGN          shift and go to state 88


state 70

    (59) condition -> IF . LPAREN exp RPAREN body condition2 SEMICOLON

    LPAREN          shift and go to state 89


state 71

    (62) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 90


state 72

    (68) cycle -> for .

    IF              reduce using rule 68 (cycle -> for .)
    PRINT           reduce using rule 68 (cycle -> for .)
    ID              reduce using rule 68 (cycle -> for .)
    FOR             reduce using rule 68 (cycle -> for .)
    DO              reduce using rule 68 (cycle -> for .)
    RBRACKET        reduce using rule 68 (cycle -> for .)
    RETURN          reduce using rule 68 (cycle -> for .)


state 73

    (69) cycle -> while .

    IF              reduce using rule 69 (cycle -> while .)
    PRINT           reduce using rule 69 (cycle -> while .)
    ID              reduce using rule 69 (cycle -> while .)
    FOR             reduce using rule 69 (cycle -> while .)
    DO              reduce using rule 69 (cycle -> while .)
    RBRACKET        reduce using rule 69 (cycle -> while .)
    RETURN          reduce using rule 69 (cycle -> while .)


state 74

    (74) call_function -> ID . LPAREN exp exp_many RPAREN
    (3) id_saver -> ID . empty
    (2) empty -> .

    LPAREN          shift and go to state 91
    LSQBRACKET      reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    empty                          shift and go to state 45

state 75

    (33) variable -> id_saver . variable_array
    (34) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (35) variable_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 93
    ASSIGN          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 92
    empty                          shift and go to state 94

state 76

    (71) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 95


state 77

    (70) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (52) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 97

    body                           shift and go to state 96

state 78

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (45) param -> . s_type id_saver add_params param2
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    param                          shift and go to state 98
    s_type                         shift and go to state 99

state 79

    (20) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (18) var_multiple -> . var_type
    (19) var_multiple -> . empty
    (9) var_type -> . var_c_type
    (10) var_type -> . var_s_type
    (2) empty -> .
    (20) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (24) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (16) c_type -> . DATAFRAME
    (17) c_type -> . DATE
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    c_type                         shift and go to state 21
    var_multiple                   shift and go to state 100
    var_type                       shift and go to state 101
    empty                          shift and go to state 102
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    s_type                         shift and go to state 22

state 80

    (21) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (23) add_c_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_c_var                      shift and go to state 103
    empty                          shift and go to state 44

state 81

    (24) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 104


state 82

    (25) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 105

state 83

    (26) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 26 (var_s_type2 -> empty .)


state 84

    (28) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (30) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (31) var_s_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 106
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_matrix                   shift and go to state 107
    empty                          shift and go to state 108

state 85

    (32) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 32 (var_s_dimesions -> CTE_INT empty .)


state 86

    (51) program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 51 (program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .)


state 87

    (53) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 53 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 53 (inner_body -> statement inner_body .)


state 88

    (55) assign -> variable ASSIGN . specialf_assign SEMICOLON
    (56) specialf_assign -> . exp
    (57) specialf_assign -> . special_function
    (58) specialf_assign -> . read
    (104) exp -> . t_exp exp_or
    (82) special_function -> . exploration
    (83) special_function -> . financial_state
    (84) special_function -> . dummi_regression
    (85) special_function -> . season_analysis
    (86) special_function -> . trend_prediction
    (87) special_function -> . model_predict
    (67) read -> . READ LPAREN variable RPAREN
    (107) t_exp -> . expression t_exp_and
    (88) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (93) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (96) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (94) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (95) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (103) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    READ            shift and go to state 121
    EXPLORATION     shift and go to state 124
    FINANCIAL_STATE shift and go to state 125
    DUMMI_REGRESSION shift and go to state 126
    SEASON_ANALYSIS shift and go to state 127
    TREND_PREDICTION shift and go to state 128
    MODEL_PREDICT   shift and go to state 130
    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    variable                       shift and go to state 109
    specialf_assign                shift and go to state 110
    exp                            shift and go to state 111
    special_function               shift and go to state 112
    read                           shift and go to state 113
    t_exp                          shift and go to state 114
    exploration                    shift and go to state 115
    financial_state                shift and go to state 116
    dummi_regression               shift and go to state 117
    season_analysis                shift and go to state 118
    trend_prediction               shift and go to state 119
    model_predict                  shift and go to state 120
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 89

    (59) condition -> IF LPAREN . exp RPAREN body condition2 SEMICOLON
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 140
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 90

    (62) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (64) print_many -> . print_type print_many2
    (63) print_type -> . exp
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    print_many                     shift and go to state 141
    print_type                     shift and go to state 142
    exp                            shift and go to state 143
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 91

    (74) call_function -> ID LPAREN . exp exp_many RPAREN
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 144
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 92

    (33) variable -> id_saver variable_array .

    ASSIGN          reduce using rule 33 (variable -> id_saver variable_array .)
    MODULE          reduce using rule 33 (variable -> id_saver variable_array .)
    MULTIPLY        reduce using rule 33 (variable -> id_saver variable_array .)
    DIVIDE          reduce using rule 33 (variable -> id_saver variable_array .)
    PLUS            reduce using rule 33 (variable -> id_saver variable_array .)
    MINUS           reduce using rule 33 (variable -> id_saver variable_array .)
    EQUAL           reduce using rule 33 (variable -> id_saver variable_array .)
    NOTEQUAL        reduce using rule 33 (variable -> id_saver variable_array .)
    LTHAN           reduce using rule 33 (variable -> id_saver variable_array .)
    GTHAN           reduce using rule 33 (variable -> id_saver variable_array .)
    AND             reduce using rule 33 (variable -> id_saver variable_array .)
    OR              reduce using rule 33 (variable -> id_saver variable_array .)
    SEMICOLON       reduce using rule 33 (variable -> id_saver variable_array .)
    RPAREN          reduce using rule 33 (variable -> id_saver variable_array .)
    COMMA           reduce using rule 33 (variable -> id_saver variable_array .)
    RSQBRACKET      reduce using rule 33 (variable -> id_saver variable_array .)


state 93

    (34) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 145
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 94

    (35) variable_array -> empty .

    ASSIGN          reduce using rule 35 (variable_array -> empty .)
    MODULE          reduce using rule 35 (variable_array -> empty .)
    MULTIPLY        reduce using rule 35 (variable_array -> empty .)
    DIVIDE          reduce using rule 35 (variable_array -> empty .)
    PLUS            reduce using rule 35 (variable_array -> empty .)
    MINUS           reduce using rule 35 (variable_array -> empty .)
    EQUAL           reduce using rule 35 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 35 (variable_array -> empty .)
    LTHAN           reduce using rule 35 (variable_array -> empty .)
    GTHAN           reduce using rule 35 (variable_array -> empty .)
    AND             reduce using rule 35 (variable_array -> empty .)
    OR              reduce using rule 35 (variable_array -> empty .)
    SEMICOLON       reduce using rule 35 (variable_array -> empty .)
    RPAREN          reduce using rule 35 (variable_array -> empty .)
    COMMA           reduce using rule 35 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 35 (variable_array -> empty .)


state 95

    (71) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 146


state 96

    (70) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 147


state 97

    (52) body -> LBRACKET . inner_body RBRACKET
    (53) inner_body -> . statement inner_body
    (54) inner_body -> . empty
    (77) statement -> . assign
    (78) statement -> . condition
    (79) statement -> . print
    (80) statement -> . cycle
    (81) statement -> . call_function
    (2) empty -> .
    (55) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (59) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (62) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (68) cycle -> . for
    (69) cycle -> . while
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (33) variable -> . id_saver variable_array
    (71) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (70) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (3) id_saver -> . ID empty

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 76
    DO              shift and go to state 77

    inner_body                     shift and go to state 148
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73
    id_saver                       shift and go to state 75

state 98

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    RPAREN          shift and go to state 149


state 99

    (45) param -> s_type . id_saver add_params param2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 150

state 100

    (20) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 101

    (18) var_multiple -> var_type .

    FUNCTION        reduce using rule 18 (var_multiple -> var_type .)
    MAIN            reduce using rule 18 (var_multiple -> var_type .)
    IF              reduce using rule 18 (var_multiple -> var_type .)
    PRINT           reduce using rule 18 (var_multiple -> var_type .)
    ID              reduce using rule 18 (var_multiple -> var_type .)
    FOR             reduce using rule 18 (var_multiple -> var_type .)
    DO              reduce using rule 18 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 18 (var_multiple -> var_type .)
    RETURN          reduce using rule 18 (var_multiple -> var_type .)


state 102

    (19) var_multiple -> empty .

    FUNCTION        reduce using rule 19 (var_multiple -> empty .)
    MAIN            reduce using rule 19 (var_multiple -> empty .)
    IF              reduce using rule 19 (var_multiple -> empty .)
    PRINT           reduce using rule 19 (var_multiple -> empty .)
    ID              reduce using rule 19 (var_multiple -> empty .)
    FOR             reduce using rule 19 (var_multiple -> empty .)
    DO              reduce using rule 19 (var_multiple -> empty .)
    RBRACKET        reduce using rule 19 (var_multiple -> empty .)
    RETURN          reduce using rule 19 (var_multiple -> empty .)


state 103

    (21) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (21) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (22) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 54
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 151
    empty                          shift and go to state 55

state 104

    (24) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (18) var_multiple -> . var_type
    (19) var_multiple -> . empty
    (9) var_type -> . var_c_type
    (10) var_type -> . var_s_type
    (2) empty -> .
    (20) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (24) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (16) c_type -> . DATAFRAME
    (17) c_type -> . DATE
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 22
    var_multiple                   shift and go to state 152
    var_type                       shift and go to state 101
    empty                          shift and go to state 102
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21

state 105

    (25) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (28) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (29) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 47
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 153
    empty                          shift and go to state 48

state 106

    (30) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (32) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 59

    var_s_dimesions                shift and go to state 154

state 107

    (28) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 28 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 28 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 108

    (31) var_s_matrix -> empty .

    COMMA           reduce using rule 31 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 31 (var_s_matrix -> empty .)


state 109

    (133) factor -> variable .

    MODULE          reduce using rule 133 (factor -> variable .)
    MULTIPLY        reduce using rule 133 (factor -> variable .)
    DIVIDE          reduce using rule 133 (factor -> variable .)
    PLUS            reduce using rule 133 (factor -> variable .)
    MINUS           reduce using rule 133 (factor -> variable .)
    EQUAL           reduce using rule 133 (factor -> variable .)
    NOTEQUAL        reduce using rule 133 (factor -> variable .)
    LTHAN           reduce using rule 133 (factor -> variable .)
    GTHAN           reduce using rule 133 (factor -> variable .)
    AND             reduce using rule 133 (factor -> variable .)
    OR              reduce using rule 133 (factor -> variable .)
    SEMICOLON       reduce using rule 133 (factor -> variable .)
    RPAREN          reduce using rule 133 (factor -> variable .)
    COMMA           reduce using rule 133 (factor -> variable .)
    RSQBRACKET      reduce using rule 133 (factor -> variable .)


state 110

    (55) assign -> variable ASSIGN specialf_assign . SEMICOLON

    SEMICOLON       shift and go to state 155


state 111

    (56) specialf_assign -> exp .

    SEMICOLON       reduce using rule 56 (specialf_assign -> exp .)


state 112

    (57) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 57 (specialf_assign -> special_function .)


state 113

    (58) specialf_assign -> read .

    SEMICOLON       reduce using rule 58 (specialf_assign -> read .)


state 114

    (104) exp -> t_exp . exp_or
    (105) exp_or -> . OR exp
    (106) exp_or -> . empty
    (2) empty -> .

    OR              shift and go to state 157
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp_or                         shift and go to state 156
    empty                          shift and go to state 158

state 115

    (82) special_function -> exploration .

    SEMICOLON       reduce using rule 82 (special_function -> exploration .)


state 116

    (83) special_function -> financial_state .

    SEMICOLON       reduce using rule 83 (special_function -> financial_state .)


state 117

    (84) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 84 (special_function -> dummi_regression .)


state 118

    (85) special_function -> season_analysis .

    SEMICOLON       reduce using rule 85 (special_function -> season_analysis .)


state 119

    (86) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 86 (special_function -> trend_prediction .)


state 120

    (87) special_function -> model_predict .

    SEMICOLON       reduce using rule 87 (special_function -> model_predict .)


state 121

    (67) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 159


state 122

    (135) factor_exp -> LPAREN . exp RPAREN
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 160
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 123

    (107) t_exp -> expression . t_exp_and
    (108) t_exp_and -> . AND t_exp
    (109) t_exp_and -> . empty
    (2) empty -> .

    AND             shift and go to state 162
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    t_exp_and                      shift and go to state 161
    empty                          shift and go to state 163

state 124

    (88) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 164


state 125

    (93) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 165


state 126

    (96) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 166


state 127

    (94) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 167


state 128

    (95) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    LPAREN          shift and go to state 168


state 129

    (136) factor_cte -> CTE_INT .

    MODULE          reduce using rule 136 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 136 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 136 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 136 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 136 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 136 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 136 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 136 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 136 (factor_cte -> CTE_INT .)
    AND             reduce using rule 136 (factor_cte -> CTE_INT .)
    OR              reduce using rule 136 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 136 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 136 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 136 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 136 (factor_cte -> CTE_INT .)


state 130

    (103) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 169


state 131

    (110) expression -> m_exp . expression_comp
    (111) expression_comp -> . expression_comp_2 m_exp
    (112) expression_comp -> . empty
    (113) expression_comp_2 -> . EQUAL
    (114) expression_comp_2 -> . NOTEQUAL
    (115) expression_comp_2 -> . LTHAN
    (116) expression_comp_2 -> . GTHAN
    (2) empty -> .

    EQUAL           shift and go to state 173
    NOTEQUAL        shift and go to state 174
    LTHAN           shift and go to state 175
    GTHAN           shift and go to state 176
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    expression_comp                shift and go to state 170
    expression_comp_2              shift and go to state 171
    empty                          shift and go to state 172

state 132

    (117) m_exp -> term . m_exp_sr
    (118) m_exp_sr -> . m_exp_sr_2 m_exp
    (119) m_exp_sr -> . empty
    (120) m_exp_sr_2 -> . PLUS
    (121) m_exp_sr_2 -> . MINUS
    (2) empty -> .

    PLUS            shift and go to state 180
    MINUS           shift and go to state 181
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp_sr                       shift and go to state 177
    m_exp_sr_2                     shift and go to state 178
    empty                          shift and go to state 179

state 133

    (122) term -> sub_factor . term_pc
    (123) term_pc -> . term_pc_2 term
    (124) term_pc -> . empty
    (125) term_pc_2 -> . MULTIPLY
    (126) term_pc_2 -> . DIVIDE
    (127) term_pc_2 -> . MODULE
    (2) empty -> .

    MULTIPLY        shift and go to state 185
    DIVIDE          shift and go to state 186
    MODULE          shift and go to state 187
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    term_pc                        shift and go to state 182
    term_pc_2                      shift and go to state 183
    empty                          shift and go to state 184

state 134

    (128) sub_factor -> factor . sub_factor_pc
    (129) sub_factor_pc -> . MODULE sub_factor
    (130) sub_factor_pc -> . empty
    (2) empty -> .

  ! shift/reduce conflict for MODULE resolved as shift
    MODULE          shift and go to state 189
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

  ! MODULE          [ reduce using rule 2 (empty -> .) ]

    sub_factor_pc                  shift and go to state 188
    empty                          shift and go to state 190

state 135

    (131) factor -> factor_exp .

    MODULE          reduce using rule 131 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 131 (factor -> factor_exp .)
    DIVIDE          reduce using rule 131 (factor -> factor_exp .)
    PLUS            reduce using rule 131 (factor -> factor_exp .)
    MINUS           reduce using rule 131 (factor -> factor_exp .)
    EQUAL           reduce using rule 131 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 131 (factor -> factor_exp .)
    LTHAN           reduce using rule 131 (factor -> factor_exp .)
    GTHAN           reduce using rule 131 (factor -> factor_exp .)
    AND             reduce using rule 131 (factor -> factor_exp .)
    OR              reduce using rule 131 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 131 (factor -> factor_exp .)
    RPAREN          reduce using rule 131 (factor -> factor_exp .)
    COMMA           reduce using rule 131 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 131 (factor -> factor_exp .)


state 136

    (132) factor -> factor_cte .

    MODULE          reduce using rule 132 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 132 (factor -> factor_cte .)
    DIVIDE          reduce using rule 132 (factor -> factor_cte .)
    PLUS            reduce using rule 132 (factor -> factor_cte .)
    MINUS           reduce using rule 132 (factor -> factor_cte .)
    EQUAL           reduce using rule 132 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 132 (factor -> factor_cte .)
    LTHAN           reduce using rule 132 (factor -> factor_cte .)
    GTHAN           reduce using rule 132 (factor -> factor_cte .)
    AND             reduce using rule 132 (factor -> factor_cte .)
    OR              reduce using rule 132 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 132 (factor -> factor_cte .)
    RPAREN          reduce using rule 132 (factor -> factor_cte .)
    COMMA           reduce using rule 132 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 132 (factor -> factor_cte .)


state 137

    (134) factor -> call_function .

    MODULE          reduce using rule 134 (factor -> call_function .)
    MULTIPLY        reduce using rule 134 (factor -> call_function .)
    DIVIDE          reduce using rule 134 (factor -> call_function .)
    PLUS            reduce using rule 134 (factor -> call_function .)
    MINUS           reduce using rule 134 (factor -> call_function .)
    EQUAL           reduce using rule 134 (factor -> call_function .)
    NOTEQUAL        reduce using rule 134 (factor -> call_function .)
    LTHAN           reduce using rule 134 (factor -> call_function .)
    GTHAN           reduce using rule 134 (factor -> call_function .)
    AND             reduce using rule 134 (factor -> call_function .)
    OR              reduce using rule 134 (factor -> call_function .)
    SEMICOLON       reduce using rule 134 (factor -> call_function .)
    RPAREN          reduce using rule 134 (factor -> call_function .)
    COMMA           reduce using rule 134 (factor -> call_function .)
    RSQBRACKET      reduce using rule 134 (factor -> call_function .)


state 138

    (137) factor_cte -> CTE_FLOAT .

    MODULE          reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 137 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 137 (factor_cte -> CTE_FLOAT .)


state 139

    (138) factor_cte -> CTE_CHAR .

    MODULE          reduce using rule 138 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 138 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 138 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 138 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 138 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 138 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 138 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 138 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 138 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 138 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 138 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 138 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 138 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 138 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 138 (factor_cte -> CTE_CHAR .)


state 140

    (59) condition -> IF LPAREN exp . RPAREN body condition2 SEMICOLON

    RPAREN          shift and go to state 191


state 141

    (62) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 192


state 142

    (64) print_many -> print_type . print_many2
    (65) print_many2 -> . COMMA print_type print_many2
    (66) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 193
    empty                          shift and go to state 195

state 143

    (63) print_type -> exp .

    COMMA           reduce using rule 63 (print_type -> exp .)
    RPAREN          reduce using rule 63 (print_type -> exp .)


state 144

    (74) call_function -> ID LPAREN exp . exp_many RPAREN
    (75) exp_many -> . COMMA exp exp_many
    (76) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 197
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 196
    empty                          shift and go to state 198

state 145

    (34) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 199


state 146

    (71) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 200


state 147

    (70) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 201


state 148

    (52) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 202


state 149

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET program_function

    LBRACKET        shift and go to state 203


state 150

    (45) param -> s_type id_saver . add_params param2
    (48) add_params -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    add_params                     shift and go to state 204
    empty                          shift and go to state 205

state 151

    (21) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 21 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 152

    (24) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 153

    (25) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (27) add_s_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_s_var                      shift and go to state 206
    empty                          shift and go to state 57

state 154

    (30) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 207


state 155

    (55) assign -> variable ASSIGN specialf_assign SEMICOLON .

    IF              reduce using rule 55 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    PRINT           reduce using rule 55 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    ID              reduce using rule 55 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    FOR             reduce using rule 55 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    DO              reduce using rule 55 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RBRACKET        reduce using rule 55 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RETURN          reduce using rule 55 (assign -> variable ASSIGN specialf_assign SEMICOLON .)


state 156

    (104) exp -> t_exp exp_or .

    SEMICOLON       reduce using rule 104 (exp -> t_exp exp_or .)
    RPAREN          reduce using rule 104 (exp -> t_exp exp_or .)
    COMMA           reduce using rule 104 (exp -> t_exp exp_or .)
    RSQBRACKET      reduce using rule 104 (exp -> t_exp exp_or .)


state 157

    (105) exp_or -> OR . exp
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 208
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 158

    (106) exp_or -> empty .

    SEMICOLON       reduce using rule 106 (exp_or -> empty .)
    RPAREN          reduce using rule 106 (exp_or -> empty .)
    COMMA           reduce using rule 106 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 106 (exp_or -> empty .)


state 159

    (67) read -> READ LPAREN . variable RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 209
    id_saver                       shift and go to state 75

state 160

    (135) factor_exp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 210


state 161

    (107) t_exp -> expression t_exp_and .

    OR              reduce using rule 107 (t_exp -> expression t_exp_and .)
    SEMICOLON       reduce using rule 107 (t_exp -> expression t_exp_and .)
    RPAREN          reduce using rule 107 (t_exp -> expression t_exp_and .)
    COMMA           reduce using rule 107 (t_exp -> expression t_exp_and .)
    RSQBRACKET      reduce using rule 107 (t_exp -> expression t_exp_and .)


state 162

    (108) t_exp_and -> AND . t_exp
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    t_exp                          shift and go to state 211
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 163

    (109) t_exp_and -> empty .

    OR              reduce using rule 109 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 109 (t_exp_and -> empty .)
    RPAREN          reduce using rule 109 (t_exp_and -> empty .)
    COMMA           reduce using rule 109 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 109 (t_exp_and -> empty .)


state 164

    (88) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 212
    id_saver                       shift and go to state 75

state 165

    (93) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 213
    id_saver                       shift and go to state 75

state 166

    (96) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 214
    id_saver                       shift and go to state 75

state 167

    (94) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 215
    id_saver                       shift and go to state 75

state 168

    (95) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 216
    id_saver                       shift and go to state 75

state 169

    (103) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 217
    id_saver                       shift and go to state 75

state 170

    (110) expression -> m_exp expression_comp .

    AND             reduce using rule 110 (expression -> m_exp expression_comp .)
    OR              reduce using rule 110 (expression -> m_exp expression_comp .)
    SEMICOLON       reduce using rule 110 (expression -> m_exp expression_comp .)
    RPAREN          reduce using rule 110 (expression -> m_exp expression_comp .)
    COMMA           reduce using rule 110 (expression -> m_exp expression_comp .)
    RSQBRACKET      reduce using rule 110 (expression -> m_exp expression_comp .)


state 171

    (111) expression_comp -> expression_comp_2 . m_exp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    m_exp                          shift and go to state 218
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 172

    (112) expression_comp -> empty .

    AND             reduce using rule 112 (expression_comp -> empty .)
    OR              reduce using rule 112 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 112 (expression_comp -> empty .)
    RPAREN          reduce using rule 112 (expression_comp -> empty .)
    COMMA           reduce using rule 112 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 112 (expression_comp -> empty .)


state 173

    (113) expression_comp_2 -> EQUAL .

    LPAREN          reduce using rule 113 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 113 (expression_comp_2 -> EQUAL .)
    CTE_FLOAT       reduce using rule 113 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 113 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 113 (expression_comp_2 -> EQUAL .)


state 174

    (114) expression_comp_2 -> NOTEQUAL .

    LPAREN          reduce using rule 114 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 114 (expression_comp_2 -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 114 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 114 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 114 (expression_comp_2 -> NOTEQUAL .)


state 175

    (115) expression_comp_2 -> LTHAN .

    LPAREN          reduce using rule 115 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 115 (expression_comp_2 -> LTHAN .)
    CTE_FLOAT       reduce using rule 115 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 115 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 115 (expression_comp_2 -> LTHAN .)


state 176

    (116) expression_comp_2 -> GTHAN .

    LPAREN          reduce using rule 116 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 116 (expression_comp_2 -> GTHAN .)
    CTE_FLOAT       reduce using rule 116 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 116 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 116 (expression_comp_2 -> GTHAN .)


state 177

    (117) m_exp -> term m_exp_sr .

    EQUAL           reduce using rule 117 (m_exp -> term m_exp_sr .)
    NOTEQUAL        reduce using rule 117 (m_exp -> term m_exp_sr .)
    LTHAN           reduce using rule 117 (m_exp -> term m_exp_sr .)
    GTHAN           reduce using rule 117 (m_exp -> term m_exp_sr .)
    AND             reduce using rule 117 (m_exp -> term m_exp_sr .)
    OR              reduce using rule 117 (m_exp -> term m_exp_sr .)
    SEMICOLON       reduce using rule 117 (m_exp -> term m_exp_sr .)
    RPAREN          reduce using rule 117 (m_exp -> term m_exp_sr .)
    COMMA           reduce using rule 117 (m_exp -> term m_exp_sr .)
    RSQBRACKET      reduce using rule 117 (m_exp -> term m_exp_sr .)


state 178

    (118) m_exp_sr -> m_exp_sr_2 . m_exp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    m_exp                          shift and go to state 219
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 179

    (119) m_exp_sr -> empty .

    EQUAL           reduce using rule 119 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 119 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 119 (m_exp_sr -> empty .)
    GTHAN           reduce using rule 119 (m_exp_sr -> empty .)
    AND             reduce using rule 119 (m_exp_sr -> empty .)
    OR              reduce using rule 119 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 119 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 119 (m_exp_sr -> empty .)
    COMMA           reduce using rule 119 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 119 (m_exp_sr -> empty .)


state 180

    (120) m_exp_sr_2 -> PLUS .

    LPAREN          reduce using rule 120 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 120 (m_exp_sr_2 -> PLUS .)
    CTE_FLOAT       reduce using rule 120 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 120 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 120 (m_exp_sr_2 -> PLUS .)


state 181

    (121) m_exp_sr_2 -> MINUS .

    LPAREN          reduce using rule 121 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 121 (m_exp_sr_2 -> MINUS .)
    CTE_FLOAT       reduce using rule 121 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 121 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 121 (m_exp_sr_2 -> MINUS .)


state 182

    (122) term -> sub_factor term_pc .

    PLUS            reduce using rule 122 (term -> sub_factor term_pc .)
    MINUS           reduce using rule 122 (term -> sub_factor term_pc .)
    EQUAL           reduce using rule 122 (term -> sub_factor term_pc .)
    NOTEQUAL        reduce using rule 122 (term -> sub_factor term_pc .)
    LTHAN           reduce using rule 122 (term -> sub_factor term_pc .)
    GTHAN           reduce using rule 122 (term -> sub_factor term_pc .)
    AND             reduce using rule 122 (term -> sub_factor term_pc .)
    OR              reduce using rule 122 (term -> sub_factor term_pc .)
    SEMICOLON       reduce using rule 122 (term -> sub_factor term_pc .)
    RPAREN          reduce using rule 122 (term -> sub_factor term_pc .)
    COMMA           reduce using rule 122 (term -> sub_factor term_pc .)
    RSQBRACKET      reduce using rule 122 (term -> sub_factor term_pc .)


state 183

    (123) term_pc -> term_pc_2 . term
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    term                           shift and go to state 220
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 184

    (124) term_pc -> empty .

    PLUS            reduce using rule 124 (term_pc -> empty .)
    MINUS           reduce using rule 124 (term_pc -> empty .)
    EQUAL           reduce using rule 124 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 124 (term_pc -> empty .)
    LTHAN           reduce using rule 124 (term_pc -> empty .)
    GTHAN           reduce using rule 124 (term_pc -> empty .)
    AND             reduce using rule 124 (term_pc -> empty .)
    OR              reduce using rule 124 (term_pc -> empty .)
    SEMICOLON       reduce using rule 124 (term_pc -> empty .)
    RPAREN          reduce using rule 124 (term_pc -> empty .)
    COMMA           reduce using rule 124 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 124 (term_pc -> empty .)


state 185

    (125) term_pc_2 -> MULTIPLY .

    LPAREN          reduce using rule 125 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 125 (term_pc_2 -> MULTIPLY .)
    CTE_FLOAT       reduce using rule 125 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 125 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 125 (term_pc_2 -> MULTIPLY .)


state 186

    (126) term_pc_2 -> DIVIDE .

    LPAREN          reduce using rule 126 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 126 (term_pc_2 -> DIVIDE .)
    CTE_FLOAT       reduce using rule 126 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 126 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 126 (term_pc_2 -> DIVIDE .)


state 187

    (127) term_pc_2 -> MODULE .

    LPAREN          reduce using rule 127 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 127 (term_pc_2 -> MODULE .)
    CTE_FLOAT       reduce using rule 127 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 127 (term_pc_2 -> MODULE .)
    ID              reduce using rule 127 (term_pc_2 -> MODULE .)


state 188

    (128) sub_factor -> factor sub_factor_pc .

    MULTIPLY        reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    DIVIDE          reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    MODULE          reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    PLUS            reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    MINUS           reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    EQUAL           reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    NOTEQUAL        reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    LTHAN           reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    GTHAN           reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    AND             reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    OR              reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    SEMICOLON       reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    RPAREN          reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    COMMA           reduce using rule 128 (sub_factor -> factor sub_factor_pc .)
    RSQBRACKET      reduce using rule 128 (sub_factor -> factor sub_factor_pc .)


state 189

    (129) sub_factor_pc -> MODULE . sub_factor
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    sub_factor                     shift and go to state 221
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 190

    (130) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 130 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 130 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 130 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 130 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 130 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 130 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 130 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 130 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 130 (sub_factor_pc -> empty .)
    AND             reduce using rule 130 (sub_factor_pc -> empty .)
    OR              reduce using rule 130 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 130 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 130 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 130 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 130 (sub_factor_pc -> empty .)


state 191

    (59) condition -> IF LPAREN exp RPAREN . body condition2 SEMICOLON
    (52) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 97

    body                           shift and go to state 222

state 192

    (62) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 223


state 193

    (64) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 64 (print_many -> print_type print_many2 .)


state 194

    (65) print_many2 -> COMMA . print_type print_many2
    (63) print_type -> . exp
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    print_type                     shift and go to state 224
    exp                            shift and go to state 143
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 195

    (66) print_many2 -> empty .

    RPAREN          reduce using rule 66 (print_many2 -> empty .)


state 196

    (74) call_function -> ID LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 225


state 197

    (75) exp_many -> COMMA . exp exp_many
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 226
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 198

    (76) exp_many -> empty .

    RPAREN          reduce using rule 76 (exp_many -> empty .)


state 199

    (34) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (36) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (37) variable_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 227
    ASSIGN          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_matrix                shift and go to state 228
    empty                          shift and go to state 229

state 200

    (71) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (72) for_end -> . CTE_INT
    (73) for_end -> . ID

    CTE_INT         shift and go to state 232
    ID              shift and go to state 230

    for_end                        shift and go to state 231

state 201

    (70) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 233
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 202

    (52) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 52 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 52 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 52 (body -> LBRACKET inner_body RBRACKET .)


state 203

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET program_function
    (11) program_vars -> . VAR var_type
    (12) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 234
    empty                          shift and go to state 11

state 204

    (45) param -> s_type id_saver add_params . param2
    (46) param2 -> . COMMA s_type id_saver add_params param2
    (47) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 235
    empty                          shift and go to state 237

state 205

    (48) add_params -> empty .

    COMMA           reduce using rule 48 (add_params -> empty .)
    RPAREN          reduce using rule 48 (add_params -> empty .)


state 206

    (25) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (25) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (26) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 82
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 238
    empty                          shift and go to state 83

state 207

    (30) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 30 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 30 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 208

    (105) exp_or -> OR exp .

    SEMICOLON       reduce using rule 105 (exp_or -> OR exp .)
    RPAREN          reduce using rule 105 (exp_or -> OR exp .)
    COMMA           reduce using rule 105 (exp_or -> OR exp .)
    RSQBRACKET      reduce using rule 105 (exp_or -> OR exp .)


state 209

    (67) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 239


state 210

    (135) factor_exp -> LPAREN exp RPAREN .

    MODULE          reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    LTHAN           reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    GTHAN           reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)
    RSQBRACKET      reduce using rule 135 (factor_exp -> LPAREN exp RPAREN .)


state 211

    (108) t_exp_and -> AND t_exp .

    OR              reduce using rule 108 (t_exp_and -> AND t_exp .)
    SEMICOLON       reduce using rule 108 (t_exp_and -> AND t_exp .)
    RPAREN          reduce using rule 108 (t_exp_and -> AND t_exp .)
    COMMA           reduce using rule 108 (t_exp_and -> AND t_exp .)
    RSQBRACKET      reduce using rule 108 (t_exp_and -> AND t_exp .)


state 212

    (88) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (89) explore_var -> . COMMA variable
    (90) explore_var -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 241
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    explore_var                    shift and go to state 240
    empty                          shift and go to state 242

state 213

    (93) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 243


state 214

    (96) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 244


state 215

    (94) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 245


state 216

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 246


state 217

    (103) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 247


state 218

    (111) expression_comp -> expression_comp_2 m_exp .

    AND             reduce using rule 111 (expression_comp -> expression_comp_2 m_exp .)
    OR              reduce using rule 111 (expression_comp -> expression_comp_2 m_exp .)
    SEMICOLON       reduce using rule 111 (expression_comp -> expression_comp_2 m_exp .)
    RPAREN          reduce using rule 111 (expression_comp -> expression_comp_2 m_exp .)
    COMMA           reduce using rule 111 (expression_comp -> expression_comp_2 m_exp .)
    RSQBRACKET      reduce using rule 111 (expression_comp -> expression_comp_2 m_exp .)


state 219

    (118) m_exp_sr -> m_exp_sr_2 m_exp .

    EQUAL           reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GTHAN           reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 118 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 220

    (123) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 123 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 123 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 123 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 123 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 123 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 123 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 123 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 123 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 123 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 123 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 123 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 123 (term_pc -> term_pc_2 term .)


state 221

    (129) sub_factor_pc -> MODULE sub_factor .

    MULTIPLY        reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    DIVIDE          reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    MODULE          reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    PLUS            reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    MINUS           reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    EQUAL           reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    NOTEQUAL        reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    LTHAN           reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    GTHAN           reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    AND             reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    OR              reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    SEMICOLON       reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    RPAREN          reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    COMMA           reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)
    RSQBRACKET      reduce using rule 129 (sub_factor_pc -> MODULE sub_factor .)


state 222

    (59) condition -> IF LPAREN exp RPAREN body . condition2 SEMICOLON
    (60) condition2 -> . ELSE body
    (61) condition2 -> . empty
    (2) empty -> .

    ELSE            shift and go to state 249
    SEMICOLON       reduce using rule 2 (empty -> .)

    condition2                     shift and go to state 248
    empty                          shift and go to state 250

state 223

    (62) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 62 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 62 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 62 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 62 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 62 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 62 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 224

    (65) print_many2 -> COMMA print_type . print_many2
    (65) print_many2 -> . COMMA print_type print_many2
    (66) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 251
    empty                          shift and go to state 195

state 225

    (74) call_function -> ID LPAREN exp exp_many RPAREN .

    IF              reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MODULE          reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 74 (call_function -> ID LPAREN exp exp_many RPAREN .)


state 226

    (75) exp_many -> COMMA exp . exp_many
    (75) exp_many -> . COMMA exp exp_many
    (76) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 197
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 252
    empty                          shift and go to state 198

state 227

    (36) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 253
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 228

    (34) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 34 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 229

    (37) variable_matrix -> empty .

    ASSIGN          reduce using rule 37 (variable_matrix -> empty .)
    MODULE          reduce using rule 37 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 37 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 37 (variable_matrix -> empty .)
    PLUS            reduce using rule 37 (variable_matrix -> empty .)
    MINUS           reduce using rule 37 (variable_matrix -> empty .)
    EQUAL           reduce using rule 37 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 37 (variable_matrix -> empty .)
    LTHAN           reduce using rule 37 (variable_matrix -> empty .)
    GTHAN           reduce using rule 37 (variable_matrix -> empty .)
    AND             reduce using rule 37 (variable_matrix -> empty .)
    OR              reduce using rule 37 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 37 (variable_matrix -> empty .)
    RPAREN          reduce using rule 37 (variable_matrix -> empty .)
    COMMA           reduce using rule 37 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 37 (variable_matrix -> empty .)


state 230

    (73) for_end -> ID .

    RPAREN          reduce using rule 73 (for_end -> ID .)


state 231

    (71) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 254


state 232

    (72) for_end -> CTE_INT .

    RPAREN          reduce using rule 72 (for_end -> CTE_INT .)


state 233

    (70) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 255


state 234

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET program_function
    (53) inner_body -> . statement inner_body
    (54) inner_body -> . empty
    (77) statement -> . assign
    (78) statement -> . condition
    (79) statement -> . print
    (80) statement -> . cycle
    (81) statement -> . call_function
    (2) empty -> .
    (55) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (59) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (62) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (68) cycle -> . for
    (69) cycle -> . while
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (33) variable -> . id_saver variable_array
    (71) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (70) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (3) id_saver -> . ID empty

    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 76
    DO              shift and go to state 77

    id_saver                       shift and go to state 75
    inner_body                     shift and go to state 256
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73

state 235

    (45) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 45 (param -> s_type id_saver add_params param2 .)


state 236

    (46) param2 -> COMMA . s_type id_saver add_params param2
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 257

state 237

    (47) param2 -> empty .

    RPAREN          reduce using rule 47 (param2 -> empty .)


state 238

    (25) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 25 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 239

    (67) read -> READ LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 67 (read -> READ LPAREN variable RPAREN .)


state 240

    (88) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (91) explor_cte -> . COMMA CTE_INT
    (92) explor_cte -> . empty
    (2) empty -> .

    COMMA           shift and go to state 259
    RPAREN          reduce using rule 2 (empty -> .)

    explor_cte                     shift and go to state 258
    empty                          shift and go to state 260

state 241

    (89) explore_var -> COMMA . variable
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 261
    id_saver                       shift and go to state 75

state 242

    (90) explore_var -> empty .

    COMMA           reduce using rule 90 (explore_var -> empty .)
    RPAREN          reduce using rule 90 (explore_var -> empty .)


state 243

    (93) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 262
    id_saver                       shift and go to state 75

state 244

    (96) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 263
    id_saver                       shift and go to state 75

state 245

    (94) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 94 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 246

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 264


state 247

    (103) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 265
    id_saver                       shift and go to state 75

state 248

    (59) condition -> IF LPAREN exp RPAREN body condition2 . SEMICOLON

    SEMICOLON       shift and go to state 266


state 249

    (60) condition2 -> ELSE . body
    (52) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 97

    body                           shift and go to state 267

state 250

    (61) condition2 -> empty .

    SEMICOLON       reduce using rule 61 (condition2 -> empty .)


state 251

    (65) print_many2 -> COMMA print_type print_many2 .

    RPAREN          reduce using rule 65 (print_many2 -> COMMA print_type print_many2 .)


state 252

    (75) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 75 (exp_many -> COMMA exp exp_many .)


state 253

    (36) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 268


state 254

    (71) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (52) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 97

    body                           shift and go to state 269

state 255

    (70) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 270


state 256

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET program_function
    (49) return -> . RETURN exp SEMICOLON
    (50) return -> . empty
    (2) empty -> .

    RETURN          shift and go to state 272
    RBRACKET        reduce using rule 2 (empty -> .)

    return                         shift and go to state 271
    empty                          shift and go to state 273

state 257

    (46) param2 -> COMMA s_type . id_saver add_params param2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 274

state 258

    (88) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 275


state 259

    (91) explor_cte -> COMMA . CTE_INT

    CTE_INT         shift and go to state 276


state 260

    (92) explor_cte -> empty .

    RPAREN          reduce using rule 92 (explor_cte -> empty .)


state 261

    (89) explore_var -> COMMA variable .

    COMMA           reduce using rule 89 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 89 (explore_var -> COMMA variable .)


state 262

    (93) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 277


state 263

    (96) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (97) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (98) dr_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 278
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    dr_array                       shift and go to state 279
    empty                          shift and go to state 280

state 264

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT . COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 281


state 265

    (103) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 282


state 266

    (59) condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .

    IF              reduce using rule 59 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    PRINT           reduce using rule 59 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ID              reduce using rule 59 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FOR             reduce using rule 59 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DO              reduce using rule 59 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RBRACKET        reduce using rule 59 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RETURN          reduce using rule 59 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)


state 267

    (60) condition2 -> ELSE body .

    SEMICOLON       reduce using rule 60 (condition2 -> ELSE body .)


state 268

    (36) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MODULE          reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 36 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 269

    (71) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 283


state 270

    (70) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 70 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 70 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 70 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 70 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 70 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 70 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 70 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 271

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET program_function

    RBRACKET        shift and go to state 284


state 272

    (49) return -> RETURN . exp SEMICOLON
    (104) exp -> . t_exp exp_or
    (107) t_exp -> . expression t_exp_and
    (110) expression -> . m_exp expression_comp
    (117) m_exp -> . term m_exp_sr
    (122) term -> . sub_factor term_pc
    (128) sub_factor -> . factor sub_factor_pc
    (131) factor -> . factor_exp
    (132) factor -> . factor_cte
    (133) factor -> . variable
    (134) factor -> . call_function
    (135) factor_exp -> . LPAREN exp RPAREN
    (136) factor_cte -> . CTE_INT
    (137) factor_cte -> . CTE_FLOAT
    (138) factor_cte -> . CTE_CHAR
    (33) variable -> . id_saver variable_array
    (74) call_function -> . ID LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty

    LPAREN          shift and go to state 122
    CTE_INT         shift and go to state 129
    CTE_FLOAT       shift and go to state 138
    CTE_CHAR        shift and go to state 139
    ID              shift and go to state 74

    exp                            shift and go to state 285
    t_exp                          shift and go to state 114
    expression                     shift and go to state 123
    m_exp                          shift and go to state 131
    term                           shift and go to state 132
    sub_factor                     shift and go to state 133
    factor                         shift and go to state 134
    factor_exp                     shift and go to state 135
    factor_cte                     shift and go to state 136
    variable                       shift and go to state 109
    call_function                  shift and go to state 137
    id_saver                       shift and go to state 75

state 273

    (50) return -> empty .

    RBRACKET        reduce using rule 50 (return -> empty .)


state 274

    (46) param2 -> COMMA s_type id_saver . add_params param2
    (48) add_params -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    add_params                     shift and go to state 286
    empty                          shift and go to state 205

state 275

    (88) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 88 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 276

    (91) explor_cte -> COMMA CTE_INT .

    RPAREN          reduce using rule 91 (explor_cte -> COMMA CTE_INT .)


state 277

    (93) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 287
    id_saver                       shift and go to state 75

state 278

    (97) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 288


state 279

    (96) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (101) dr_int -> . COMMA CTE_INT
    (102) dr_int -> . empty
    (2) empty -> .

    COMMA           shift and go to state 289
    RPAREN          reduce using rule 2 (empty -> .)

    dr_int                         shift and go to state 290
    empty                          shift and go to state 291

state 280

    (98) dr_array -> empty .

    COMMA           reduce using rule 98 (dr_array -> empty .)
    RPAREN          reduce using rule 98 (dr_array -> empty .)


state 281

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA . CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 292


state 282

    (103) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 293


state 283

    (71) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 71 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 71 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 71 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 71 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 71 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 71 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 71 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 284

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET . program_function
    (38) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (39) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 294
    empty                          shift and go to state 17

state 285

    (49) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 295


state 286

    (46) param2 -> COMMA s_type id_saver add_params . param2
    (46) param2 -> . COMMA s_type id_saver add_params param2
    (47) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 296
    empty                          shift and go to state 237

state 287

    (93) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 297


state 288

    (97) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 298


state 289

    (101) dr_int -> COMMA . CTE_INT

    CTE_INT         shift and go to state 299


state 290

    (96) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 300


state 291

    (102) dr_int -> empty .

    RPAREN          reduce using rule 102 (dr_int -> empty .)


state 292

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT . COMMA CTE_INT RPAREN

    COMMA           shift and go to state 301


state 293

    (103) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 103 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 294

    (38) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .

    MAIN            reduce using rule 38 (program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .)


state 295

    (49) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 49 (return -> RETURN exp SEMICOLON .)


state 296

    (46) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 46 (param2 -> COMMA s_type id_saver add_params param2 .)


state 297

    (93) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (33) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 302
    id_saver                       shift and go to state 75

state 298

    (97) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (99) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (100) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 303
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 304
    empty                          shift and go to state 305

state 299

    (101) dr_int -> COMMA CTE_INT .

    RPAREN          reduce using rule 101 (dr_int -> COMMA CTE_INT .)


state 300

    (96) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 96 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 301

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA . CTE_INT RPAREN

    CTE_INT         shift and go to state 306


state 302

    (93) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 307


state 303

    (99) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 308


state 304

    (97) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 309


state 305

    (100) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 100 (dr_array_mp -> empty .)


state 306

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT . RPAREN

    RPAREN          shift and go to state 310


state 307

    (93) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 93 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 308

    (99) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (99) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (100) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 303
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 311
    empty                          shift and go to state 305

state 309

    (97) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 97 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 97 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 310

    (95) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .

    SEMICOLON       reduce using rule 95 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)


state 311

    (99) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 99 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MODULE in state 134 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 212 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 263 resolved as shift
