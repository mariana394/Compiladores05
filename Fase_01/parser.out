Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END
Rule 2     empty -> <empty>
Rule 3     program_libraries -> from_library import_library
Rule 4     program_libraries -> empty
Rule 5     from_library -> FROM ID
Rule 6     from_library -> empty
Rule 7     import_library -> IMPORT ID AS ID program_libraries
Rule 8     var_type -> var_c_type
Rule 9     var_type -> var_s_type
Rule 10    program_vars -> VAR var_type
Rule 11    program_vars -> empty
Rule 12    var_cte -> ID
Rule 13    var_cte -> CTE_INT
Rule 14    var_cte -> CTE_FLOAT
Rule 15    var_cte -> CTE_CHAR
Rule 16    s_type -> INT
Rule 17    s_type -> FLOAT
Rule 18    s_type -> CHAR
Rule 19    c_type -> DATAFRAME
Rule 20    c_type -> DATE
Rule 21    var_multiple -> var_type
Rule 22    var_multiple -> empty
Rule 23    var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple
Rule 24    var_c_type2 -> COMMA ID var_c_type2
Rule 25    var_c_type2 -> empty
Rule 26    var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
Rule 27    var_s_type2 -> COMMA ID var_s_array var_s_type2
Rule 28    var_s_type2 -> empty
Rule 29    var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
Rule 30    var_s_array -> empty
Rule 31    var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET
Rule 32    var_s_matrix -> empty
Rule 33    variable -> ID variable_array
Rule 34    variable -> empty
Rule 35    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 36    variable_array -> empty
Rule 37    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 38    variable_matrix -> empty
Rule 39    program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET inner_body return RBRACKET
Rule 40    function_type -> s_type
Rule 41    function_type -> VOID
Rule 42    param -> s_type ID param2
Rule 43    param2 -> COMMA s_type ID param2
Rule 44    param2 -> empty
Rule 45    return -> RETURN var_cte SEMICOLON
Rule 46    return -> empty
Rule 47    program_main -> MAIN LBRACKET inner_body RBRACKET
Rule 48    body -> LBRACKET inner_body RBRACKET
Rule 49    inner_body -> program_vars inner_body2
Rule 50    inner_body2 -> statement inner_body2
Rule 51    inner_body2 -> empty
Rule 52    assign -> variable ASSIGN exp SEMICOLON
Rule 53    condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON
Rule 54    condition2 -> ELSE body
Rule 55    condition2 -> empty
Rule 56    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 57    print_type -> ID
Rule 58    print_type -> CTE_CHAR
Rule 59    print_many -> print_type print_many2
Rule 60    print_many2 -> COMMA print_type print_many2
Rule 61    print_many2 -> empty
Rule 62    read -> READ LPAREN variable RPAREN
Rule 63    cycle -> for
Rule 64    cycle -> while
Rule 65    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 66    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 67    for_end -> CTE_INT
Rule 68    for_end -> ID
Rule 69    call_function -> ID LPAREN exp exp_many RPAREN
Rule 70    exp_many -> COMMA exp exp_many
Rule 71    exp_many -> empty
Rule 72    statement -> assign
Rule 73    statement -> condition
Rule 74    statement -> print
Rule 75    statement -> read
Rule 76    statement -> cycle
Rule 77    statement -> call_function
Rule 78    statement -> special_function
Rule 79    special_function -> exploration
Rule 80    special_function -> financial_state
Rule 81    special_function -> dummi_regression
Rule 82    special_function -> season_analysis
Rule 83    special_function -> trend_prediction
Rule 84    special_function -> model_predict
Rule 85    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 86    explore_var -> COMMA variable
Rule 87    explore_var -> empty
Rule 88    explor_cte -> COMMA CTE_INT
Rule 89    explor_cte -> empty
Rule 90    financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 91    season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 92    trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
Rule 93    dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 94    dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 95    dr_array -> empty
Rule 96    dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 97    dr_array_mp -> empty
Rule 98    dr_int -> COMMA CTE_INT
Rule 99    dr_int -> empty
Rule 100   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 101   exp -> t_exp exp_or
Rule 102   exp_or -> OR exp
Rule 103   exp_or -> empty
Rule 104   t_exp -> expression t_exp_and
Rule 105   t_exp_and -> AND t_exp
Rule 106   t_exp_and -> empty
Rule 107   expression -> m_exp expression_comp
Rule 108   expression_comp -> expression_comp_2 m_exp
Rule 109   expression_comp -> empty
Rule 110   expression_comp_2 -> EQUAL
Rule 111   expression_comp_2 -> NOTEQUAL
Rule 112   expression_comp_2 -> LTHAN
Rule 113   expression_comp_2 -> GTHAN
Rule 114   m_exp -> term m_exp_sr
Rule 115   m_exp_sr -> m_exp_sr_2 m_exp
Rule 116   m_exp_sr -> empty
Rule 117   m_exp_sr_2 -> PLUS
Rule 118   m_exp_sr_2 -> MINUS
Rule 119   term -> factor term_pc
Rule 120   term_pc -> term_pc_2 term
Rule 121   term_pc -> empty
Rule 122   term_pc_2 -> MULTIPLY
Rule 123   term_pc_2 -> DIVIDE
Rule 124   factor -> factor_exp
Rule 125   factor -> factor_cte
Rule 126   factor -> variable
Rule 127   factor -> call_function
Rule 128   factor_exp -> LPAREN exp RPAREN
Rule 129   factor_cte -> CTE_INT
Rule 130   factor_cte -> CTE_FLOAT
Rule 131   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 105
AS                   : 7
ASSIGN               : 52
CHAR                 : 18
COLON                : 
COMMA                : 24 27 43 60 70 86 88 90 90 90 92 92 92 93 94 96 98 100 100
CTE_CHAR             : 15 58 94 96 131
CTE_FLOAT            : 14 130
CTE_INT              : 13 29 31 67 88 92 92 92 98 129
DATAFRAME            : 19
DATE                 : 20
DIVIDE               : 123
DO                   : 65
DUMMI_REGRESSION     : 93
ELSE                 : 54
END                  : 1
EQUAL                : 110
EXPLORATION          : 85
FINANCIAL_STATE      : 90
FLOAT                : 17
FOR                  : 66
FROM                 : 5
FUNCTION             : 39
GTHAN                : 113
ID                   : 1 5 7 7 12 23 24 26 27 33 39 42 43 57 66 68 69
IF                   : 53
IMPORT               : 7
INT                  : 16
LBRACKET             : 39 47 48
LPAREN               : 39 53 56 62 65 66 69 85 90 91 92 93 100 128
LSQBRACKET           : 29 31 35 37 94
LTHAN                : 112
MAIN                 : 47
MINUS                : 118
MODEL_PREDICT        : 100
MULTIPLY             : 122
NOTEQUAL             : 111
OR                   : 102
PLUS                 : 117
PRINT                : 56
PROGRAM              : 1
RBRACKET             : 39 47 48
READ                 : 62
RETURN               : 45
RPAREN               : 39 53 56 62 65 66 69 85 90 91 92 93 100 128
RSQBRACKET           : 29 31 35 37 94
SEASON_ANALYSIS      : 91
SEMICOLON            : 1 23 26 45 52 53 56 65 66
TO                   : 66
TREND_PREDICTION     : 92
VAR                  : 10
VOID                 : 41
WHILE                : 65
error                : 

Nonterminals, with rules where they appear

assign               : 72
body                 : 53 54 65 66
c_type               : 23
call_function        : 77 127
condition            : 73
condition2           : 53
cycle                : 76
dr_array             : 93
dr_array_mp          : 94 96
dr_int               : 93
dummi_regression     : 81
empty                : 4 6 11 22 25 28 30 32 34 36 38 44 46 51 55 61 71 87 89 95 97 99 103 106 109 116 121
exp                  : 35 37 52 53 65 69 70 102 128
exp_many             : 69 70
exp_or               : 101
explor_cte           : 85
exploration          : 79
explore_var          : 85
expression           : 104
expression_comp      : 107
expression_comp_2    : 108
factor               : 119
factor_cte           : 125
factor_exp           : 124
financial_state      : 80
for                  : 63
for_end              : 66
from_library         : 3
function_type        : 39
import_library       : 3
inner_body           : 39 47 48
inner_body2          : 49 50
m_exp                : 107 108 115
m_exp_sr             : 114
m_exp_sr_2           : 115
model_predict        : 84
param                : 39
param2               : 42 43
print                : 74
print_many           : 56
print_many2          : 59 60
print_type           : 59 60
program              : 0
program_function     : 1
program_libraries    : 1 7
program_main         : 1
program_vars         : 1 49
read                 : 75
return               : 39
s_type               : 26 40 42 43
season_analysis      : 82
special_function     : 78
statement            : 50
t_exp                : 101 105
t_exp_and            : 104
term                 : 114 120
term_pc              : 119
term_pc_2            : 120
trend_prediction     : 83
var_c_type           : 8
var_c_type2          : 23 24
var_cte              : 45
var_multiple         : 23 26
var_s_array          : 26 27
var_s_matrix         : 29
var_s_type           : 9
var_s_type2          : 26 27
var_type             : 10 21
variable             : 52 62 85 86 90 90 90 90 91 92 93 93 100 100 126
variable_array       : 33
variable_matrix      : 35
while                : 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main END
    (3) program_libraries -> . from_library import_library
    (4) program_libraries -> . empty
    (5) from_library -> . FROM ID
    (6) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main END
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (3) program_libraries -> from_library . import_library
    (7) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (4) program_libraries -> empty .
    (6) from_library -> empty .

    VAR             reduce using rule 4 (program_libraries -> empty .)
    FUNCTION        reduce using rule 4 (program_libraries -> empty .)
    IMPORT          reduce using rule 6 (from_library -> empty .)


state 8

    (5) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main END
    (39) program_function -> . FUNCTION function_type ID LPAREN param RPAREN LBRACKET inner_body return RBRACKET

    FUNCTION        shift and go to state 16

    program_function               shift and go to state 15

state 10

    (10) program_vars -> VAR . var_type
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (23) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (26) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (19) c_type -> . DATAFRAME
    (20) c_type -> . DATE
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    DATAFRAME       shift and go to state 22
    DATE            shift and go to state 23
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    var_type                       shift and go to state 17
    var_c_type                     shift and go to state 18
    var_s_type                     shift and go to state 19
    c_type                         shift and go to state 20
    s_type                         shift and go to state 21

state 11

    (11) program_vars -> empty .

    FUNCTION        reduce using rule 11 (program_vars -> empty .)
    IF              reduce using rule 11 (program_vars -> empty .)
    PRINT           reduce using rule 11 (program_vars -> empty .)
    READ            reduce using rule 11 (program_vars -> empty .)
    ID              reduce using rule 11 (program_vars -> empty .)
    FOR             reduce using rule 11 (program_vars -> empty .)
    DO              reduce using rule 11 (program_vars -> empty .)
    EXPLORATION     reduce using rule 11 (program_vars -> empty .)
    FINANCIAL_STATE reduce using rule 11 (program_vars -> empty .)
    DUMMI_REGRESSION reduce using rule 11 (program_vars -> empty .)
    SEASON_ANALYSIS reduce using rule 11 (program_vars -> empty .)
    TREND_PREDICTION reduce using rule 11 (program_vars -> empty .)
    MODEL_PREDICT   reduce using rule 11 (program_vars -> empty .)
    ASSIGN          reduce using rule 11 (program_vars -> empty .)
    RBRACKET        reduce using rule 11 (program_vars -> empty .)
    RETURN          reduce using rule 11 (program_vars -> empty .)


state 12

    (3) program_libraries -> from_library import_library .

    VAR             reduce using rule 3 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 3 (program_libraries -> from_library import_library .)


state 13

    (7) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 27


state 14

    (5) from_library -> FROM ID .

    IMPORT          reduce using rule 5 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main END
    (47) program_main -> . MAIN LBRACKET inner_body RBRACKET

    MAIN            shift and go to state 29

    program_main                   shift and go to state 28

state 16

    (39) program_function -> FUNCTION . function_type ID LPAREN param RPAREN LBRACKET inner_body return RBRACKET
    (40) function_type -> . s_type
    (41) function_type -> . VOID
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    VOID            shift and go to state 32
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    function_type                  shift and go to state 30
    s_type                         shift and go to state 31

state 17

    (10) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 10 (program_vars -> VAR var_type .)
    IF              reduce using rule 10 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 10 (program_vars -> VAR var_type .)
    READ            reduce using rule 10 (program_vars -> VAR var_type .)
    ID              reduce using rule 10 (program_vars -> VAR var_type .)
    FOR             reduce using rule 10 (program_vars -> VAR var_type .)
    DO              reduce using rule 10 (program_vars -> VAR var_type .)
    EXPLORATION     reduce using rule 10 (program_vars -> VAR var_type .)
    FINANCIAL_STATE reduce using rule 10 (program_vars -> VAR var_type .)
    DUMMI_REGRESSION reduce using rule 10 (program_vars -> VAR var_type .)
    SEASON_ANALYSIS reduce using rule 10 (program_vars -> VAR var_type .)
    TREND_PREDICTION reduce using rule 10 (program_vars -> VAR var_type .)
    MODEL_PREDICT   reduce using rule 10 (program_vars -> VAR var_type .)
    ASSIGN          reduce using rule 10 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 10 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 10 (program_vars -> VAR var_type .)


state 18

    (8) var_type -> var_c_type .

    FUNCTION        reduce using rule 8 (var_type -> var_c_type .)
    IF              reduce using rule 8 (var_type -> var_c_type .)
    PRINT           reduce using rule 8 (var_type -> var_c_type .)
    READ            reduce using rule 8 (var_type -> var_c_type .)
    ID              reduce using rule 8 (var_type -> var_c_type .)
    FOR             reduce using rule 8 (var_type -> var_c_type .)
    DO              reduce using rule 8 (var_type -> var_c_type .)
    EXPLORATION     reduce using rule 8 (var_type -> var_c_type .)
    FINANCIAL_STATE reduce using rule 8 (var_type -> var_c_type .)
    DUMMI_REGRESSION reduce using rule 8 (var_type -> var_c_type .)
    SEASON_ANALYSIS reduce using rule 8 (var_type -> var_c_type .)
    TREND_PREDICTION reduce using rule 8 (var_type -> var_c_type .)
    MODEL_PREDICT   reduce using rule 8 (var_type -> var_c_type .)
    ASSIGN          reduce using rule 8 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 8 (var_type -> var_c_type .)
    RETURN          reduce using rule 8 (var_type -> var_c_type .)


state 19

    (9) var_type -> var_s_type .

    FUNCTION        reduce using rule 9 (var_type -> var_s_type .)
    IF              reduce using rule 9 (var_type -> var_s_type .)
    PRINT           reduce using rule 9 (var_type -> var_s_type .)
    READ            reduce using rule 9 (var_type -> var_s_type .)
    ID              reduce using rule 9 (var_type -> var_s_type .)
    FOR             reduce using rule 9 (var_type -> var_s_type .)
    DO              reduce using rule 9 (var_type -> var_s_type .)
    EXPLORATION     reduce using rule 9 (var_type -> var_s_type .)
    FINANCIAL_STATE reduce using rule 9 (var_type -> var_s_type .)
    DUMMI_REGRESSION reduce using rule 9 (var_type -> var_s_type .)
    SEASON_ANALYSIS reduce using rule 9 (var_type -> var_s_type .)
    TREND_PREDICTION reduce using rule 9 (var_type -> var_s_type .)
    MODEL_PREDICT   reduce using rule 9 (var_type -> var_s_type .)
    ASSIGN          reduce using rule 9 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 9 (var_type -> var_s_type .)
    RETURN          reduce using rule 9 (var_type -> var_s_type .)


state 20

    (23) var_c_type -> c_type . ID var_c_type2 SEMICOLON var_multiple

    ID              shift and go to state 33


state 21

    (26) var_s_type -> s_type . ID var_s_array var_s_type2 SEMICOLON var_multiple

    ID              shift and go to state 34


state 22

    (19) c_type -> DATAFRAME .

    ID              reduce using rule 19 (c_type -> DATAFRAME .)


state 23

    (20) c_type -> DATE .

    ID              reduce using rule 20 (c_type -> DATE .)


state 24

    (16) s_type -> INT .

    ID              reduce using rule 16 (s_type -> INT .)


state 25

    (17) s_type -> FLOAT .

    ID              reduce using rule 17 (s_type -> FLOAT .)


state 26

    (18) s_type -> CHAR .

    ID              reduce using rule 18 (s_type -> CHAR .)


state 27

    (7) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 35


state 28

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . END

    END             shift and go to state 36


state 29

    (47) program_main -> MAIN . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 37


state 30

    (39) program_function -> FUNCTION function_type . ID LPAREN param RPAREN LBRACKET inner_body return RBRACKET

    ID              shift and go to state 38


state 31

    (40) function_type -> s_type .

    ID              reduce using rule 40 (function_type -> s_type .)


state 32

    (41) function_type -> VOID .

    ID              reduce using rule 41 (function_type -> VOID .)


state 33

    (23) var_c_type -> c_type ID . var_c_type2 SEMICOLON var_multiple
    (24) var_c_type2 -> . COMMA ID var_c_type2
    (25) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 39
    empty                          shift and go to state 41

state 34

    (26) var_s_type -> s_type ID . var_s_array var_s_type2 SEMICOLON var_multiple
    (29) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (30) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 43
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 42
    empty                          shift and go to state 44

state 35

    (7) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 45


state 36

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .)


state 37

    (47) program_main -> MAIN LBRACKET . inner_body RBRACKET
    (49) inner_body -> . program_vars inner_body2
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    READ            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    EXPLORATION     reduce using rule 2 (empty -> .)
    FINANCIAL_STATE reduce using rule 2 (empty -> .)
    DUMMI_REGRESSION reduce using rule 2 (empty -> .)
    SEASON_ANALYSIS reduce using rule 2 (empty -> .)
    TREND_PREDICTION reduce using rule 2 (empty -> .)
    MODEL_PREDICT   reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    inner_body                     shift and go to state 46
    program_vars                   shift and go to state 47
    empty                          shift and go to state 11

state 38

    (39) program_function -> FUNCTION function_type ID . LPAREN param RPAREN LBRACKET inner_body return RBRACKET

    LPAREN          shift and go to state 48


state 39

    (23) var_c_type -> c_type ID var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 49


state 40

    (24) var_c_type2 -> COMMA . ID var_c_type2

    ID              shift and go to state 50


state 41

    (25) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 25 (var_c_type2 -> empty .)


state 42

    (26) var_s_type -> s_type ID var_s_array . var_s_type2 SEMICOLON var_multiple
    (27) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (28) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 51
    empty                          shift and go to state 53

state 43

    (29) var_s_array -> LSQBRACKET . CTE_INT RSQBRACKET var_s_matrix

    CTE_INT         shift and go to state 54


state 44

    (30) var_s_array -> empty .

    COMMA           reduce using rule 30 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 30 (var_s_array -> empty .)


state 45

    (7) import_library -> IMPORT ID AS ID . program_libraries
    (3) program_libraries -> . from_library import_library
    (4) program_libraries -> . empty
    (5) from_library -> . FROM ID
    (6) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 55
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 46

    (47) program_main -> MAIN LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 56


state 47

    (49) inner_body -> program_vars . inner_body2
    (50) inner_body2 -> . statement inner_body2
    (51) inner_body2 -> . empty
    (72) statement -> . assign
    (73) statement -> . condition
    (74) statement -> . print
    (75) statement -> . read
    (76) statement -> . cycle
    (77) statement -> . call_function
    (78) statement -> . special_function
    (2) empty -> .
    (52) assign -> . variable ASSIGN exp SEMICOLON
    (53) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (56) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (62) read -> . READ LPAREN variable RPAREN
    (63) cycle -> . for
    (64) cycle -> . while
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (79) special_function -> . exploration
    (80) special_function -> . financial_state
    (81) special_function -> . dummi_regression
    (82) special_function -> . season_analysis
    (83) special_function -> . trend_prediction
    (84) special_function -> . model_predict
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (66) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (65) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (85) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (90) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (93) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (91) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (92) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (100) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN

    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    IF              shift and go to state 68
    PRINT           shift and go to state 69
    READ            shift and go to state 70
    ID              shift and go to state 73
    FOR             shift and go to state 80
    DO              shift and go to state 81
    EXPLORATION     shift and go to state 82
    FINANCIAL_STATE shift and go to state 83
    DUMMI_REGRESSION shift and go to state 84
    SEASON_ANALYSIS shift and go to state 85
    TREND_PREDICTION shift and go to state 86
    MODEL_PREDICT   shift and go to state 87

    inner_body2                    shift and go to state 57
    statement                      shift and go to state 58
    empty                          shift and go to state 59
    assign                         shift and go to state 60
    condition                      shift and go to state 61
    print                          shift and go to state 62
    read                           shift and go to state 63
    cycle                          shift and go to state 64
    call_function                  shift and go to state 65
    special_function               shift and go to state 66
    variable                       shift and go to state 67
    for                            shift and go to state 71
    while                          shift and go to state 72
    exploration                    shift and go to state 74
    financial_state                shift and go to state 75
    dummi_regression               shift and go to state 76
    season_analysis                shift and go to state 77
    trend_prediction               shift and go to state 78
    model_predict                  shift and go to state 79

state 48

    (39) program_function -> FUNCTION function_type ID LPAREN . param RPAREN LBRACKET inner_body return RBRACKET
    (42) param -> . s_type ID param2
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    param                          shift and go to state 88
    s_type                         shift and go to state 89

state 49

    (23) var_c_type -> c_type ID var_c_type2 SEMICOLON . var_multiple
    (21) var_multiple -> . var_type
    (22) var_multiple -> . empty
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (2) empty -> .
    (23) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (26) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (19) c_type -> . DATAFRAME
    (20) c_type -> . DATE
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    READ            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    EXPLORATION     reduce using rule 2 (empty -> .)
    FINANCIAL_STATE reduce using rule 2 (empty -> .)
    DUMMI_REGRESSION reduce using rule 2 (empty -> .)
    SEASON_ANALYSIS reduce using rule 2 (empty -> .)
    TREND_PREDICTION reduce using rule 2 (empty -> .)
    MODEL_PREDICT   reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 22
    DATE            shift and go to state 23
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    c_type                         shift and go to state 20
    var_multiple                   shift and go to state 90
    var_type                       shift and go to state 91
    empty                          shift and go to state 92
    var_c_type                     shift and go to state 18
    var_s_type                     shift and go to state 19
    s_type                         shift and go to state 21

state 50

    (24) var_c_type2 -> COMMA ID . var_c_type2
    (24) var_c_type2 -> . COMMA ID var_c_type2
    (25) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 93
    empty                          shift and go to state 41

state 51

    (26) var_s_type -> s_type ID var_s_array var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 94


state 52

    (27) var_s_type2 -> COMMA . ID var_s_array var_s_type2

    ID              shift and go to state 95


state 53

    (28) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 28 (var_s_type2 -> empty .)


state 54

    (29) var_s_array -> LSQBRACKET CTE_INT . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 96


state 55

    (7) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 7 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 7 (import_library -> IMPORT ID AS ID program_libraries .)


state 56

    (47) program_main -> MAIN LBRACKET inner_body RBRACKET .

    END             reduce using rule 47 (program_main -> MAIN LBRACKET inner_body RBRACKET .)


state 57

    (49) inner_body -> program_vars inner_body2 .

    RBRACKET        reduce using rule 49 (inner_body -> program_vars inner_body2 .)
    RETURN          reduce using rule 49 (inner_body -> program_vars inner_body2 .)


state 58

    (50) inner_body2 -> statement . inner_body2
    (50) inner_body2 -> . statement inner_body2
    (51) inner_body2 -> . empty
    (72) statement -> . assign
    (73) statement -> . condition
    (74) statement -> . print
    (75) statement -> . read
    (76) statement -> . cycle
    (77) statement -> . call_function
    (78) statement -> . special_function
    (2) empty -> .
    (52) assign -> . variable ASSIGN exp SEMICOLON
    (53) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (56) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (62) read -> . READ LPAREN variable RPAREN
    (63) cycle -> . for
    (64) cycle -> . while
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (79) special_function -> . exploration
    (80) special_function -> . financial_state
    (81) special_function -> . dummi_regression
    (82) special_function -> . season_analysis
    (83) special_function -> . trend_prediction
    (84) special_function -> . model_predict
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (66) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (65) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (85) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (90) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (93) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (91) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (92) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (100) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN

    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    IF              shift and go to state 68
    PRINT           shift and go to state 69
    READ            shift and go to state 70
    ID              shift and go to state 73
    FOR             shift and go to state 80
    DO              shift and go to state 81
    EXPLORATION     shift and go to state 82
    FINANCIAL_STATE shift and go to state 83
    DUMMI_REGRESSION shift and go to state 84
    SEASON_ANALYSIS shift and go to state 85
    TREND_PREDICTION shift and go to state 86
    MODEL_PREDICT   shift and go to state 87

    statement                      shift and go to state 58
    inner_body2                    shift and go to state 97
    empty                          shift and go to state 59
    assign                         shift and go to state 60
    condition                      shift and go to state 61
    print                          shift and go to state 62
    read                           shift and go to state 63
    cycle                          shift and go to state 64
    call_function                  shift and go to state 65
    special_function               shift and go to state 66
    variable                       shift and go to state 67
    for                            shift and go to state 71
    while                          shift and go to state 72
    exploration                    shift and go to state 74
    financial_state                shift and go to state 75
    dummi_regression               shift and go to state 76
    season_analysis                shift and go to state 77
    trend_prediction               shift and go to state 78
    model_predict                  shift and go to state 79

state 59

    (51) inner_body2 -> empty .
    (34) variable -> empty .

    RBRACKET        reduce using rule 51 (inner_body2 -> empty .)
    RETURN          reduce using rule 51 (inner_body2 -> empty .)
    ASSIGN          reduce using rule 34 (variable -> empty .)


state 60

    (72) statement -> assign .

    IF              reduce using rule 72 (statement -> assign .)
    PRINT           reduce using rule 72 (statement -> assign .)
    READ            reduce using rule 72 (statement -> assign .)
    ID              reduce using rule 72 (statement -> assign .)
    FOR             reduce using rule 72 (statement -> assign .)
    DO              reduce using rule 72 (statement -> assign .)
    EXPLORATION     reduce using rule 72 (statement -> assign .)
    FINANCIAL_STATE reduce using rule 72 (statement -> assign .)
    DUMMI_REGRESSION reduce using rule 72 (statement -> assign .)
    SEASON_ANALYSIS reduce using rule 72 (statement -> assign .)
    TREND_PREDICTION reduce using rule 72 (statement -> assign .)
    MODEL_PREDICT   reduce using rule 72 (statement -> assign .)
    ASSIGN          reduce using rule 72 (statement -> assign .)
    RBRACKET        reduce using rule 72 (statement -> assign .)
    RETURN          reduce using rule 72 (statement -> assign .)


state 61

    (73) statement -> condition .

    IF              reduce using rule 73 (statement -> condition .)
    PRINT           reduce using rule 73 (statement -> condition .)
    READ            reduce using rule 73 (statement -> condition .)
    ID              reduce using rule 73 (statement -> condition .)
    FOR             reduce using rule 73 (statement -> condition .)
    DO              reduce using rule 73 (statement -> condition .)
    EXPLORATION     reduce using rule 73 (statement -> condition .)
    FINANCIAL_STATE reduce using rule 73 (statement -> condition .)
    DUMMI_REGRESSION reduce using rule 73 (statement -> condition .)
    SEASON_ANALYSIS reduce using rule 73 (statement -> condition .)
    TREND_PREDICTION reduce using rule 73 (statement -> condition .)
    MODEL_PREDICT   reduce using rule 73 (statement -> condition .)
    ASSIGN          reduce using rule 73 (statement -> condition .)
    RBRACKET        reduce using rule 73 (statement -> condition .)
    RETURN          reduce using rule 73 (statement -> condition .)


state 62

    (74) statement -> print .

    IF              reduce using rule 74 (statement -> print .)
    PRINT           reduce using rule 74 (statement -> print .)
    READ            reduce using rule 74 (statement -> print .)
    ID              reduce using rule 74 (statement -> print .)
    FOR             reduce using rule 74 (statement -> print .)
    DO              reduce using rule 74 (statement -> print .)
    EXPLORATION     reduce using rule 74 (statement -> print .)
    FINANCIAL_STATE reduce using rule 74 (statement -> print .)
    DUMMI_REGRESSION reduce using rule 74 (statement -> print .)
    SEASON_ANALYSIS reduce using rule 74 (statement -> print .)
    TREND_PREDICTION reduce using rule 74 (statement -> print .)
    MODEL_PREDICT   reduce using rule 74 (statement -> print .)
    ASSIGN          reduce using rule 74 (statement -> print .)
    RBRACKET        reduce using rule 74 (statement -> print .)
    RETURN          reduce using rule 74 (statement -> print .)


state 63

    (75) statement -> read .

    IF              reduce using rule 75 (statement -> read .)
    PRINT           reduce using rule 75 (statement -> read .)
    READ            reduce using rule 75 (statement -> read .)
    ID              reduce using rule 75 (statement -> read .)
    FOR             reduce using rule 75 (statement -> read .)
    DO              reduce using rule 75 (statement -> read .)
    EXPLORATION     reduce using rule 75 (statement -> read .)
    FINANCIAL_STATE reduce using rule 75 (statement -> read .)
    DUMMI_REGRESSION reduce using rule 75 (statement -> read .)
    SEASON_ANALYSIS reduce using rule 75 (statement -> read .)
    TREND_PREDICTION reduce using rule 75 (statement -> read .)
    MODEL_PREDICT   reduce using rule 75 (statement -> read .)
    ASSIGN          reduce using rule 75 (statement -> read .)
    RBRACKET        reduce using rule 75 (statement -> read .)
    RETURN          reduce using rule 75 (statement -> read .)


state 64

    (76) statement -> cycle .

    IF              reduce using rule 76 (statement -> cycle .)
    PRINT           reduce using rule 76 (statement -> cycle .)
    READ            reduce using rule 76 (statement -> cycle .)
    ID              reduce using rule 76 (statement -> cycle .)
    FOR             reduce using rule 76 (statement -> cycle .)
    DO              reduce using rule 76 (statement -> cycle .)
    EXPLORATION     reduce using rule 76 (statement -> cycle .)
    FINANCIAL_STATE reduce using rule 76 (statement -> cycle .)
    DUMMI_REGRESSION reduce using rule 76 (statement -> cycle .)
    SEASON_ANALYSIS reduce using rule 76 (statement -> cycle .)
    TREND_PREDICTION reduce using rule 76 (statement -> cycle .)
    MODEL_PREDICT   reduce using rule 76 (statement -> cycle .)
    ASSIGN          reduce using rule 76 (statement -> cycle .)
    RBRACKET        reduce using rule 76 (statement -> cycle .)
    RETURN          reduce using rule 76 (statement -> cycle .)


state 65

    (77) statement -> call_function .

    IF              reduce using rule 77 (statement -> call_function .)
    PRINT           reduce using rule 77 (statement -> call_function .)
    READ            reduce using rule 77 (statement -> call_function .)
    ID              reduce using rule 77 (statement -> call_function .)
    FOR             reduce using rule 77 (statement -> call_function .)
    DO              reduce using rule 77 (statement -> call_function .)
    EXPLORATION     reduce using rule 77 (statement -> call_function .)
    FINANCIAL_STATE reduce using rule 77 (statement -> call_function .)
    DUMMI_REGRESSION reduce using rule 77 (statement -> call_function .)
    SEASON_ANALYSIS reduce using rule 77 (statement -> call_function .)
    TREND_PREDICTION reduce using rule 77 (statement -> call_function .)
    MODEL_PREDICT   reduce using rule 77 (statement -> call_function .)
    ASSIGN          reduce using rule 77 (statement -> call_function .)
    RBRACKET        reduce using rule 77 (statement -> call_function .)
    RETURN          reduce using rule 77 (statement -> call_function .)


state 66

    (78) statement -> special_function .

    IF              reduce using rule 78 (statement -> special_function .)
    PRINT           reduce using rule 78 (statement -> special_function .)
    READ            reduce using rule 78 (statement -> special_function .)
    ID              reduce using rule 78 (statement -> special_function .)
    FOR             reduce using rule 78 (statement -> special_function .)
    DO              reduce using rule 78 (statement -> special_function .)
    EXPLORATION     reduce using rule 78 (statement -> special_function .)
    FINANCIAL_STATE reduce using rule 78 (statement -> special_function .)
    DUMMI_REGRESSION reduce using rule 78 (statement -> special_function .)
    SEASON_ANALYSIS reduce using rule 78 (statement -> special_function .)
    TREND_PREDICTION reduce using rule 78 (statement -> special_function .)
    MODEL_PREDICT   reduce using rule 78 (statement -> special_function .)
    ASSIGN          reduce using rule 78 (statement -> special_function .)
    RBRACKET        reduce using rule 78 (statement -> special_function .)
    RETURN          reduce using rule 78 (statement -> special_function .)


state 67

    (52) assign -> variable . ASSIGN exp SEMICOLON

    ASSIGN          shift and go to state 98


state 68

    (53) condition -> IF . LPAREN exp RPAREN body condition2 SEMICOLON

    LPAREN          shift and go to state 99


state 69

    (56) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 100


state 70

    (62) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 101


state 71

    (63) cycle -> for .

    IF              reduce using rule 63 (cycle -> for .)
    PRINT           reduce using rule 63 (cycle -> for .)
    READ            reduce using rule 63 (cycle -> for .)
    ID              reduce using rule 63 (cycle -> for .)
    FOR             reduce using rule 63 (cycle -> for .)
    DO              reduce using rule 63 (cycle -> for .)
    EXPLORATION     reduce using rule 63 (cycle -> for .)
    FINANCIAL_STATE reduce using rule 63 (cycle -> for .)
    DUMMI_REGRESSION reduce using rule 63 (cycle -> for .)
    SEASON_ANALYSIS reduce using rule 63 (cycle -> for .)
    TREND_PREDICTION reduce using rule 63 (cycle -> for .)
    MODEL_PREDICT   reduce using rule 63 (cycle -> for .)
    ASSIGN          reduce using rule 63 (cycle -> for .)
    RBRACKET        reduce using rule 63 (cycle -> for .)
    RETURN          reduce using rule 63 (cycle -> for .)


state 72

    (64) cycle -> while .

    IF              reduce using rule 64 (cycle -> while .)
    PRINT           reduce using rule 64 (cycle -> while .)
    READ            reduce using rule 64 (cycle -> while .)
    ID              reduce using rule 64 (cycle -> while .)
    FOR             reduce using rule 64 (cycle -> while .)
    DO              reduce using rule 64 (cycle -> while .)
    EXPLORATION     reduce using rule 64 (cycle -> while .)
    FINANCIAL_STATE reduce using rule 64 (cycle -> while .)
    DUMMI_REGRESSION reduce using rule 64 (cycle -> while .)
    SEASON_ANALYSIS reduce using rule 64 (cycle -> while .)
    TREND_PREDICTION reduce using rule 64 (cycle -> while .)
    MODEL_PREDICT   reduce using rule 64 (cycle -> while .)
    ASSIGN          reduce using rule 64 (cycle -> while .)
    RBRACKET        reduce using rule 64 (cycle -> while .)
    RETURN          reduce using rule 64 (cycle -> while .)


state 73

    (69) call_function -> ID . LPAREN exp exp_many RPAREN
    (33) variable -> ID . variable_array
    (35) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (36) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 102
    LSQBRACKET      shift and go to state 104
    ASSIGN          reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 103
    empty                          shift and go to state 105

state 74

    (79) special_function -> exploration .

    IF              reduce using rule 79 (special_function -> exploration .)
    PRINT           reduce using rule 79 (special_function -> exploration .)
    READ            reduce using rule 79 (special_function -> exploration .)
    ID              reduce using rule 79 (special_function -> exploration .)
    FOR             reduce using rule 79 (special_function -> exploration .)
    DO              reduce using rule 79 (special_function -> exploration .)
    EXPLORATION     reduce using rule 79 (special_function -> exploration .)
    FINANCIAL_STATE reduce using rule 79 (special_function -> exploration .)
    DUMMI_REGRESSION reduce using rule 79 (special_function -> exploration .)
    SEASON_ANALYSIS reduce using rule 79 (special_function -> exploration .)
    TREND_PREDICTION reduce using rule 79 (special_function -> exploration .)
    MODEL_PREDICT   reduce using rule 79 (special_function -> exploration .)
    ASSIGN          reduce using rule 79 (special_function -> exploration .)
    RBRACKET        reduce using rule 79 (special_function -> exploration .)
    RETURN          reduce using rule 79 (special_function -> exploration .)


state 75

    (80) special_function -> financial_state .

    IF              reduce using rule 80 (special_function -> financial_state .)
    PRINT           reduce using rule 80 (special_function -> financial_state .)
    READ            reduce using rule 80 (special_function -> financial_state .)
    ID              reduce using rule 80 (special_function -> financial_state .)
    FOR             reduce using rule 80 (special_function -> financial_state .)
    DO              reduce using rule 80 (special_function -> financial_state .)
    EXPLORATION     reduce using rule 80 (special_function -> financial_state .)
    FINANCIAL_STATE reduce using rule 80 (special_function -> financial_state .)
    DUMMI_REGRESSION reduce using rule 80 (special_function -> financial_state .)
    SEASON_ANALYSIS reduce using rule 80 (special_function -> financial_state .)
    TREND_PREDICTION reduce using rule 80 (special_function -> financial_state .)
    MODEL_PREDICT   reduce using rule 80 (special_function -> financial_state .)
    ASSIGN          reduce using rule 80 (special_function -> financial_state .)
    RBRACKET        reduce using rule 80 (special_function -> financial_state .)
    RETURN          reduce using rule 80 (special_function -> financial_state .)


state 76

    (81) special_function -> dummi_regression .

    IF              reduce using rule 81 (special_function -> dummi_regression .)
    PRINT           reduce using rule 81 (special_function -> dummi_regression .)
    READ            reduce using rule 81 (special_function -> dummi_regression .)
    ID              reduce using rule 81 (special_function -> dummi_regression .)
    FOR             reduce using rule 81 (special_function -> dummi_regression .)
    DO              reduce using rule 81 (special_function -> dummi_regression .)
    EXPLORATION     reduce using rule 81 (special_function -> dummi_regression .)
    FINANCIAL_STATE reduce using rule 81 (special_function -> dummi_regression .)
    DUMMI_REGRESSION reduce using rule 81 (special_function -> dummi_regression .)
    SEASON_ANALYSIS reduce using rule 81 (special_function -> dummi_regression .)
    TREND_PREDICTION reduce using rule 81 (special_function -> dummi_regression .)
    MODEL_PREDICT   reduce using rule 81 (special_function -> dummi_regression .)
    ASSIGN          reduce using rule 81 (special_function -> dummi_regression .)
    RBRACKET        reduce using rule 81 (special_function -> dummi_regression .)
    RETURN          reduce using rule 81 (special_function -> dummi_regression .)


state 77

    (82) special_function -> season_analysis .

    IF              reduce using rule 82 (special_function -> season_analysis .)
    PRINT           reduce using rule 82 (special_function -> season_analysis .)
    READ            reduce using rule 82 (special_function -> season_analysis .)
    ID              reduce using rule 82 (special_function -> season_analysis .)
    FOR             reduce using rule 82 (special_function -> season_analysis .)
    DO              reduce using rule 82 (special_function -> season_analysis .)
    EXPLORATION     reduce using rule 82 (special_function -> season_analysis .)
    FINANCIAL_STATE reduce using rule 82 (special_function -> season_analysis .)
    DUMMI_REGRESSION reduce using rule 82 (special_function -> season_analysis .)
    SEASON_ANALYSIS reduce using rule 82 (special_function -> season_analysis .)
    TREND_PREDICTION reduce using rule 82 (special_function -> season_analysis .)
    MODEL_PREDICT   reduce using rule 82 (special_function -> season_analysis .)
    ASSIGN          reduce using rule 82 (special_function -> season_analysis .)
    RBRACKET        reduce using rule 82 (special_function -> season_analysis .)
    RETURN          reduce using rule 82 (special_function -> season_analysis .)


state 78

    (83) special_function -> trend_prediction .

    IF              reduce using rule 83 (special_function -> trend_prediction .)
    PRINT           reduce using rule 83 (special_function -> trend_prediction .)
    READ            reduce using rule 83 (special_function -> trend_prediction .)
    ID              reduce using rule 83 (special_function -> trend_prediction .)
    FOR             reduce using rule 83 (special_function -> trend_prediction .)
    DO              reduce using rule 83 (special_function -> trend_prediction .)
    EXPLORATION     reduce using rule 83 (special_function -> trend_prediction .)
    FINANCIAL_STATE reduce using rule 83 (special_function -> trend_prediction .)
    DUMMI_REGRESSION reduce using rule 83 (special_function -> trend_prediction .)
    SEASON_ANALYSIS reduce using rule 83 (special_function -> trend_prediction .)
    TREND_PREDICTION reduce using rule 83 (special_function -> trend_prediction .)
    MODEL_PREDICT   reduce using rule 83 (special_function -> trend_prediction .)
    ASSIGN          reduce using rule 83 (special_function -> trend_prediction .)
    RBRACKET        reduce using rule 83 (special_function -> trend_prediction .)
    RETURN          reduce using rule 83 (special_function -> trend_prediction .)


state 79

    (84) special_function -> model_predict .

    IF              reduce using rule 84 (special_function -> model_predict .)
    PRINT           reduce using rule 84 (special_function -> model_predict .)
    READ            reduce using rule 84 (special_function -> model_predict .)
    ID              reduce using rule 84 (special_function -> model_predict .)
    FOR             reduce using rule 84 (special_function -> model_predict .)
    DO              reduce using rule 84 (special_function -> model_predict .)
    EXPLORATION     reduce using rule 84 (special_function -> model_predict .)
    FINANCIAL_STATE reduce using rule 84 (special_function -> model_predict .)
    DUMMI_REGRESSION reduce using rule 84 (special_function -> model_predict .)
    SEASON_ANALYSIS reduce using rule 84 (special_function -> model_predict .)
    TREND_PREDICTION reduce using rule 84 (special_function -> model_predict .)
    MODEL_PREDICT   reduce using rule 84 (special_function -> model_predict .)
    ASSIGN          reduce using rule 84 (special_function -> model_predict .)
    RBRACKET        reduce using rule 84 (special_function -> model_predict .)
    RETURN          reduce using rule 84 (special_function -> model_predict .)


state 80

    (66) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 106


state 81

    (65) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (48) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 108

    body                           shift and go to state 107

state 82

    (85) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 109


state 83

    (90) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 110


state 84

    (93) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 111


state 85

    (91) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 112


state 86

    (92) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    LPAREN          shift and go to state 113


state 87

    (100) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 114


state 88

    (39) program_function -> FUNCTION function_type ID LPAREN param . RPAREN LBRACKET inner_body return RBRACKET

    RPAREN          shift and go to state 115


state 89

    (42) param -> s_type . ID param2

    ID              shift and go to state 116


state 90

    (23) var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    READ            reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    EXPLORATION     reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    FINANCIAL_STATE reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    DUMMI_REGRESSION reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    SEASON_ANALYSIS reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    TREND_PREDICTION reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    MODEL_PREDICT   reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    ASSIGN          reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 23 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)


state 91

    (21) var_multiple -> var_type .

    FUNCTION        reduce using rule 21 (var_multiple -> var_type .)
    IF              reduce using rule 21 (var_multiple -> var_type .)
    PRINT           reduce using rule 21 (var_multiple -> var_type .)
    READ            reduce using rule 21 (var_multiple -> var_type .)
    ID              reduce using rule 21 (var_multiple -> var_type .)
    FOR             reduce using rule 21 (var_multiple -> var_type .)
    DO              reduce using rule 21 (var_multiple -> var_type .)
    EXPLORATION     reduce using rule 21 (var_multiple -> var_type .)
    FINANCIAL_STATE reduce using rule 21 (var_multiple -> var_type .)
    DUMMI_REGRESSION reduce using rule 21 (var_multiple -> var_type .)
    SEASON_ANALYSIS reduce using rule 21 (var_multiple -> var_type .)
    TREND_PREDICTION reduce using rule 21 (var_multiple -> var_type .)
    MODEL_PREDICT   reduce using rule 21 (var_multiple -> var_type .)
    ASSIGN          reduce using rule 21 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 21 (var_multiple -> var_type .)
    RETURN          reduce using rule 21 (var_multiple -> var_type .)


state 92

    (22) var_multiple -> empty .

    FUNCTION        reduce using rule 22 (var_multiple -> empty .)
    IF              reduce using rule 22 (var_multiple -> empty .)
    PRINT           reduce using rule 22 (var_multiple -> empty .)
    READ            reduce using rule 22 (var_multiple -> empty .)
    ID              reduce using rule 22 (var_multiple -> empty .)
    FOR             reduce using rule 22 (var_multiple -> empty .)
    DO              reduce using rule 22 (var_multiple -> empty .)
    EXPLORATION     reduce using rule 22 (var_multiple -> empty .)
    FINANCIAL_STATE reduce using rule 22 (var_multiple -> empty .)
    DUMMI_REGRESSION reduce using rule 22 (var_multiple -> empty .)
    SEASON_ANALYSIS reduce using rule 22 (var_multiple -> empty .)
    TREND_PREDICTION reduce using rule 22 (var_multiple -> empty .)
    MODEL_PREDICT   reduce using rule 22 (var_multiple -> empty .)
    ASSIGN          reduce using rule 22 (var_multiple -> empty .)
    RBRACKET        reduce using rule 22 (var_multiple -> empty .)
    RETURN          reduce using rule 22 (var_multiple -> empty .)


state 93

    (24) var_c_type2 -> COMMA ID var_c_type2 .

    SEMICOLON       reduce using rule 24 (var_c_type2 -> COMMA ID var_c_type2 .)


state 94

    (26) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON . var_multiple
    (21) var_multiple -> . var_type
    (22) var_multiple -> . empty
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (2) empty -> .
    (23) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (26) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (19) c_type -> . DATAFRAME
    (20) c_type -> . DATE
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    READ            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    EXPLORATION     reduce using rule 2 (empty -> .)
    FINANCIAL_STATE reduce using rule 2 (empty -> .)
    DUMMI_REGRESSION reduce using rule 2 (empty -> .)
    SEASON_ANALYSIS reduce using rule 2 (empty -> .)
    TREND_PREDICTION reduce using rule 2 (empty -> .)
    MODEL_PREDICT   reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 22
    DATE            shift and go to state 23
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    s_type                         shift and go to state 21
    var_multiple                   shift and go to state 117
    var_type                       shift and go to state 91
    empty                          shift and go to state 92
    var_c_type                     shift and go to state 18
    var_s_type                     shift and go to state 19
    c_type                         shift and go to state 20

state 95

    (27) var_s_type2 -> COMMA ID . var_s_array var_s_type2
    (29) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (30) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 43
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 118
    empty                          shift and go to state 44

state 96

    (29) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET . var_s_matrix
    (31) var_s_matrix -> . LSQBRACKET CTE_INT RSQBRACKET
    (32) var_s_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 119
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_matrix                   shift and go to state 120
    empty                          shift and go to state 121

state 97

    (50) inner_body2 -> statement inner_body2 .

    RBRACKET        reduce using rule 50 (inner_body2 -> statement inner_body2 .)
    RETURN          reduce using rule 50 (inner_body2 -> statement inner_body2 .)


state 98

    (52) assign -> variable ASSIGN . exp SEMICOLON
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    variable                       shift and go to state 122
    exp                            shift and go to state 123
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 99

    (53) condition -> IF LPAREN . exp RPAREN body condition2 SEMICOLON
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    exp                            shift and go to state 138
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 100

    (56) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (59) print_many -> . print_type print_many2
    (57) print_type -> . ID
    (58) print_type -> . CTE_CHAR

    ID              shift and go to state 141
    CTE_CHAR        shift and go to state 142

    print_many                     shift and go to state 139
    print_type                     shift and go to state 140

state 101

    (62) read -> READ LPAREN . variable RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    RPAREN          reduce using rule 2 (empty -> .)

    variable                       shift and go to state 143
    empty                          shift and go to state 137

state 102

    (69) call_function -> ID LPAREN . exp exp_many RPAREN
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    exp                            shift and go to state 145
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 103

    (33) variable -> ID variable_array .

    ASSIGN          reduce using rule 33 (variable -> ID variable_array .)
    MULTIPLY        reduce using rule 33 (variable -> ID variable_array .)
    DIVIDE          reduce using rule 33 (variable -> ID variable_array .)
    PLUS            reduce using rule 33 (variable -> ID variable_array .)
    MINUS           reduce using rule 33 (variable -> ID variable_array .)
    EQUAL           reduce using rule 33 (variable -> ID variable_array .)
    NOTEQUAL        reduce using rule 33 (variable -> ID variable_array .)
    LTHAN           reduce using rule 33 (variable -> ID variable_array .)
    GTHAN           reduce using rule 33 (variable -> ID variable_array .)
    AND             reduce using rule 33 (variable -> ID variable_array .)
    OR              reduce using rule 33 (variable -> ID variable_array .)
    SEMICOLON       reduce using rule 33 (variable -> ID variable_array .)
    RPAREN          reduce using rule 33 (variable -> ID variable_array .)
    COMMA           reduce using rule 33 (variable -> ID variable_array .)
    RSQBRACKET      reduce using rule 33 (variable -> ID variable_array .)


state 104

    (35) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp                            shift and go to state 146
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 105

    (36) variable_array -> empty .

    ASSIGN          reduce using rule 36 (variable_array -> empty .)
    MULTIPLY        reduce using rule 36 (variable_array -> empty .)
    DIVIDE          reduce using rule 36 (variable_array -> empty .)
    PLUS            reduce using rule 36 (variable_array -> empty .)
    MINUS           reduce using rule 36 (variable_array -> empty .)
    EQUAL           reduce using rule 36 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 36 (variable_array -> empty .)
    LTHAN           reduce using rule 36 (variable_array -> empty .)
    GTHAN           reduce using rule 36 (variable_array -> empty .)
    AND             reduce using rule 36 (variable_array -> empty .)
    OR              reduce using rule 36 (variable_array -> empty .)
    SEMICOLON       reduce using rule 36 (variable_array -> empty .)
    RPAREN          reduce using rule 36 (variable_array -> empty .)
    COMMA           reduce using rule 36 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 36 (variable_array -> empty .)


state 106

    (66) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 147


state 107

    (65) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 148


state 108

    (48) body -> LBRACKET . inner_body RBRACKET
    (49) inner_body -> . program_vars inner_body2
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    READ            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    EXPLORATION     reduce using rule 2 (empty -> .)
    FINANCIAL_STATE reduce using rule 2 (empty -> .)
    DUMMI_REGRESSION reduce using rule 2 (empty -> .)
    SEASON_ANALYSIS reduce using rule 2 (empty -> .)
    TREND_PREDICTION reduce using rule 2 (empty -> .)
    MODEL_PREDICT   reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    inner_body                     shift and go to state 149
    program_vars                   shift and go to state 47
    empty                          shift and go to state 11

state 109

    (85) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    variable                       shift and go to state 150
    empty                          shift and go to state 137

state 110

    (90) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)

    variable                       shift and go to state 151
    empty                          shift and go to state 137

state 111

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)

    variable                       shift and go to state 152
    empty                          shift and go to state 137

state 112

    (91) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    RPAREN          reduce using rule 2 (empty -> .)

    variable                       shift and go to state 153
    empty                          shift and go to state 137

state 113

    (92) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)

    variable                       shift and go to state 154
    empty                          shift and go to state 137

state 114

    (100) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)

    variable                       shift and go to state 155
    empty                          shift and go to state 137

state 115

    (39) program_function -> FUNCTION function_type ID LPAREN param RPAREN . LBRACKET inner_body return RBRACKET

    LBRACKET        shift and go to state 156


state 116

    (42) param -> s_type ID . param2
    (43) param2 -> . COMMA s_type ID param2
    (44) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 158
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 157
    empty                          shift and go to state 159

state 117

    (26) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    READ            reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    EXPLORATION     reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    FINANCIAL_STATE reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    DUMMI_REGRESSION reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    SEASON_ANALYSIS reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    TREND_PREDICTION reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    MODEL_PREDICT   reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    ASSIGN          reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 26 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)


state 118

    (27) var_s_type2 -> COMMA ID var_s_array . var_s_type2
    (27) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (28) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 160
    empty                          shift and go to state 53

state 119

    (31) var_s_matrix -> LSQBRACKET . CTE_INT RSQBRACKET

    CTE_INT         shift and go to state 161


state 120

    (29) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 29 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 29 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)


state 121

    (32) var_s_matrix -> empty .

    COMMA           reduce using rule 32 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 32 (var_s_matrix -> empty .)


state 122

    (126) factor -> variable .

    MULTIPLY        reduce using rule 126 (factor -> variable .)
    DIVIDE          reduce using rule 126 (factor -> variable .)
    PLUS            reduce using rule 126 (factor -> variable .)
    MINUS           reduce using rule 126 (factor -> variable .)
    EQUAL           reduce using rule 126 (factor -> variable .)
    NOTEQUAL        reduce using rule 126 (factor -> variable .)
    LTHAN           reduce using rule 126 (factor -> variable .)
    GTHAN           reduce using rule 126 (factor -> variable .)
    AND             reduce using rule 126 (factor -> variable .)
    OR              reduce using rule 126 (factor -> variable .)
    SEMICOLON       reduce using rule 126 (factor -> variable .)
    RPAREN          reduce using rule 126 (factor -> variable .)
    COMMA           reduce using rule 126 (factor -> variable .)
    RSQBRACKET      reduce using rule 126 (factor -> variable .)


state 123

    (52) assign -> variable ASSIGN exp . SEMICOLON

    SEMICOLON       shift and go to state 162


state 124

    (101) exp -> t_exp . exp_or
    (102) exp_or -> . OR exp
    (103) exp_or -> . empty
    (2) empty -> .

    OR              shift and go to state 164
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp_or                         shift and go to state 163
    empty                          shift and go to state 165

state 125

    (104) t_exp -> expression . t_exp_and
    (105) t_exp_and -> . AND t_exp
    (106) t_exp_and -> . empty
    (2) empty -> .

    AND             shift and go to state 167
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    t_exp_and                      shift and go to state 166
    empty                          shift and go to state 168

state 126

    (107) expression -> m_exp . expression_comp
    (108) expression_comp -> . expression_comp_2 m_exp
    (109) expression_comp -> . empty
    (110) expression_comp_2 -> . EQUAL
    (111) expression_comp_2 -> . NOTEQUAL
    (112) expression_comp_2 -> . LTHAN
    (113) expression_comp_2 -> . GTHAN
    (2) empty -> .

    EQUAL           shift and go to state 172
    NOTEQUAL        shift and go to state 173
    LTHAN           shift and go to state 174
    GTHAN           shift and go to state 175
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    expression_comp                shift and go to state 169
    expression_comp_2              shift and go to state 170
    empty                          shift and go to state 171

state 127

    (114) m_exp -> term . m_exp_sr
    (115) m_exp_sr -> . m_exp_sr_2 m_exp
    (116) m_exp_sr -> . empty
    (117) m_exp_sr_2 -> . PLUS
    (118) m_exp_sr_2 -> . MINUS
    (2) empty -> .

    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp_sr                       shift and go to state 176
    m_exp_sr_2                     shift and go to state 177
    empty                          shift and go to state 178

state 128

    (119) term -> factor . term_pc
    (120) term_pc -> . term_pc_2 term
    (121) term_pc -> . empty
    (122) term_pc_2 -> . MULTIPLY
    (123) term_pc_2 -> . DIVIDE
    (2) empty -> .

    MULTIPLY        shift and go to state 184
    DIVIDE          shift and go to state 185
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    term_pc                        shift and go to state 181
    term_pc_2                      shift and go to state 182
    empty                          shift and go to state 183

state 129

    (124) factor -> factor_exp .

    MULTIPLY        reduce using rule 124 (factor -> factor_exp .)
    DIVIDE          reduce using rule 124 (factor -> factor_exp .)
    PLUS            reduce using rule 124 (factor -> factor_exp .)
    MINUS           reduce using rule 124 (factor -> factor_exp .)
    EQUAL           reduce using rule 124 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 124 (factor -> factor_exp .)
    LTHAN           reduce using rule 124 (factor -> factor_exp .)
    GTHAN           reduce using rule 124 (factor -> factor_exp .)
    AND             reduce using rule 124 (factor -> factor_exp .)
    OR              reduce using rule 124 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 124 (factor -> factor_exp .)
    RPAREN          reduce using rule 124 (factor -> factor_exp .)
    COMMA           reduce using rule 124 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 124 (factor -> factor_exp .)


state 130

    (125) factor -> factor_cte .

    MULTIPLY        reduce using rule 125 (factor -> factor_cte .)
    DIVIDE          reduce using rule 125 (factor -> factor_cte .)
    PLUS            reduce using rule 125 (factor -> factor_cte .)
    MINUS           reduce using rule 125 (factor -> factor_cte .)
    EQUAL           reduce using rule 125 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 125 (factor -> factor_cte .)
    LTHAN           reduce using rule 125 (factor -> factor_cte .)
    GTHAN           reduce using rule 125 (factor -> factor_cte .)
    AND             reduce using rule 125 (factor -> factor_cte .)
    OR              reduce using rule 125 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 125 (factor -> factor_cte .)
    RPAREN          reduce using rule 125 (factor -> factor_cte .)
    COMMA           reduce using rule 125 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 125 (factor -> factor_cte .)


state 131

    (127) factor -> call_function .

    MULTIPLY        reduce using rule 127 (factor -> call_function .)
    DIVIDE          reduce using rule 127 (factor -> call_function .)
    PLUS            reduce using rule 127 (factor -> call_function .)
    MINUS           reduce using rule 127 (factor -> call_function .)
    EQUAL           reduce using rule 127 (factor -> call_function .)
    NOTEQUAL        reduce using rule 127 (factor -> call_function .)
    LTHAN           reduce using rule 127 (factor -> call_function .)
    GTHAN           reduce using rule 127 (factor -> call_function .)
    AND             reduce using rule 127 (factor -> call_function .)
    OR              reduce using rule 127 (factor -> call_function .)
    SEMICOLON       reduce using rule 127 (factor -> call_function .)
    RPAREN          reduce using rule 127 (factor -> call_function .)
    COMMA           reduce using rule 127 (factor -> call_function .)
    RSQBRACKET      reduce using rule 127 (factor -> call_function .)


state 132

    (128) factor_exp -> LPAREN . exp RPAREN
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    exp                            shift and go to state 186
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 133

    (129) factor_cte -> CTE_INT .

    MULTIPLY        reduce using rule 129 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 129 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 129 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 129 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 129 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 129 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 129 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 129 (factor_cte -> CTE_INT .)
    AND             reduce using rule 129 (factor_cte -> CTE_INT .)
    OR              reduce using rule 129 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 129 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 129 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 129 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 129 (factor_cte -> CTE_INT .)


state 134

    (130) factor_cte -> CTE_FLOAT .

    MULTIPLY        reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 130 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 130 (factor_cte -> CTE_FLOAT .)


state 135

    (131) factor_cte -> CTE_CHAR .

    MULTIPLY        reduce using rule 131 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 131 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 131 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 131 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 131 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 131 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 131 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 131 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 131 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 131 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 131 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 131 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 131 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 131 (factor_cte -> CTE_CHAR .)


state 136

    (33) variable -> ID . variable_array
    (69) call_function -> ID . LPAREN exp exp_many RPAREN
    (35) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (36) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 102
    LSQBRACKET      shift and go to state 104
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 103
    empty                          shift and go to state 105

state 137

    (34) variable -> empty .

    MULTIPLY        reduce using rule 34 (variable -> empty .)
    DIVIDE          reduce using rule 34 (variable -> empty .)
    PLUS            reduce using rule 34 (variable -> empty .)
    MINUS           reduce using rule 34 (variable -> empty .)
    EQUAL           reduce using rule 34 (variable -> empty .)
    NOTEQUAL        reduce using rule 34 (variable -> empty .)
    LTHAN           reduce using rule 34 (variable -> empty .)
    GTHAN           reduce using rule 34 (variable -> empty .)
    AND             reduce using rule 34 (variable -> empty .)
    OR              reduce using rule 34 (variable -> empty .)
    SEMICOLON       reduce using rule 34 (variable -> empty .)
    RPAREN          reduce using rule 34 (variable -> empty .)
    COMMA           reduce using rule 34 (variable -> empty .)
    RSQBRACKET      reduce using rule 34 (variable -> empty .)


state 138

    (53) condition -> IF LPAREN exp . RPAREN body condition2 SEMICOLON

    RPAREN          shift and go to state 187


state 139

    (56) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 188


state 140

    (59) print_many -> print_type . print_many2
    (60) print_many2 -> . COMMA print_type print_many2
    (61) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 190
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 189
    empty                          shift and go to state 191

state 141

    (57) print_type -> ID .

    COMMA           reduce using rule 57 (print_type -> ID .)
    RPAREN          reduce using rule 57 (print_type -> ID .)


state 142

    (58) print_type -> CTE_CHAR .

    COMMA           reduce using rule 58 (print_type -> CTE_CHAR .)
    RPAREN          reduce using rule 58 (print_type -> CTE_CHAR .)


state 143

    (62) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 192


state 144

    (33) variable -> ID . variable_array
    (35) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (36) variable_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 104
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 103
    empty                          shift and go to state 105

state 145

    (69) call_function -> ID LPAREN exp . exp_many RPAREN
    (70) exp_many -> . COMMA exp exp_many
    (71) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 193
    empty                          shift and go to state 195

state 146

    (35) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 196


state 147

    (66) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 197


state 148

    (65) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 198


state 149

    (48) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 199


state 150

    (85) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (86) explore_var -> . COMMA variable
    (87) explore_var -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 201
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    explore_var                    shift and go to state 200
    empty                          shift and go to state 202

state 151

    (90) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 203


state 152

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 204


state 153

    (91) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 205


state 154

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 206


state 155

    (100) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 207


state 156

    (39) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET . inner_body return RBRACKET
    (49) inner_body -> . program_vars inner_body2
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    READ            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    EXPLORATION     reduce using rule 2 (empty -> .)
    FINANCIAL_STATE reduce using rule 2 (empty -> .)
    DUMMI_REGRESSION reduce using rule 2 (empty -> .)
    SEASON_ANALYSIS reduce using rule 2 (empty -> .)
    TREND_PREDICTION reduce using rule 2 (empty -> .)
    MODEL_PREDICT   reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    inner_body                     shift and go to state 208
    program_vars                   shift and go to state 47
    empty                          shift and go to state 11

state 157

    (42) param -> s_type ID param2 .

    RPAREN          reduce using rule 42 (param -> s_type ID param2 .)


state 158

    (43) param2 -> COMMA . s_type ID param2
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    s_type                         shift and go to state 209

state 159

    (44) param2 -> empty .

    RPAREN          reduce using rule 44 (param2 -> empty .)


state 160

    (27) var_s_type2 -> COMMA ID var_s_array var_s_type2 .

    SEMICOLON       reduce using rule 27 (var_s_type2 -> COMMA ID var_s_array var_s_type2 .)


state 161

    (31) var_s_matrix -> LSQBRACKET CTE_INT . RSQBRACKET

    RSQBRACKET      shift and go to state 210


state 162

    (52) assign -> variable ASSIGN exp SEMICOLON .

    IF              reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    PRINT           reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    READ            reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    ID              reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    FOR             reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    DO              reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    EXPLORATION     reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    FINANCIAL_STATE reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    DUMMI_REGRESSION reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    SEASON_ANALYSIS reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    TREND_PREDICTION reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    MODEL_PREDICT   reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    ASSIGN          reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    RBRACKET        reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)
    RETURN          reduce using rule 52 (assign -> variable ASSIGN exp SEMICOLON .)


state 163

    (101) exp -> t_exp exp_or .

    SEMICOLON       reduce using rule 101 (exp -> t_exp exp_or .)
    RPAREN          reduce using rule 101 (exp -> t_exp exp_or .)
    COMMA           reduce using rule 101 (exp -> t_exp exp_or .)
    RSQBRACKET      reduce using rule 101 (exp -> t_exp exp_or .)


state 164

    (102) exp_or -> OR . exp
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp                            shift and go to state 211
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 165

    (103) exp_or -> empty .

    SEMICOLON       reduce using rule 103 (exp_or -> empty .)
    RPAREN          reduce using rule 103 (exp_or -> empty .)
    COMMA           reduce using rule 103 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 103 (exp_or -> empty .)


state 166

    (104) t_exp -> expression t_exp_and .

    OR              reduce using rule 104 (t_exp -> expression t_exp_and .)
    SEMICOLON       reduce using rule 104 (t_exp -> expression t_exp_and .)
    RPAREN          reduce using rule 104 (t_exp -> expression t_exp_and .)
    COMMA           reduce using rule 104 (t_exp -> expression t_exp_and .)
    RSQBRACKET      reduce using rule 104 (t_exp -> expression t_exp_and .)


state 167

    (105) t_exp_and -> AND . t_exp
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    t_exp                          shift and go to state 212
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 168

    (106) t_exp_and -> empty .

    OR              reduce using rule 106 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 106 (t_exp_and -> empty .)
    RPAREN          reduce using rule 106 (t_exp_and -> empty .)
    COMMA           reduce using rule 106 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 106 (t_exp_and -> empty .)


state 169

    (107) expression -> m_exp expression_comp .

    AND             reduce using rule 107 (expression -> m_exp expression_comp .)
    OR              reduce using rule 107 (expression -> m_exp expression_comp .)
    SEMICOLON       reduce using rule 107 (expression -> m_exp expression_comp .)
    RPAREN          reduce using rule 107 (expression -> m_exp expression_comp .)
    COMMA           reduce using rule 107 (expression -> m_exp expression_comp .)
    RSQBRACKET      reduce using rule 107 (expression -> m_exp expression_comp .)


state 170

    (108) expression_comp -> expression_comp_2 . m_exp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp                          shift and go to state 213
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 171

    (109) expression_comp -> empty .

    AND             reduce using rule 109 (expression_comp -> empty .)
    OR              reduce using rule 109 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 109 (expression_comp -> empty .)
    RPAREN          reduce using rule 109 (expression_comp -> empty .)
    COMMA           reduce using rule 109 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 109 (expression_comp -> empty .)


state 172

    (110) expression_comp_2 -> EQUAL .

    LPAREN          reduce using rule 110 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 110 (expression_comp_2 -> EQUAL .)
    CTE_FLOAT       reduce using rule 110 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 110 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 110 (expression_comp_2 -> EQUAL .)
    PLUS            reduce using rule 110 (expression_comp_2 -> EQUAL .)
    MINUS           reduce using rule 110 (expression_comp_2 -> EQUAL .)
    MULTIPLY        reduce using rule 110 (expression_comp_2 -> EQUAL .)
    DIVIDE          reduce using rule 110 (expression_comp_2 -> EQUAL .)
    AND             reduce using rule 110 (expression_comp_2 -> EQUAL .)
    OR              reduce using rule 110 (expression_comp_2 -> EQUAL .)
    SEMICOLON       reduce using rule 110 (expression_comp_2 -> EQUAL .)
    RPAREN          reduce using rule 110 (expression_comp_2 -> EQUAL .)
    COMMA           reduce using rule 110 (expression_comp_2 -> EQUAL .)
    RSQBRACKET      reduce using rule 110 (expression_comp_2 -> EQUAL .)


state 173

    (111) expression_comp_2 -> NOTEQUAL .

    LPAREN          reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    PLUS            reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    MINUS           reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    MULTIPLY        reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    DIVIDE          reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    AND             reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    OR              reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    SEMICOLON       reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    RPAREN          reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    COMMA           reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    RSQBRACKET      reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)


state 174

    (112) expression_comp_2 -> LTHAN .

    LPAREN          reduce using rule 112 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 112 (expression_comp_2 -> LTHAN .)
    CTE_FLOAT       reduce using rule 112 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 112 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 112 (expression_comp_2 -> LTHAN .)
    PLUS            reduce using rule 112 (expression_comp_2 -> LTHAN .)
    MINUS           reduce using rule 112 (expression_comp_2 -> LTHAN .)
    MULTIPLY        reduce using rule 112 (expression_comp_2 -> LTHAN .)
    DIVIDE          reduce using rule 112 (expression_comp_2 -> LTHAN .)
    AND             reduce using rule 112 (expression_comp_2 -> LTHAN .)
    OR              reduce using rule 112 (expression_comp_2 -> LTHAN .)
    SEMICOLON       reduce using rule 112 (expression_comp_2 -> LTHAN .)
    RPAREN          reduce using rule 112 (expression_comp_2 -> LTHAN .)
    COMMA           reduce using rule 112 (expression_comp_2 -> LTHAN .)
    RSQBRACKET      reduce using rule 112 (expression_comp_2 -> LTHAN .)


state 175

    (113) expression_comp_2 -> GTHAN .

    LPAREN          reduce using rule 113 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 113 (expression_comp_2 -> GTHAN .)
    CTE_FLOAT       reduce using rule 113 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 113 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 113 (expression_comp_2 -> GTHAN .)
    PLUS            reduce using rule 113 (expression_comp_2 -> GTHAN .)
    MINUS           reduce using rule 113 (expression_comp_2 -> GTHAN .)
    MULTIPLY        reduce using rule 113 (expression_comp_2 -> GTHAN .)
    DIVIDE          reduce using rule 113 (expression_comp_2 -> GTHAN .)
    AND             reduce using rule 113 (expression_comp_2 -> GTHAN .)
    OR              reduce using rule 113 (expression_comp_2 -> GTHAN .)
    SEMICOLON       reduce using rule 113 (expression_comp_2 -> GTHAN .)
    RPAREN          reduce using rule 113 (expression_comp_2 -> GTHAN .)
    COMMA           reduce using rule 113 (expression_comp_2 -> GTHAN .)
    RSQBRACKET      reduce using rule 113 (expression_comp_2 -> GTHAN .)


state 176

    (114) m_exp -> term m_exp_sr .

    EQUAL           reduce using rule 114 (m_exp -> term m_exp_sr .)
    NOTEQUAL        reduce using rule 114 (m_exp -> term m_exp_sr .)
    LTHAN           reduce using rule 114 (m_exp -> term m_exp_sr .)
    GTHAN           reduce using rule 114 (m_exp -> term m_exp_sr .)
    AND             reduce using rule 114 (m_exp -> term m_exp_sr .)
    OR              reduce using rule 114 (m_exp -> term m_exp_sr .)
    SEMICOLON       reduce using rule 114 (m_exp -> term m_exp_sr .)
    RPAREN          reduce using rule 114 (m_exp -> term m_exp_sr .)
    COMMA           reduce using rule 114 (m_exp -> term m_exp_sr .)
    RSQBRACKET      reduce using rule 114 (m_exp -> term m_exp_sr .)


state 177

    (115) m_exp_sr -> m_exp_sr_2 . m_exp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp                          shift and go to state 214
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 178

    (116) m_exp_sr -> empty .

    EQUAL           reduce using rule 116 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 116 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 116 (m_exp_sr -> empty .)
    GTHAN           reduce using rule 116 (m_exp_sr -> empty .)
    AND             reduce using rule 116 (m_exp_sr -> empty .)
    OR              reduce using rule 116 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 116 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 116 (m_exp_sr -> empty .)
    COMMA           reduce using rule 116 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 116 (m_exp_sr -> empty .)


state 179

    (117) m_exp_sr_2 -> PLUS .

    LPAREN          reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    CTE_FLOAT       reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    PLUS            reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    MINUS           reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    MULTIPLY        reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    DIVIDE          reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    EQUAL           reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    NOTEQUAL        reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    LTHAN           reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    GTHAN           reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    AND             reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    OR              reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    SEMICOLON       reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    RPAREN          reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    COMMA           reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    RSQBRACKET      reduce using rule 117 (m_exp_sr_2 -> PLUS .)


state 180

    (118) m_exp_sr_2 -> MINUS .

    LPAREN          reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    CTE_FLOAT       reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    PLUS            reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    MINUS           reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    MULTIPLY        reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    DIVIDE          reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    EQUAL           reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    NOTEQUAL        reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    LTHAN           reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    GTHAN           reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    AND             reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    OR              reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    SEMICOLON       reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    RPAREN          reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    COMMA           reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    RSQBRACKET      reduce using rule 118 (m_exp_sr_2 -> MINUS .)


state 181

    (119) term -> factor term_pc .

    PLUS            reduce using rule 119 (term -> factor term_pc .)
    MINUS           reduce using rule 119 (term -> factor term_pc .)
    EQUAL           reduce using rule 119 (term -> factor term_pc .)
    NOTEQUAL        reduce using rule 119 (term -> factor term_pc .)
    LTHAN           reduce using rule 119 (term -> factor term_pc .)
    GTHAN           reduce using rule 119 (term -> factor term_pc .)
    AND             reduce using rule 119 (term -> factor term_pc .)
    OR              reduce using rule 119 (term -> factor term_pc .)
    SEMICOLON       reduce using rule 119 (term -> factor term_pc .)
    RPAREN          reduce using rule 119 (term -> factor term_pc .)
    COMMA           reduce using rule 119 (term -> factor term_pc .)
    RSQBRACKET      reduce using rule 119 (term -> factor term_pc .)


state 182

    (120) term_pc -> term_pc_2 . term
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    term                           shift and go to state 215
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 183

    (121) term_pc -> empty .

    PLUS            reduce using rule 121 (term_pc -> empty .)
    MINUS           reduce using rule 121 (term_pc -> empty .)
    EQUAL           reduce using rule 121 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 121 (term_pc -> empty .)
    LTHAN           reduce using rule 121 (term_pc -> empty .)
    GTHAN           reduce using rule 121 (term_pc -> empty .)
    AND             reduce using rule 121 (term_pc -> empty .)
    OR              reduce using rule 121 (term_pc -> empty .)
    SEMICOLON       reduce using rule 121 (term_pc -> empty .)
    RPAREN          reduce using rule 121 (term_pc -> empty .)
    COMMA           reduce using rule 121 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 121 (term_pc -> empty .)


state 184

    (122) term_pc_2 -> MULTIPLY .

    LPAREN          reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    CTE_FLOAT       reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    MULTIPLY        reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    DIVIDE          reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    PLUS            reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    MINUS           reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    EQUAL           reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    NOTEQUAL        reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    LTHAN           reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    GTHAN           reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    AND             reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    OR              reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    SEMICOLON       reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    RPAREN          reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    COMMA           reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    RSQBRACKET      reduce using rule 122 (term_pc_2 -> MULTIPLY .)


state 185

    (123) term_pc_2 -> DIVIDE .

    LPAREN          reduce using rule 123 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 123 (term_pc_2 -> DIVIDE .)
    CTE_FLOAT       reduce using rule 123 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 123 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 123 (term_pc_2 -> DIVIDE .)
    MULTIPLY        reduce using rule 123 (term_pc_2 -> DIVIDE .)
    DIVIDE          reduce using rule 123 (term_pc_2 -> DIVIDE .)
    PLUS            reduce using rule 123 (term_pc_2 -> DIVIDE .)
    MINUS           reduce using rule 123 (term_pc_2 -> DIVIDE .)
    EQUAL           reduce using rule 123 (term_pc_2 -> DIVIDE .)
    NOTEQUAL        reduce using rule 123 (term_pc_2 -> DIVIDE .)
    LTHAN           reduce using rule 123 (term_pc_2 -> DIVIDE .)
    GTHAN           reduce using rule 123 (term_pc_2 -> DIVIDE .)
    AND             reduce using rule 123 (term_pc_2 -> DIVIDE .)
    OR              reduce using rule 123 (term_pc_2 -> DIVIDE .)
    SEMICOLON       reduce using rule 123 (term_pc_2 -> DIVIDE .)
    RPAREN          reduce using rule 123 (term_pc_2 -> DIVIDE .)
    COMMA           reduce using rule 123 (term_pc_2 -> DIVIDE .)
    RSQBRACKET      reduce using rule 123 (term_pc_2 -> DIVIDE .)


state 186

    (128) factor_exp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 216


state 187

    (53) condition -> IF LPAREN exp RPAREN . body condition2 SEMICOLON
    (48) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 108

    body                           shift and go to state 217

state 188

    (56) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 218


state 189

    (59) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 59 (print_many -> print_type print_many2 .)


state 190

    (60) print_many2 -> COMMA . print_type print_many2
    (57) print_type -> . ID
    (58) print_type -> . CTE_CHAR

    ID              shift and go to state 141
    CTE_CHAR        shift and go to state 142

    print_type                     shift and go to state 219

state 191

    (61) print_many2 -> empty .

    RPAREN          reduce using rule 61 (print_many2 -> empty .)


state 192

    (62) read -> READ LPAREN variable RPAREN .

    IF              reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    PRINT           reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    READ            reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    ID              reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    FOR             reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    DO              reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    EXPLORATION     reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    FINANCIAL_STATE reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    DUMMI_REGRESSION reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    SEASON_ANALYSIS reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    TREND_PREDICTION reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    MODEL_PREDICT   reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    ASSIGN          reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    RBRACKET        reduce using rule 62 (read -> READ LPAREN variable RPAREN .)
    RETURN          reduce using rule 62 (read -> READ LPAREN variable RPAREN .)


state 193

    (69) call_function -> ID LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 220


state 194

    (70) exp_many -> COMMA . exp exp_many
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    exp                            shift and go to state 221
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 195

    (71) exp_many -> empty .

    RPAREN          reduce using rule 71 (exp_many -> empty .)


state 196

    (35) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (37) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (38) variable_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 222
    ASSIGN          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_matrix                shift and go to state 223
    empty                          shift and go to state 224

state 197

    (66) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (67) for_end -> . CTE_INT
    (68) for_end -> . ID

    CTE_INT         shift and go to state 227
    ID              shift and go to state 225

    for_end                        shift and go to state 226

state 198

    (65) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    exp                            shift and go to state 228
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 199

    (48) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 48 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 48 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 48 (body -> LBRACKET inner_body RBRACKET .)


state 200

    (85) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (88) explor_cte -> . COMMA CTE_INT
    (89) explor_cte -> . empty
    (2) empty -> .

    COMMA           shift and go to state 230
    RPAREN          reduce using rule 2 (empty -> .)

    explor_cte                     shift and go to state 229
    empty                          shift and go to state 231

state 201

    (86) explore_var -> COMMA . variable
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    variable                       shift and go to state 232
    empty                          shift and go to state 137

state 202

    (87) explore_var -> empty .

    COMMA           reduce using rule 87 (explore_var -> empty .)
    RPAREN          reduce using rule 87 (explore_var -> empty .)


state 203

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)

    variable                       shift and go to state 233
    empty                          shift and go to state 137

state 204

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    variable                       shift and go to state 234
    empty                          shift and go to state 137

state 205

    (91) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    IF              reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    PRINT           reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    READ            reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    ID              reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    FOR             reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    DO              reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    EXPLORATION     reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    FINANCIAL_STATE reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    DUMMI_REGRESSION reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    SEASON_ANALYSIS reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    TREND_PREDICTION reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    MODEL_PREDICT   reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    ASSIGN          reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    RBRACKET        reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)
    RETURN          reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 206

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 235


state 207

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)

    variable                       shift and go to state 236
    empty                          shift and go to state 137

state 208

    (39) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET inner_body . return RBRACKET
    (45) return -> . RETURN var_cte SEMICOLON
    (46) return -> . empty
    (2) empty -> .

    RETURN          shift and go to state 238
    RBRACKET        reduce using rule 2 (empty -> .)

    return                         shift and go to state 237
    empty                          shift and go to state 239

state 209

    (43) param2 -> COMMA s_type . ID param2

    ID              shift and go to state 240


state 210

    (31) var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .

    COMMA           reduce using rule 31 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)
    SEMICOLON       reduce using rule 31 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)


state 211

    (102) exp_or -> OR exp .

    SEMICOLON       reduce using rule 102 (exp_or -> OR exp .)
    RPAREN          reduce using rule 102 (exp_or -> OR exp .)
    COMMA           reduce using rule 102 (exp_or -> OR exp .)
    RSQBRACKET      reduce using rule 102 (exp_or -> OR exp .)


state 212

    (105) t_exp_and -> AND t_exp .

    OR              reduce using rule 105 (t_exp_and -> AND t_exp .)
    SEMICOLON       reduce using rule 105 (t_exp_and -> AND t_exp .)
    RPAREN          reduce using rule 105 (t_exp_and -> AND t_exp .)
    COMMA           reduce using rule 105 (t_exp_and -> AND t_exp .)
    RSQBRACKET      reduce using rule 105 (t_exp_and -> AND t_exp .)


state 213

    (108) expression_comp -> expression_comp_2 m_exp .

    AND             reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    OR              reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    SEMICOLON       reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    RPAREN          reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    COMMA           reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    RSQBRACKET      reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)


state 214

    (115) m_exp_sr -> m_exp_sr_2 m_exp .

    EQUAL           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GTHAN           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 215

    (120) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 120 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 120 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 120 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 120 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 120 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 120 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 120 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 120 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 120 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 120 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 120 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 120 (term_pc -> term_pc_2 term .)


state 216

    (128) factor_exp -> LPAREN exp RPAREN .

    MULTIPLY        reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    LTHAN           reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    GTHAN           reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)
    RSQBRACKET      reduce using rule 128 (factor_exp -> LPAREN exp RPAREN .)


state 217

    (53) condition -> IF LPAREN exp RPAREN body . condition2 SEMICOLON
    (54) condition2 -> . ELSE body
    (55) condition2 -> . empty
    (2) empty -> .

    ELSE            shift and go to state 242
    SEMICOLON       reduce using rule 2 (empty -> .)

    condition2                     shift and go to state 241
    empty                          shift and go to state 243

state 218

    (56) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    READ            reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    EXPLORATION     reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FINANCIAL_STATE reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DUMMI_REGRESSION reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    SEASON_ANALYSIS reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    TREND_PREDICTION reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    MODEL_PREDICT   reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 56 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 219

    (60) print_many2 -> COMMA print_type . print_many2
    (60) print_many2 -> . COMMA print_type print_many2
    (61) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 190
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 244
    empty                          shift and go to state 191

state 220

    (69) call_function -> ID LPAREN exp exp_many RPAREN .

    IF              reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    READ            reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    EXPLORATION     reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    FINANCIAL_STATE reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DUMMI_REGRESSION reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    SEASON_ANALYSIS reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    TREND_PREDICTION reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MODEL_PREDICT   reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    ASSIGN          reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 69 (call_function -> ID LPAREN exp exp_many RPAREN .)


state 221

    (70) exp_many -> COMMA exp . exp_many
    (70) exp_many -> . COMMA exp exp_many
    (71) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 245
    empty                          shift and go to state 195

state 222

    (37) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . factor term_pc
    (124) factor -> . factor_exp
    (125) factor -> . factor_cte
    (126) factor -> . variable
    (127) factor -> . call_function
    (128) factor_exp -> . LPAREN exp RPAREN
    (129) factor_cte -> . CTE_INT
    (130) factor_cte -> . CTE_FLOAT
    (131) factor_cte -> . CTE_CHAR
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (69) call_function -> . ID LPAREN exp exp_many RPAREN
    (2) empty -> .

    LPAREN          shift and go to state 132
    CTE_INT         shift and go to state 133
    CTE_FLOAT       shift and go to state 134
    CTE_CHAR        shift and go to state 135
    ID              shift and go to state 136
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp                            shift and go to state 246
    t_exp                          shift and go to state 124
    expression                     shift and go to state 125
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    factor                         shift and go to state 128
    factor_exp                     shift and go to state 129
    factor_cte                     shift and go to state 130
    variable                       shift and go to state 122
    call_function                  shift and go to state 131
    empty                          shift and go to state 137

state 223

    (35) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 224

    (38) variable_matrix -> empty .

    ASSIGN          reduce using rule 38 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 38 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 38 (variable_matrix -> empty .)
    PLUS            reduce using rule 38 (variable_matrix -> empty .)
    MINUS           reduce using rule 38 (variable_matrix -> empty .)
    EQUAL           reduce using rule 38 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 38 (variable_matrix -> empty .)
    LTHAN           reduce using rule 38 (variable_matrix -> empty .)
    GTHAN           reduce using rule 38 (variable_matrix -> empty .)
    AND             reduce using rule 38 (variable_matrix -> empty .)
    OR              reduce using rule 38 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 38 (variable_matrix -> empty .)
    RPAREN          reduce using rule 38 (variable_matrix -> empty .)
    COMMA           reduce using rule 38 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 38 (variable_matrix -> empty .)


state 225

    (68) for_end -> ID .

    RPAREN          reduce using rule 68 (for_end -> ID .)


state 226

    (66) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 247


state 227

    (67) for_end -> CTE_INT .

    RPAREN          reduce using rule 67 (for_end -> CTE_INT .)


state 228

    (65) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 248


state 229

    (85) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 249


state 230

    (88) explor_cte -> COMMA . CTE_INT

    CTE_INT         shift and go to state 250


state 231

    (89) explor_cte -> empty .

    RPAREN          reduce using rule 89 (explor_cte -> empty .)


state 232

    (86) explore_var -> COMMA variable .

    COMMA           reduce using rule 86 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 86 (explore_var -> COMMA variable .)


state 233

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 251


state 234

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (94) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (95) dr_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 252
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    dr_array                       shift and go to state 253
    empty                          shift and go to state 254

state 235

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT . COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 255


state 236

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 256


state 237

    (39) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET inner_body return . RBRACKET

    RBRACKET        shift and go to state 257


state 238

    (45) return -> RETURN . var_cte SEMICOLON
    (12) var_cte -> . ID
    (13) var_cte -> . CTE_INT
    (14) var_cte -> . CTE_FLOAT
    (15) var_cte -> . CTE_CHAR

    ID              shift and go to state 259
    CTE_INT         shift and go to state 260
    CTE_FLOAT       shift and go to state 261
    CTE_CHAR        shift and go to state 262

    var_cte                        shift and go to state 258

state 239

    (46) return -> empty .

    RBRACKET        reduce using rule 46 (return -> empty .)


state 240

    (43) param2 -> COMMA s_type ID . param2
    (43) param2 -> . COMMA s_type ID param2
    (44) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 158
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 263
    empty                          shift and go to state 159

state 241

    (53) condition -> IF LPAREN exp RPAREN body condition2 . SEMICOLON

    SEMICOLON       shift and go to state 264


state 242

    (54) condition2 -> ELSE . body
    (48) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 108

    body                           shift and go to state 265

state 243

    (55) condition2 -> empty .

    SEMICOLON       reduce using rule 55 (condition2 -> empty .)


state 244

    (60) print_many2 -> COMMA print_type print_many2 .

    RPAREN          reduce using rule 60 (print_many2 -> COMMA print_type print_many2 .)


state 245

    (70) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 70 (exp_many -> COMMA exp exp_many .)


state 246

    (37) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 266


state 247

    (66) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (48) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 108

    body                           shift and go to state 267

state 248

    (65) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 268


state 249

    (85) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    IF              reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    PRINT           reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    READ            reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    ID              reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    FOR             reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    DO              reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    EXPLORATION     reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    FINANCIAL_STATE reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    DUMMI_REGRESSION reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    SEASON_ANALYSIS reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    TREND_PREDICTION reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    MODEL_PREDICT   reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    ASSIGN          reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    RBRACKET        reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)
    RETURN          reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 250

    (88) explor_cte -> COMMA CTE_INT .

    RPAREN          reduce using rule 88 (explor_cte -> COMMA CTE_INT .)


state 251

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    COMMA           reduce using rule 2 (empty -> .)

    variable                       shift and go to state 269
    empty                          shift and go to state 137

state 252

    (94) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 270


state 253

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (98) dr_int -> . COMMA CTE_INT
    (99) dr_int -> . empty
    (2) empty -> .

    COMMA           shift and go to state 271
    RPAREN          reduce using rule 2 (empty -> .)

    dr_int                         shift and go to state 272
    empty                          shift and go to state 273

state 254

    (95) dr_array -> empty .

    COMMA           reduce using rule 95 (dr_array -> empty .)
    RPAREN          reduce using rule 95 (dr_array -> empty .)


state 255

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA . CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 274


state 256

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 275


state 257

    (39) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET inner_body return RBRACKET .

    MAIN            reduce using rule 39 (program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET inner_body return RBRACKET .)


state 258

    (45) return -> RETURN var_cte . SEMICOLON

    SEMICOLON       shift and go to state 276


state 259

    (12) var_cte -> ID .

    SEMICOLON       reduce using rule 12 (var_cte -> ID .)


state 260

    (13) var_cte -> CTE_INT .

    SEMICOLON       reduce using rule 13 (var_cte -> CTE_INT .)


state 261

    (14) var_cte -> CTE_FLOAT .

    SEMICOLON       reduce using rule 14 (var_cte -> CTE_FLOAT .)


state 262

    (15) var_cte -> CTE_CHAR .

    SEMICOLON       reduce using rule 15 (var_cte -> CTE_CHAR .)


state 263

    (43) param2 -> COMMA s_type ID param2 .

    RPAREN          reduce using rule 43 (param2 -> COMMA s_type ID param2 .)


state 264

    (53) condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .

    IF              reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    PRINT           reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    READ            reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ID              reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FOR             reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DO              reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    EXPLORATION     reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FINANCIAL_STATE reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DUMMI_REGRESSION reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    SEASON_ANALYSIS reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    TREND_PREDICTION reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    MODEL_PREDICT   reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ASSIGN          reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RBRACKET        reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RETURN          reduce using rule 53 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)


state 265

    (54) condition2 -> ELSE body .

    SEMICOLON       reduce using rule 54 (condition2 -> ELSE body .)


state 266

    (37) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 267

    (66) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 277


state 268

    (65) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    READ            reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    EXPLORATION     reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FINANCIAL_STATE reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DUMMI_REGRESSION reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    SEASON_ANALYSIS reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    TREND_PREDICTION reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    MODEL_PREDICT   reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 269

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 278


state 270

    (94) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 279


state 271

    (98) dr_int -> COMMA . CTE_INT

    CTE_INT         shift and go to state 280


state 272

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 281


state 273

    (99) dr_int -> empty .

    RPAREN          reduce using rule 99 (dr_int -> empty .)


state 274

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT . COMMA CTE_INT RPAREN

    COMMA           shift and go to state 282


state 275

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    IF              reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    PRINT           reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    READ            reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    ID              reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    FOR             reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    DO              reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    EXPLORATION     reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    FINANCIAL_STATE reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    DUMMI_REGRESSION reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    SEASON_ANALYSIS reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    TREND_PREDICTION reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    MODEL_PREDICT   reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    ASSIGN          reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    RBRACKET        reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)
    RETURN          reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 276

    (45) return -> RETURN var_cte SEMICOLON .

    RBRACKET        reduce using rule 45 (return -> RETURN var_cte SEMICOLON .)


state 277

    (66) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    READ            reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    EXPLORATION     reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FINANCIAL_STATE reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DUMMI_REGRESSION reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    SEASON_ANALYSIS reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    TREND_PREDICTION reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    MODEL_PREDICT   reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ASSIGN          reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 66 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 278

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (33) variable -> . ID variable_array
    (34) variable -> . empty
    (2) empty -> .

    ID              shift and go to state 144
    RPAREN          reduce using rule 2 (empty -> .)

    variable                       shift and go to state 283
    empty                          shift and go to state 137

state 279

    (94) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (96) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (97) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 284
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 285
    empty                          shift and go to state 286

state 280

    (98) dr_int -> COMMA CTE_INT .

    RPAREN          reduce using rule 98 (dr_int -> COMMA CTE_INT .)


state 281

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    IF              reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    PRINT           reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    READ            reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    ID              reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    FOR             reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    DO              reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    EXPLORATION     reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    FINANCIAL_STATE reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    DUMMI_REGRESSION reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    SEASON_ANALYSIS reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    TREND_PREDICTION reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    MODEL_PREDICT   reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    ASSIGN          reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    RBRACKET        reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)
    RETURN          reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 282

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA . CTE_INT RPAREN

    CTE_INT         shift and go to state 287


state 283

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 288


state 284

    (96) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 289


state 285

    (94) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 290


state 286

    (97) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 97 (dr_array_mp -> empty .)


state 287

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT . RPAREN

    RPAREN          shift and go to state 291


state 288

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    IF              reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    PRINT           reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    READ            reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    ID              reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    FOR             reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    DO              reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    EXPLORATION     reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    FINANCIAL_STATE reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    DUMMI_REGRESSION reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    SEASON_ANALYSIS reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    TREND_PREDICTION reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    MODEL_PREDICT   reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    ASSIGN          reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    RBRACKET        reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)
    RETURN          reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 289

    (96) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (96) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (97) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 284
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 292
    empty                          shift and go to state 286

state 290

    (94) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 94 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 94 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 291

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .

    IF              reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    PRINT           reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    READ            reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    ID              reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    FOR             reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    DO              reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    EXPLORATION     reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    FINANCIAL_STATE reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    DUMMI_REGRESSION reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    SEASON_ANALYSIS reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    TREND_PREDICTION reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    MODEL_PREDICT   reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    ASSIGN          reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    RBRACKET        reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)
    RETURN          reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)


state 292

    (96) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 96 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 150 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 234 resolved as shift
