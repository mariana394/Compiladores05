Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    POWER

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END
Rule 2     empty -> <empty>
Rule 3     id_saver -> ID empty
Rule 4     program_libraries -> from_library import_library
Rule 5     program_libraries -> empty
Rule 6     from_library -> FROM ID
Rule 7     from_library -> empty
Rule 8     import_library -> IMPORT ID AS ID program_libraries
Rule 9     var_type -> var_c_type
Rule 10    var_type -> var_s_type
Rule 11    program_vars -> VAR var_type
Rule 12    program_vars -> empty
Rule 13    s_type -> INT
Rule 14    s_type -> FLOAT
Rule 15    s_type -> CHAR
Rule 16    c_type -> DATAFRAME
Rule 17    c_type -> DATE
Rule 18    var_multiple -> var_type
Rule 19    var_multiple -> empty
Rule 20    var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple
Rule 21    var_c_type2 -> COMMA ID var_c_type2
Rule 22    var_c_type2 -> empty
Rule 23    var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
Rule 24    var_s_type2 -> COMMA ID var_s_array var_s_type2
Rule 25    var_s_type2 -> empty
Rule 26    var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
Rule 27    var_s_array -> empty
Rule 28    var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET
Rule 29    var_s_matrix -> empty
Rule 30    variable -> ID variable_array
Rule 31    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 32    variable_array -> empty
Rule 33    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 34    variable_matrix -> empty
Rule 35    program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
Rule 36    program_function -> empty
Rule 37    f_type -> INT
Rule 38    f_type -> FLOAT
Rule 39    f_type -> CHAR
Rule 40    f_type -> VOID
Rule 41    func_creator -> empty
Rule 42    param -> s_type id_saver test param2
Rule 43    param2 -> COMMA s_type id_saver test param2
Rule 44    param2 -> empty
Rule 45    test -> empty
Rule 46    return -> RETURN exp SEMICOLON
Rule 47    return -> empty
Rule 48    program_main -> MAIN LBRACKET program_vars inner_body RBRACKET
Rule 49    body -> LBRACKET inner_body RBRACKET
Rule 50    inner_body -> statement inner_body
Rule 51    inner_body -> empty
Rule 52    assign -> variable ASSIGN specialf_assign SEMICOLON
Rule 53    specialf_assign -> exp
Rule 54    specialf_assign -> special_function
Rule 55    specialf_assign -> read
Rule 56    condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON
Rule 57    condition2 -> ELSE body
Rule 58    condition2 -> empty
Rule 59    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 60    print_type -> exp
Rule 61    print_many -> print_type print_many2
Rule 62    print_many2 -> COMMA print_type print_many2
Rule 63    print_many2 -> empty
Rule 64    read -> READ LPAREN variable RPAREN
Rule 65    cycle -> for
Rule 66    cycle -> while
Rule 67    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 68    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 69    for_end -> CTE_INT
Rule 70    for_end -> ID
Rule 71    call_function -> ID LPAREN exp exp_many RPAREN
Rule 72    exp_many -> COMMA exp exp_many
Rule 73    exp_many -> empty
Rule 74    statement -> assign
Rule 75    statement -> condition
Rule 76    statement -> print
Rule 77    statement -> cycle
Rule 78    statement -> call_function
Rule 79    special_function -> exploration
Rule 80    special_function -> financial_state
Rule 81    special_function -> dummi_regression
Rule 82    special_function -> season_analysis
Rule 83    special_function -> trend_prediction
Rule 84    special_function -> model_predict
Rule 85    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 86    explore_var -> COMMA variable
Rule 87    explore_var -> empty
Rule 88    explor_cte -> COMMA CTE_INT
Rule 89    explor_cte -> empty
Rule 90    financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 91    season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 92    trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
Rule 93    dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 94    dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 95    dr_array -> empty
Rule 96    dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 97    dr_array_mp -> empty
Rule 98    dr_int -> COMMA CTE_INT
Rule 99    dr_int -> empty
Rule 100   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 101   exp -> t_exp exp_or
Rule 102   exp_or -> OR exp
Rule 103   exp_or -> empty
Rule 104   t_exp -> expression t_exp_and
Rule 105   t_exp_and -> AND t_exp
Rule 106   t_exp_and -> empty
Rule 107   expression -> m_exp expression_comp
Rule 108   expression_comp -> expression_comp_2 m_exp
Rule 109   expression_comp -> empty
Rule 110   expression_comp_2 -> EQUAL
Rule 111   expression_comp_2 -> NOTEQUAL
Rule 112   expression_comp_2 -> LTHAN
Rule 113   expression_comp_2 -> GTHAN
Rule 114   m_exp -> term m_exp_sr
Rule 115   m_exp_sr -> m_exp_sr_2 m_exp
Rule 116   m_exp_sr -> empty
Rule 117   m_exp_sr_2 -> PLUS
Rule 118   m_exp_sr_2 -> MINUS
Rule 119   term -> sub_factor term_pc
Rule 120   term_pc -> term_pc_2 term
Rule 121   term_pc -> empty
Rule 122   term_pc_2 -> MULTIPLY
Rule 123   term_pc_2 -> DIVIDE
Rule 124   term_pc_2 -> MODULE
Rule 125   sub_factor -> factor sub_factor_pc
Rule 126   sub_factor_pc -> MODULE sub_factor
Rule 127   sub_factor_pc -> empty
Rule 128   factor -> factor_exp
Rule 129   factor -> factor_cte
Rule 130   factor -> variable
Rule 131   factor -> call_function
Rule 132   factor_exp -> LPAREN exp RPAREN
Rule 133   factor_cte -> CTE_INT
Rule 134   factor_cte -> CTE_FLOAT
Rule 135   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 105
AS                   : 8
ASSIGN               : 52
CHAR                 : 15 39
COLON                : 
COMMA                : 21 24 43 62 72 86 88 90 90 90 92 92 92 93 94 96 98 100 100
CTE_CHAR             : 94 96 135
CTE_FLOAT            : 134
CTE_INT              : 26 28 69 88 92 92 92 98 133
DATAFRAME            : 16
DATE                 : 17
DIVIDE               : 123
DO                   : 67
DUMMI_REGRESSION     : 93
ELSE                 : 57
END                  : 1
EQUAL                : 110
EXPLORATION          : 85
FINANCIAL_STATE      : 90
FLOAT                : 14 38
FOR                  : 68
FROM                 : 6
FUNCTION             : 35
GTHAN                : 113
ID                   : 1 3 6 8 8 20 21 23 24 30 68 70 71
IF                   : 56
IMPORT               : 8
INT                  : 13 37
LBRACKET             : 35 48 49
LPAREN               : 35 56 59 64 67 68 71 85 90 91 92 93 100 132
LSQBRACKET           : 26 28 31 33 94
LTHAN                : 112
MAIN                 : 48
MINUS                : 118
MODEL_PREDICT        : 100
MODULE               : 124 126
MULTIPLY             : 122
NOTEQUAL             : 111
OR                   : 102
PLUS                 : 117
POWER                : 
PRINT                : 59
PROGRAM              : 1
RBRACKET             : 35 48 49
READ                 : 64
RETURN               : 46
RPAREN               : 35 56 59 64 67 68 71 85 90 91 92 93 100 132
RSQBRACKET           : 26 28 31 33 94
SEASON_ANALYSIS      : 91
SEMICOLON            : 1 20 23 46 52 56 59 67 68
TO                   : 68
TREND_PREDICTION     : 92
VAR                  : 11
VOID                 : 40
WHILE                : 67
error                : 

Nonterminals, with rules where they appear

assign               : 74
body                 : 56 57 67 68
c_type               : 20
call_function        : 78 131
condition            : 75
condition2           : 56
cycle                : 77
dr_array             : 93
dr_array_mp          : 94 96
dr_int               : 93
dummi_regression     : 81
empty                : 3 5 7 12 19 22 25 27 29 32 34 36 41 44 45 47 51 58 63 73 87 89 95 97 99 103 106 109 116 121 127
exp                  : 31 33 46 53 56 60 67 71 72 102 132
exp_many             : 71 72
exp_or               : 101
explor_cte           : 85
exploration          : 79
explore_var          : 85
expression           : 104
expression_comp      : 107
expression_comp_2    : 108
f_type               : 35
factor               : 125
factor_cte           : 129
factor_exp           : 128
financial_state      : 80
for                  : 65
for_end              : 68
from_library         : 4
func_creator         : 35
id_saver             : 35 42 43
import_library       : 4
inner_body           : 35 48 49 50
m_exp                : 107 108 115
m_exp_sr             : 114
m_exp_sr_2           : 115
model_predict        : 84
param                : 35
param2               : 42 43
print                : 76
print_many           : 59
print_many2          : 61 62
print_type           : 61 62
program              : 0
program_function     : 1 35
program_libraries    : 1 8
program_main         : 1
program_vars         : 1 35 48
read                 : 55
return               : 35
s_type               : 23 42 43
season_analysis      : 82
special_function     : 54
specialf_assign      : 52
statement            : 50
sub_factor           : 119 126
sub_factor_pc        : 125
t_exp                : 101 105
t_exp_and            : 104
term                 : 114 120
term_pc              : 119
term_pc_2            : 120
test                 : 42 43
trend_prediction     : 83
var_c_type           : 9
var_c_type2          : 20 21
var_multiple         : 20 23
var_s_array          : 23 24
var_s_matrix         : 26
var_s_type           : 10
var_s_type2          : 23 24
var_type             : 11 18
variable             : 52 64 85 86 90 90 90 90 91 92 93 93 100 100 130
variable_array       : 30
variable_matrix      : 31
while                : 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main END
    (4) program_libraries -> . from_library import_library
    (5) program_libraries -> . empty
    (6) from_library -> . FROM ID
    (7) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main END
    (11) program_vars -> . VAR var_type
    (12) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (4) program_libraries -> from_library . import_library
    (8) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (5) program_libraries -> empty .
    (7) from_library -> empty .

    VAR             reduce using rule 5 (program_libraries -> empty .)
    FUNCTION        reduce using rule 5 (program_libraries -> empty .)
    MAIN            reduce using rule 5 (program_libraries -> empty .)
    IMPORT          reduce using rule 7 (from_library -> empty .)


state 8

    (6) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main END
    (35) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (36) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 15
    empty                          shift and go to state 17

state 10

    (11) program_vars -> VAR . var_type
    (9) var_type -> . var_c_type
    (10) var_type -> . var_s_type
    (20) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (23) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (16) c_type -> . DATAFRAME
    (17) c_type -> . DATE
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    var_type                       shift and go to state 18
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21
    s_type                         shift and go to state 22

state 11

    (12) program_vars -> empty .

    FUNCTION        reduce using rule 12 (program_vars -> empty .)
    MAIN            reduce using rule 12 (program_vars -> empty .)
    IF              reduce using rule 12 (program_vars -> empty .)
    PRINT           reduce using rule 12 (program_vars -> empty .)
    ID              reduce using rule 12 (program_vars -> empty .)
    FOR             reduce using rule 12 (program_vars -> empty .)
    DO              reduce using rule 12 (program_vars -> empty .)
    RBRACKET        reduce using rule 12 (program_vars -> empty .)
    RETURN          reduce using rule 12 (program_vars -> empty .)


state 12

    (4) program_libraries -> from_library import_library .

    VAR             reduce using rule 4 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 4 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 4 (program_libraries -> from_library import_library .)


state 13

    (8) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 28


state 14

    (6) from_library -> FROM ID .

    IMPORT          reduce using rule 6 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main END
    (48) program_main -> . MAIN LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 30

    program_main                   shift and go to state 29

state 16

    (35) program_function -> FUNCTION . f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (37) f_type -> . INT
    (38) f_type -> . FLOAT
    (39) f_type -> . CHAR
    (40) f_type -> . VOID

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    f_type                         shift and go to state 31

state 17

    (36) program_function -> empty .

    MAIN            reduce using rule 36 (program_function -> empty .)


state 18

    (11) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 11 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 11 (program_vars -> VAR var_type .)
    IF              reduce using rule 11 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 11 (program_vars -> VAR var_type .)
    ID              reduce using rule 11 (program_vars -> VAR var_type .)
    FOR             reduce using rule 11 (program_vars -> VAR var_type .)
    DO              reduce using rule 11 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 11 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 11 (program_vars -> VAR var_type .)


state 19

    (9) var_type -> var_c_type .

    FUNCTION        reduce using rule 9 (var_type -> var_c_type .)
    MAIN            reduce using rule 9 (var_type -> var_c_type .)
    IF              reduce using rule 9 (var_type -> var_c_type .)
    PRINT           reduce using rule 9 (var_type -> var_c_type .)
    ID              reduce using rule 9 (var_type -> var_c_type .)
    FOR             reduce using rule 9 (var_type -> var_c_type .)
    DO              reduce using rule 9 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 9 (var_type -> var_c_type .)
    RETURN          reduce using rule 9 (var_type -> var_c_type .)


state 20

    (10) var_type -> var_s_type .

    FUNCTION        reduce using rule 10 (var_type -> var_s_type .)
    MAIN            reduce using rule 10 (var_type -> var_s_type .)
    IF              reduce using rule 10 (var_type -> var_s_type .)
    PRINT           reduce using rule 10 (var_type -> var_s_type .)
    ID              reduce using rule 10 (var_type -> var_s_type .)
    FOR             reduce using rule 10 (var_type -> var_s_type .)
    DO              reduce using rule 10 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 10 (var_type -> var_s_type .)
    RETURN          reduce using rule 10 (var_type -> var_s_type .)


state 21

    (20) var_c_type -> c_type . ID var_c_type2 SEMICOLON var_multiple

    ID              shift and go to state 36


state 22

    (23) var_s_type -> s_type . ID var_s_array var_s_type2 SEMICOLON var_multiple

    ID              shift and go to state 37


state 23

    (16) c_type -> DATAFRAME .

    ID              reduce using rule 16 (c_type -> DATAFRAME .)


state 24

    (17) c_type -> DATE .

    ID              reduce using rule 17 (c_type -> DATE .)


state 25

    (13) s_type -> INT .

    ID              reduce using rule 13 (s_type -> INT .)


state 26

    (14) s_type -> FLOAT .

    ID              reduce using rule 14 (s_type -> FLOAT .)


state 27

    (15) s_type -> CHAR .

    ID              reduce using rule 15 (s_type -> CHAR .)


state 28

    (8) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 38


state 29

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . END

    END             shift and go to state 39


state 30

    (48) program_main -> MAIN . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 40


state 31

    (35) program_function -> FUNCTION f_type . id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (3) id_saver -> . ID empty

    ID              shift and go to state 42

    id_saver                       shift and go to state 41

state 32

    (37) f_type -> INT .

    ID              reduce using rule 37 (f_type -> INT .)


state 33

    (38) f_type -> FLOAT .

    ID              reduce using rule 38 (f_type -> FLOAT .)


state 34

    (39) f_type -> CHAR .

    ID              reduce using rule 39 (f_type -> CHAR .)


state 35

    (40) f_type -> VOID .

    ID              reduce using rule 40 (f_type -> VOID .)


state 36

    (20) var_c_type -> c_type ID . var_c_type2 SEMICOLON var_multiple
    (21) var_c_type2 -> . COMMA ID var_c_type2
    (22) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 43
    empty                          shift and go to state 45

state 37

    (23) var_s_type -> s_type ID . var_s_array var_s_type2 SEMICOLON var_multiple
    (26) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (27) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 47
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 46
    empty                          shift and go to state 48

state 38

    (8) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 49


state 39

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .)


state 40

    (48) program_main -> MAIN LBRACKET . program_vars inner_body RBRACKET
    (11) program_vars -> . VAR var_type
    (12) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 50
    empty                          shift and go to state 11

state 41

    (35) program_function -> FUNCTION f_type id_saver . func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (41) func_creator -> . empty
    (2) empty -> .

    LPAREN          reduce using rule 2 (empty -> .)

    func_creator                   shift and go to state 51
    empty                          shift and go to state 52

state 42

    (3) id_saver -> ID . empty
    (2) empty -> .

    LPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    empty                          shift and go to state 53

state 43

    (20) var_c_type -> c_type ID var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 54


state 44

    (21) var_c_type2 -> COMMA . ID var_c_type2

    ID              shift and go to state 55


state 45

    (22) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 22 (var_c_type2 -> empty .)


state 46

    (23) var_s_type -> s_type ID var_s_array . var_s_type2 SEMICOLON var_multiple
    (24) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (25) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 56
    empty                          shift and go to state 58

state 47

    (26) var_s_array -> LSQBRACKET . CTE_INT RSQBRACKET var_s_matrix

    CTE_INT         shift and go to state 59


state 48

    (27) var_s_array -> empty .

    COMMA           reduce using rule 27 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 27 (var_s_array -> empty .)


state 49

    (8) import_library -> IMPORT ID AS ID . program_libraries
    (4) program_libraries -> . from_library import_library
    (5) program_libraries -> . empty
    (6) from_library -> . FROM ID
    (7) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 60
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 50

    (48) program_main -> MAIN LBRACKET program_vars . inner_body RBRACKET
    (50) inner_body -> . statement inner_body
    (51) inner_body -> . empty
    (74) statement -> . assign
    (75) statement -> . condition
    (76) statement -> . print
    (77) statement -> . cycle
    (78) statement -> . call_function
    (2) empty -> .
    (52) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (56) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (59) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (65) cycle -> . for
    (66) cycle -> . while
    (71) call_function -> . ID LPAREN exp exp_many RPAREN
    (30) variable -> . ID variable_array
    (68) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (67) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 75
    DO              shift and go to state 76

    inner_body                     shift and go to state 61
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73

state 51

    (35) program_function -> FUNCTION f_type id_saver func_creator . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    LPAREN          shift and go to state 77


state 52

    (41) func_creator -> empty .

    LPAREN          reduce using rule 41 (func_creator -> empty .)


state 53

    (3) id_saver -> ID empty .

    LPAREN          reduce using rule 3 (id_saver -> ID empty .)
    COMMA           reduce using rule 3 (id_saver -> ID empty .)
    RPAREN          reduce using rule 3 (id_saver -> ID empty .)


state 54

    (20) var_c_type -> c_type ID var_c_type2 SEMICOLON . var_multiple
    (18) var_multiple -> . var_type
    (19) var_multiple -> . empty
    (9) var_type -> . var_c_type
    (10) var_type -> . var_s_type
    (2) empty -> .
    (20) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (23) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (16) c_type -> . DATAFRAME
    (17) c_type -> . DATE
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    c_type                         shift and go to state 21
    var_multiple                   shift and go to state 78
    var_type                       shift and go to state 79
    empty                          shift and go to state 80
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    s_type                         shift and go to state 22

state 55

    (21) var_c_type2 -> COMMA ID . var_c_type2
    (21) var_c_type2 -> . COMMA ID var_c_type2
    (22) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 81
    empty                          shift and go to state 45

state 56

    (23) var_s_type -> s_type ID var_s_array var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 82


state 57

    (24) var_s_type2 -> COMMA . ID var_s_array var_s_type2

    ID              shift and go to state 83


state 58

    (25) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 25 (var_s_type2 -> empty .)


state 59

    (26) var_s_array -> LSQBRACKET CTE_INT . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 84


state 60

    (8) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 8 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 8 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 8 (import_library -> IMPORT ID AS ID program_libraries .)


state 61

    (48) program_main -> MAIN LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 85


state 62

    (50) inner_body -> statement . inner_body
    (50) inner_body -> . statement inner_body
    (51) inner_body -> . empty
    (74) statement -> . assign
    (75) statement -> . condition
    (76) statement -> . print
    (77) statement -> . cycle
    (78) statement -> . call_function
    (2) empty -> .
    (52) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (56) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (59) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (65) cycle -> . for
    (66) cycle -> . while
    (71) call_function -> . ID LPAREN exp exp_many RPAREN
    (30) variable -> . ID variable_array
    (68) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (67) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 75
    DO              shift and go to state 76

    statement                      shift and go to state 62
    inner_body                     shift and go to state 86
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73

state 63

    (51) inner_body -> empty .

    RBRACKET        reduce using rule 51 (inner_body -> empty .)
    RETURN          reduce using rule 51 (inner_body -> empty .)


state 64

    (74) statement -> assign .

    IF              reduce using rule 74 (statement -> assign .)
    PRINT           reduce using rule 74 (statement -> assign .)
    ID              reduce using rule 74 (statement -> assign .)
    FOR             reduce using rule 74 (statement -> assign .)
    DO              reduce using rule 74 (statement -> assign .)
    RBRACKET        reduce using rule 74 (statement -> assign .)
    RETURN          reduce using rule 74 (statement -> assign .)


state 65

    (75) statement -> condition .

    IF              reduce using rule 75 (statement -> condition .)
    PRINT           reduce using rule 75 (statement -> condition .)
    ID              reduce using rule 75 (statement -> condition .)
    FOR             reduce using rule 75 (statement -> condition .)
    DO              reduce using rule 75 (statement -> condition .)
    RBRACKET        reduce using rule 75 (statement -> condition .)
    RETURN          reduce using rule 75 (statement -> condition .)


state 66

    (76) statement -> print .

    IF              reduce using rule 76 (statement -> print .)
    PRINT           reduce using rule 76 (statement -> print .)
    ID              reduce using rule 76 (statement -> print .)
    FOR             reduce using rule 76 (statement -> print .)
    DO              reduce using rule 76 (statement -> print .)
    RBRACKET        reduce using rule 76 (statement -> print .)
    RETURN          reduce using rule 76 (statement -> print .)


state 67

    (77) statement -> cycle .

    IF              reduce using rule 77 (statement -> cycle .)
    PRINT           reduce using rule 77 (statement -> cycle .)
    ID              reduce using rule 77 (statement -> cycle .)
    FOR             reduce using rule 77 (statement -> cycle .)
    DO              reduce using rule 77 (statement -> cycle .)
    RBRACKET        reduce using rule 77 (statement -> cycle .)
    RETURN          reduce using rule 77 (statement -> cycle .)


state 68

    (78) statement -> call_function .

    IF              reduce using rule 78 (statement -> call_function .)
    PRINT           reduce using rule 78 (statement -> call_function .)
    ID              reduce using rule 78 (statement -> call_function .)
    FOR             reduce using rule 78 (statement -> call_function .)
    DO              reduce using rule 78 (statement -> call_function .)
    RBRACKET        reduce using rule 78 (statement -> call_function .)
    RETURN          reduce using rule 78 (statement -> call_function .)


state 69

    (52) assign -> variable . ASSIGN specialf_assign SEMICOLON

    ASSIGN          shift and go to state 87


state 70

    (56) condition -> IF . LPAREN exp RPAREN body condition2 SEMICOLON

    LPAREN          shift and go to state 88


state 71

    (59) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 89


state 72

    (65) cycle -> for .

    IF              reduce using rule 65 (cycle -> for .)
    PRINT           reduce using rule 65 (cycle -> for .)
    ID              reduce using rule 65 (cycle -> for .)
    FOR             reduce using rule 65 (cycle -> for .)
    DO              reduce using rule 65 (cycle -> for .)
    RBRACKET        reduce using rule 65 (cycle -> for .)
    RETURN          reduce using rule 65 (cycle -> for .)


state 73

    (66) cycle -> while .

    IF              reduce using rule 66 (cycle -> while .)
    PRINT           reduce using rule 66 (cycle -> while .)
    ID              reduce using rule 66 (cycle -> while .)
    FOR             reduce using rule 66 (cycle -> while .)
    DO              reduce using rule 66 (cycle -> while .)
    RBRACKET        reduce using rule 66 (cycle -> while .)
    RETURN          reduce using rule 66 (cycle -> while .)


state 74

    (71) call_function -> ID . LPAREN exp exp_many RPAREN
    (30) variable -> ID . variable_array
    (31) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (32) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 90
    LSQBRACKET      shift and go to state 92
    ASSIGN          reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 91
    empty                          shift and go to state 93

state 75

    (68) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 94


state 76

    (67) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (49) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 96

    body                           shift and go to state 95

state 77

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (42) param -> . s_type id_saver test param2
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    param                          shift and go to state 97
    s_type                         shift and go to state 98

state 78

    (20) var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 20 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)


state 79

    (18) var_multiple -> var_type .

    FUNCTION        reduce using rule 18 (var_multiple -> var_type .)
    MAIN            reduce using rule 18 (var_multiple -> var_type .)
    IF              reduce using rule 18 (var_multiple -> var_type .)
    PRINT           reduce using rule 18 (var_multiple -> var_type .)
    ID              reduce using rule 18 (var_multiple -> var_type .)
    FOR             reduce using rule 18 (var_multiple -> var_type .)
    DO              reduce using rule 18 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 18 (var_multiple -> var_type .)
    RETURN          reduce using rule 18 (var_multiple -> var_type .)


state 80

    (19) var_multiple -> empty .

    FUNCTION        reduce using rule 19 (var_multiple -> empty .)
    MAIN            reduce using rule 19 (var_multiple -> empty .)
    IF              reduce using rule 19 (var_multiple -> empty .)
    PRINT           reduce using rule 19 (var_multiple -> empty .)
    ID              reduce using rule 19 (var_multiple -> empty .)
    FOR             reduce using rule 19 (var_multiple -> empty .)
    DO              reduce using rule 19 (var_multiple -> empty .)
    RBRACKET        reduce using rule 19 (var_multiple -> empty .)
    RETURN          reduce using rule 19 (var_multiple -> empty .)


state 81

    (21) var_c_type2 -> COMMA ID var_c_type2 .

    SEMICOLON       reduce using rule 21 (var_c_type2 -> COMMA ID var_c_type2 .)


state 82

    (23) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON . var_multiple
    (18) var_multiple -> . var_type
    (19) var_multiple -> . empty
    (9) var_type -> . var_c_type
    (10) var_type -> . var_s_type
    (2) empty -> .
    (20) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (23) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (16) c_type -> . DATAFRAME
    (17) c_type -> . DATE
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 22
    var_multiple                   shift and go to state 99
    var_type                       shift and go to state 79
    empty                          shift and go to state 80
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21

state 83

    (24) var_s_type2 -> COMMA ID . var_s_array var_s_type2
    (26) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (27) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 47
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 100
    empty                          shift and go to state 48

state 84

    (26) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET . var_s_matrix
    (28) var_s_matrix -> . LSQBRACKET CTE_INT RSQBRACKET
    (29) var_s_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 101
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_matrix                   shift and go to state 102
    empty                          shift and go to state 103

state 85

    (48) program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 48 (program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .)


state 86

    (50) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 50 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 50 (inner_body -> statement inner_body .)


state 87

    (52) assign -> variable ASSIGN . specialf_assign SEMICOLON
    (53) specialf_assign -> . exp
    (54) specialf_assign -> . special_function
    (55) specialf_assign -> . read
    (101) exp -> . t_exp exp_or
    (79) special_function -> . exploration
    (80) special_function -> . financial_state
    (81) special_function -> . dummi_regression
    (82) special_function -> . season_analysis
    (83) special_function -> . trend_prediction
    (84) special_function -> . model_predict
    (64) read -> . READ LPAREN variable RPAREN
    (104) t_exp -> . expression t_exp_and
    (85) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (90) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (93) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (91) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (92) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (100) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    READ            shift and go to state 116
    EXPLORATION     shift and go to state 119
    FINANCIAL_STATE shift and go to state 120
    DUMMI_REGRESSION shift and go to state 121
    SEASON_ANALYSIS shift and go to state 122
    TREND_PREDICTION shift and go to state 123
    MODEL_PREDICT   shift and go to state 125
    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    variable                       shift and go to state 104
    specialf_assign                shift and go to state 105
    exp                            shift and go to state 106
    special_function               shift and go to state 107
    read                           shift and go to state 108
    t_exp                          shift and go to state 109
    exploration                    shift and go to state 110
    financial_state                shift and go to state 111
    dummi_regression               shift and go to state 112
    season_analysis                shift and go to state 113
    trend_prediction               shift and go to state 114
    model_predict                  shift and go to state 115
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    call_function                  shift and go to state 132

state 88

    (56) condition -> IF LPAREN . exp RPAREN body condition2 SEMICOLON
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 136
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 89

    (59) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (61) print_many -> . print_type print_many2
    (60) print_type -> . exp
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    print_many                     shift and go to state 137
    print_type                     shift and go to state 138
    exp                            shift and go to state 139
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 90

    (71) call_function -> ID LPAREN . exp exp_many RPAREN
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 140
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 91

    (30) variable -> ID variable_array .

    ASSIGN          reduce using rule 30 (variable -> ID variable_array .)
    MODULE          reduce using rule 30 (variable -> ID variable_array .)
    MULTIPLY        reduce using rule 30 (variable -> ID variable_array .)
    DIVIDE          reduce using rule 30 (variable -> ID variable_array .)
    PLUS            reduce using rule 30 (variable -> ID variable_array .)
    MINUS           reduce using rule 30 (variable -> ID variable_array .)
    EQUAL           reduce using rule 30 (variable -> ID variable_array .)
    NOTEQUAL        reduce using rule 30 (variable -> ID variable_array .)
    LTHAN           reduce using rule 30 (variable -> ID variable_array .)
    GTHAN           reduce using rule 30 (variable -> ID variable_array .)
    AND             reduce using rule 30 (variable -> ID variable_array .)
    OR              reduce using rule 30 (variable -> ID variable_array .)
    SEMICOLON       reduce using rule 30 (variable -> ID variable_array .)
    RPAREN          reduce using rule 30 (variable -> ID variable_array .)
    COMMA           reduce using rule 30 (variable -> ID variable_array .)
    RSQBRACKET      reduce using rule 30 (variable -> ID variable_array .)


state 92

    (31) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 141
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 93

    (32) variable_array -> empty .

    ASSIGN          reduce using rule 32 (variable_array -> empty .)
    MODULE          reduce using rule 32 (variable_array -> empty .)
    MULTIPLY        reduce using rule 32 (variable_array -> empty .)
    DIVIDE          reduce using rule 32 (variable_array -> empty .)
    PLUS            reduce using rule 32 (variable_array -> empty .)
    MINUS           reduce using rule 32 (variable_array -> empty .)
    EQUAL           reduce using rule 32 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 32 (variable_array -> empty .)
    LTHAN           reduce using rule 32 (variable_array -> empty .)
    GTHAN           reduce using rule 32 (variable_array -> empty .)
    AND             reduce using rule 32 (variable_array -> empty .)
    OR              reduce using rule 32 (variable_array -> empty .)
    SEMICOLON       reduce using rule 32 (variable_array -> empty .)
    RPAREN          reduce using rule 32 (variable_array -> empty .)
    COMMA           reduce using rule 32 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 32 (variable_array -> empty .)


state 94

    (68) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 142


state 95

    (67) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 143


state 96

    (49) body -> LBRACKET . inner_body RBRACKET
    (50) inner_body -> . statement inner_body
    (51) inner_body -> . empty
    (74) statement -> . assign
    (75) statement -> . condition
    (76) statement -> . print
    (77) statement -> . cycle
    (78) statement -> . call_function
    (2) empty -> .
    (52) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (56) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (59) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (65) cycle -> . for
    (66) cycle -> . while
    (71) call_function -> . ID LPAREN exp exp_many RPAREN
    (30) variable -> . ID variable_array
    (68) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (67) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 75
    DO              shift and go to state 76

    inner_body                     shift and go to state 144
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73

state 97

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    RPAREN          shift and go to state 145


state 98

    (42) param -> s_type . id_saver test param2
    (3) id_saver -> . ID empty

    ID              shift and go to state 42

    id_saver                       shift and go to state 146

state 99

    (23) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 23 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)


state 100

    (24) var_s_type2 -> COMMA ID var_s_array . var_s_type2
    (24) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (25) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 147
    empty                          shift and go to state 58

state 101

    (28) var_s_matrix -> LSQBRACKET . CTE_INT RSQBRACKET

    CTE_INT         shift and go to state 148


state 102

    (26) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 26 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 26 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)


state 103

    (29) var_s_matrix -> empty .

    COMMA           reduce using rule 29 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 29 (var_s_matrix -> empty .)


state 104

    (130) factor -> variable .

    MODULE          reduce using rule 130 (factor -> variable .)
    MULTIPLY        reduce using rule 130 (factor -> variable .)
    DIVIDE          reduce using rule 130 (factor -> variable .)
    PLUS            reduce using rule 130 (factor -> variable .)
    MINUS           reduce using rule 130 (factor -> variable .)
    EQUAL           reduce using rule 130 (factor -> variable .)
    NOTEQUAL        reduce using rule 130 (factor -> variable .)
    LTHAN           reduce using rule 130 (factor -> variable .)
    GTHAN           reduce using rule 130 (factor -> variable .)
    AND             reduce using rule 130 (factor -> variable .)
    OR              reduce using rule 130 (factor -> variable .)
    SEMICOLON       reduce using rule 130 (factor -> variable .)
    RPAREN          reduce using rule 130 (factor -> variable .)
    COMMA           reduce using rule 130 (factor -> variable .)
    RSQBRACKET      reduce using rule 130 (factor -> variable .)


state 105

    (52) assign -> variable ASSIGN specialf_assign . SEMICOLON

    SEMICOLON       shift and go to state 149


state 106

    (53) specialf_assign -> exp .

    SEMICOLON       reduce using rule 53 (specialf_assign -> exp .)


state 107

    (54) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 54 (specialf_assign -> special_function .)


state 108

    (55) specialf_assign -> read .

    SEMICOLON       reduce using rule 55 (specialf_assign -> read .)


state 109

    (101) exp -> t_exp . exp_or
    (102) exp_or -> . OR exp
    (103) exp_or -> . empty
    (2) empty -> .

    OR              shift and go to state 151
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp_or                         shift and go to state 150
    empty                          shift and go to state 152

state 110

    (79) special_function -> exploration .

    SEMICOLON       reduce using rule 79 (special_function -> exploration .)


state 111

    (80) special_function -> financial_state .

    SEMICOLON       reduce using rule 80 (special_function -> financial_state .)


state 112

    (81) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 81 (special_function -> dummi_regression .)


state 113

    (82) special_function -> season_analysis .

    SEMICOLON       reduce using rule 82 (special_function -> season_analysis .)


state 114

    (83) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 83 (special_function -> trend_prediction .)


state 115

    (84) special_function -> model_predict .

    SEMICOLON       reduce using rule 84 (special_function -> model_predict .)


state 116

    (64) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 153


state 117

    (132) factor_exp -> LPAREN . exp RPAREN
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 154
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 118

    (104) t_exp -> expression . t_exp_and
    (105) t_exp_and -> . AND t_exp
    (106) t_exp_and -> . empty
    (2) empty -> .

    AND             shift and go to state 156
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    t_exp_and                      shift and go to state 155
    empty                          shift and go to state 157

state 119

    (85) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 158


state 120

    (90) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 159


state 121

    (93) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 160


state 122

    (91) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 161


state 123

    (92) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    LPAREN          shift and go to state 162


state 124

    (133) factor_cte -> CTE_INT .

    MODULE          reduce using rule 133 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 133 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 133 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 133 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 133 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 133 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 133 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 133 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 133 (factor_cte -> CTE_INT .)
    AND             reduce using rule 133 (factor_cte -> CTE_INT .)
    OR              reduce using rule 133 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 133 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 133 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 133 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 133 (factor_cte -> CTE_INT .)


state 125

    (100) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 163


state 126

    (107) expression -> m_exp . expression_comp
    (108) expression_comp -> . expression_comp_2 m_exp
    (109) expression_comp -> . empty
    (110) expression_comp_2 -> . EQUAL
    (111) expression_comp_2 -> . NOTEQUAL
    (112) expression_comp_2 -> . LTHAN
    (113) expression_comp_2 -> . GTHAN
    (2) empty -> .

    EQUAL           shift and go to state 167
    NOTEQUAL        shift and go to state 168
    LTHAN           shift and go to state 169
    GTHAN           shift and go to state 170
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    expression_comp                shift and go to state 164
    expression_comp_2              shift and go to state 165
    empty                          shift and go to state 166

state 127

    (114) m_exp -> term . m_exp_sr
    (115) m_exp_sr -> . m_exp_sr_2 m_exp
    (116) m_exp_sr -> . empty
    (117) m_exp_sr_2 -> . PLUS
    (118) m_exp_sr_2 -> . MINUS
    (2) empty -> .

    PLUS            shift and go to state 174
    MINUS           shift and go to state 175
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp_sr                       shift and go to state 171
    m_exp_sr_2                     shift and go to state 172
    empty                          shift and go to state 173

state 128

    (119) term -> sub_factor . term_pc
    (120) term_pc -> . term_pc_2 term
    (121) term_pc -> . empty
    (122) term_pc_2 -> . MULTIPLY
    (123) term_pc_2 -> . DIVIDE
    (124) term_pc_2 -> . MODULE
    (2) empty -> .

    MULTIPLY        shift and go to state 179
    DIVIDE          shift and go to state 180
    MODULE          shift and go to state 181
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    term_pc                        shift and go to state 176
    term_pc_2                      shift and go to state 177
    empty                          shift and go to state 178

state 129

    (125) sub_factor -> factor . sub_factor_pc
    (126) sub_factor_pc -> . MODULE sub_factor
    (127) sub_factor_pc -> . empty
    (2) empty -> .

  ! shift/reduce conflict for MODULE resolved as shift
    MODULE          shift and go to state 183
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

  ! MODULE          [ reduce using rule 2 (empty -> .) ]

    sub_factor_pc                  shift and go to state 182
    empty                          shift and go to state 184

state 130

    (128) factor -> factor_exp .

    MODULE          reduce using rule 128 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 128 (factor -> factor_exp .)
    DIVIDE          reduce using rule 128 (factor -> factor_exp .)
    PLUS            reduce using rule 128 (factor -> factor_exp .)
    MINUS           reduce using rule 128 (factor -> factor_exp .)
    EQUAL           reduce using rule 128 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 128 (factor -> factor_exp .)
    LTHAN           reduce using rule 128 (factor -> factor_exp .)
    GTHAN           reduce using rule 128 (factor -> factor_exp .)
    AND             reduce using rule 128 (factor -> factor_exp .)
    OR              reduce using rule 128 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 128 (factor -> factor_exp .)
    RPAREN          reduce using rule 128 (factor -> factor_exp .)
    COMMA           reduce using rule 128 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 128 (factor -> factor_exp .)


state 131

    (129) factor -> factor_cte .

    MODULE          reduce using rule 129 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 129 (factor -> factor_cte .)
    DIVIDE          reduce using rule 129 (factor -> factor_cte .)
    PLUS            reduce using rule 129 (factor -> factor_cte .)
    MINUS           reduce using rule 129 (factor -> factor_cte .)
    EQUAL           reduce using rule 129 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 129 (factor -> factor_cte .)
    LTHAN           reduce using rule 129 (factor -> factor_cte .)
    GTHAN           reduce using rule 129 (factor -> factor_cte .)
    AND             reduce using rule 129 (factor -> factor_cte .)
    OR              reduce using rule 129 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 129 (factor -> factor_cte .)
    RPAREN          reduce using rule 129 (factor -> factor_cte .)
    COMMA           reduce using rule 129 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 129 (factor -> factor_cte .)


state 132

    (131) factor -> call_function .

    MODULE          reduce using rule 131 (factor -> call_function .)
    MULTIPLY        reduce using rule 131 (factor -> call_function .)
    DIVIDE          reduce using rule 131 (factor -> call_function .)
    PLUS            reduce using rule 131 (factor -> call_function .)
    MINUS           reduce using rule 131 (factor -> call_function .)
    EQUAL           reduce using rule 131 (factor -> call_function .)
    NOTEQUAL        reduce using rule 131 (factor -> call_function .)
    LTHAN           reduce using rule 131 (factor -> call_function .)
    GTHAN           reduce using rule 131 (factor -> call_function .)
    AND             reduce using rule 131 (factor -> call_function .)
    OR              reduce using rule 131 (factor -> call_function .)
    SEMICOLON       reduce using rule 131 (factor -> call_function .)
    RPAREN          reduce using rule 131 (factor -> call_function .)
    COMMA           reduce using rule 131 (factor -> call_function .)
    RSQBRACKET      reduce using rule 131 (factor -> call_function .)


state 133

    (134) factor_cte -> CTE_FLOAT .

    MODULE          reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 134 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 134 (factor_cte -> CTE_FLOAT .)


state 134

    (135) factor_cte -> CTE_CHAR .

    MODULE          reduce using rule 135 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 135 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 135 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 135 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 135 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 135 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 135 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 135 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 135 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 135 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 135 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 135 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 135 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 135 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 135 (factor_cte -> CTE_CHAR .)


state 135

    (30) variable -> ID . variable_array
    (71) call_function -> ID . LPAREN exp exp_many RPAREN
    (31) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (32) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 90
    LSQBRACKET      shift and go to state 92
    MODULE          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 91
    empty                          shift and go to state 93

state 136

    (56) condition -> IF LPAREN exp . RPAREN body condition2 SEMICOLON

    RPAREN          shift and go to state 185


state 137

    (59) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 186


state 138

    (61) print_many -> print_type . print_many2
    (62) print_many2 -> . COMMA print_type print_many2
    (63) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 188
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 187
    empty                          shift and go to state 189

state 139

    (60) print_type -> exp .

    COMMA           reduce using rule 60 (print_type -> exp .)
    RPAREN          reduce using rule 60 (print_type -> exp .)


state 140

    (71) call_function -> ID LPAREN exp . exp_many RPAREN
    (72) exp_many -> . COMMA exp exp_many
    (73) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 191
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 190
    empty                          shift and go to state 192

state 141

    (31) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 193


state 142

    (68) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 194


state 143

    (67) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 195


state 144

    (49) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 196


state 145

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET program_function

    LBRACKET        shift and go to state 197


state 146

    (42) param -> s_type id_saver . test param2
    (45) test -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    test                           shift and go to state 198
    empty                          shift and go to state 199

state 147

    (24) var_s_type2 -> COMMA ID var_s_array var_s_type2 .

    SEMICOLON       reduce using rule 24 (var_s_type2 -> COMMA ID var_s_array var_s_type2 .)


state 148

    (28) var_s_matrix -> LSQBRACKET CTE_INT . RSQBRACKET

    RSQBRACKET      shift and go to state 200


state 149

    (52) assign -> variable ASSIGN specialf_assign SEMICOLON .

    IF              reduce using rule 52 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    PRINT           reduce using rule 52 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    ID              reduce using rule 52 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    FOR             reduce using rule 52 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    DO              reduce using rule 52 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RBRACKET        reduce using rule 52 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RETURN          reduce using rule 52 (assign -> variable ASSIGN specialf_assign SEMICOLON .)


state 150

    (101) exp -> t_exp exp_or .

    SEMICOLON       reduce using rule 101 (exp -> t_exp exp_or .)
    RPAREN          reduce using rule 101 (exp -> t_exp exp_or .)
    COMMA           reduce using rule 101 (exp -> t_exp exp_or .)
    RSQBRACKET      reduce using rule 101 (exp -> t_exp exp_or .)


state 151

    (102) exp_or -> OR . exp
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 201
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 152

    (103) exp_or -> empty .

    SEMICOLON       reduce using rule 103 (exp_or -> empty .)
    RPAREN          reduce using rule 103 (exp_or -> empty .)
    COMMA           reduce using rule 103 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 103 (exp_or -> empty .)


state 153

    (64) read -> READ LPAREN . variable RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 202

state 154

    (132) factor_exp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 204


state 155

    (104) t_exp -> expression t_exp_and .

    OR              reduce using rule 104 (t_exp -> expression t_exp_and .)
    SEMICOLON       reduce using rule 104 (t_exp -> expression t_exp_and .)
    RPAREN          reduce using rule 104 (t_exp -> expression t_exp_and .)
    COMMA           reduce using rule 104 (t_exp -> expression t_exp_and .)
    RSQBRACKET      reduce using rule 104 (t_exp -> expression t_exp_and .)


state 156

    (105) t_exp_and -> AND . t_exp
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    t_exp                          shift and go to state 205
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 157

    (106) t_exp_and -> empty .

    OR              reduce using rule 106 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 106 (t_exp_and -> empty .)
    RPAREN          reduce using rule 106 (t_exp_and -> empty .)
    COMMA           reduce using rule 106 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 106 (t_exp_and -> empty .)


state 158

    (85) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 206

state 159

    (90) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 207

state 160

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 208

state 161

    (91) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 209

state 162

    (92) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 210

state 163

    (100) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 211

state 164

    (107) expression -> m_exp expression_comp .

    AND             reduce using rule 107 (expression -> m_exp expression_comp .)
    OR              reduce using rule 107 (expression -> m_exp expression_comp .)
    SEMICOLON       reduce using rule 107 (expression -> m_exp expression_comp .)
    RPAREN          reduce using rule 107 (expression -> m_exp expression_comp .)
    COMMA           reduce using rule 107 (expression -> m_exp expression_comp .)
    RSQBRACKET      reduce using rule 107 (expression -> m_exp expression_comp .)


state 165

    (108) expression_comp -> expression_comp_2 . m_exp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    m_exp                          shift and go to state 212
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 166

    (109) expression_comp -> empty .

    AND             reduce using rule 109 (expression_comp -> empty .)
    OR              reduce using rule 109 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 109 (expression_comp -> empty .)
    RPAREN          reduce using rule 109 (expression_comp -> empty .)
    COMMA           reduce using rule 109 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 109 (expression_comp -> empty .)


state 167

    (110) expression_comp_2 -> EQUAL .

    LPAREN          reduce using rule 110 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 110 (expression_comp_2 -> EQUAL .)
    CTE_FLOAT       reduce using rule 110 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 110 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 110 (expression_comp_2 -> EQUAL .)


state 168

    (111) expression_comp_2 -> NOTEQUAL .

    LPAREN          reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 111 (expression_comp_2 -> NOTEQUAL .)


state 169

    (112) expression_comp_2 -> LTHAN .

    LPAREN          reduce using rule 112 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 112 (expression_comp_2 -> LTHAN .)
    CTE_FLOAT       reduce using rule 112 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 112 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 112 (expression_comp_2 -> LTHAN .)


state 170

    (113) expression_comp_2 -> GTHAN .

    LPAREN          reduce using rule 113 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 113 (expression_comp_2 -> GTHAN .)
    CTE_FLOAT       reduce using rule 113 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 113 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 113 (expression_comp_2 -> GTHAN .)


state 171

    (114) m_exp -> term m_exp_sr .

    EQUAL           reduce using rule 114 (m_exp -> term m_exp_sr .)
    NOTEQUAL        reduce using rule 114 (m_exp -> term m_exp_sr .)
    LTHAN           reduce using rule 114 (m_exp -> term m_exp_sr .)
    GTHAN           reduce using rule 114 (m_exp -> term m_exp_sr .)
    AND             reduce using rule 114 (m_exp -> term m_exp_sr .)
    OR              reduce using rule 114 (m_exp -> term m_exp_sr .)
    SEMICOLON       reduce using rule 114 (m_exp -> term m_exp_sr .)
    RPAREN          reduce using rule 114 (m_exp -> term m_exp_sr .)
    COMMA           reduce using rule 114 (m_exp -> term m_exp_sr .)
    RSQBRACKET      reduce using rule 114 (m_exp -> term m_exp_sr .)


state 172

    (115) m_exp_sr -> m_exp_sr_2 . m_exp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    m_exp                          shift and go to state 213
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 173

    (116) m_exp_sr -> empty .

    EQUAL           reduce using rule 116 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 116 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 116 (m_exp_sr -> empty .)
    GTHAN           reduce using rule 116 (m_exp_sr -> empty .)
    AND             reduce using rule 116 (m_exp_sr -> empty .)
    OR              reduce using rule 116 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 116 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 116 (m_exp_sr -> empty .)
    COMMA           reduce using rule 116 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 116 (m_exp_sr -> empty .)


state 174

    (117) m_exp_sr_2 -> PLUS .

    LPAREN          reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    CTE_FLOAT       reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 117 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 117 (m_exp_sr_2 -> PLUS .)


state 175

    (118) m_exp_sr_2 -> MINUS .

    LPAREN          reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    CTE_FLOAT       reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 118 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 118 (m_exp_sr_2 -> MINUS .)


state 176

    (119) term -> sub_factor term_pc .

    PLUS            reduce using rule 119 (term -> sub_factor term_pc .)
    MINUS           reduce using rule 119 (term -> sub_factor term_pc .)
    EQUAL           reduce using rule 119 (term -> sub_factor term_pc .)
    NOTEQUAL        reduce using rule 119 (term -> sub_factor term_pc .)
    LTHAN           reduce using rule 119 (term -> sub_factor term_pc .)
    GTHAN           reduce using rule 119 (term -> sub_factor term_pc .)
    AND             reduce using rule 119 (term -> sub_factor term_pc .)
    OR              reduce using rule 119 (term -> sub_factor term_pc .)
    SEMICOLON       reduce using rule 119 (term -> sub_factor term_pc .)
    RPAREN          reduce using rule 119 (term -> sub_factor term_pc .)
    COMMA           reduce using rule 119 (term -> sub_factor term_pc .)
    RSQBRACKET      reduce using rule 119 (term -> sub_factor term_pc .)


state 177

    (120) term_pc -> term_pc_2 . term
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    term                           shift and go to state 214
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 178

    (121) term_pc -> empty .

    PLUS            reduce using rule 121 (term_pc -> empty .)
    MINUS           reduce using rule 121 (term_pc -> empty .)
    EQUAL           reduce using rule 121 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 121 (term_pc -> empty .)
    LTHAN           reduce using rule 121 (term_pc -> empty .)
    GTHAN           reduce using rule 121 (term_pc -> empty .)
    AND             reduce using rule 121 (term_pc -> empty .)
    OR              reduce using rule 121 (term_pc -> empty .)
    SEMICOLON       reduce using rule 121 (term_pc -> empty .)
    RPAREN          reduce using rule 121 (term_pc -> empty .)
    COMMA           reduce using rule 121 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 121 (term_pc -> empty .)


state 179

    (122) term_pc_2 -> MULTIPLY .

    LPAREN          reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    CTE_FLOAT       reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 122 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 122 (term_pc_2 -> MULTIPLY .)


state 180

    (123) term_pc_2 -> DIVIDE .

    LPAREN          reduce using rule 123 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 123 (term_pc_2 -> DIVIDE .)
    CTE_FLOAT       reduce using rule 123 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 123 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 123 (term_pc_2 -> DIVIDE .)


state 181

    (124) term_pc_2 -> MODULE .

    LPAREN          reduce using rule 124 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 124 (term_pc_2 -> MODULE .)
    CTE_FLOAT       reduce using rule 124 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 124 (term_pc_2 -> MODULE .)
    ID              reduce using rule 124 (term_pc_2 -> MODULE .)


state 182

    (125) sub_factor -> factor sub_factor_pc .

    MULTIPLY        reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    DIVIDE          reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    MODULE          reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    PLUS            reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    MINUS           reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    EQUAL           reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    NOTEQUAL        reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    LTHAN           reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    GTHAN           reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    AND             reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    OR              reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    SEMICOLON       reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    RPAREN          reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    COMMA           reduce using rule 125 (sub_factor -> factor sub_factor_pc .)
    RSQBRACKET      reduce using rule 125 (sub_factor -> factor sub_factor_pc .)


state 183

    (126) sub_factor_pc -> MODULE . sub_factor
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    sub_factor                     shift and go to state 215
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 184

    (127) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 127 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 127 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 127 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 127 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 127 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 127 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 127 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 127 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 127 (sub_factor_pc -> empty .)
    AND             reduce using rule 127 (sub_factor_pc -> empty .)
    OR              reduce using rule 127 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 127 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 127 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 127 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 127 (sub_factor_pc -> empty .)


state 185

    (56) condition -> IF LPAREN exp RPAREN . body condition2 SEMICOLON
    (49) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 96

    body                           shift and go to state 216

state 186

    (59) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 217


state 187

    (61) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 61 (print_many -> print_type print_many2 .)


state 188

    (62) print_many2 -> COMMA . print_type print_many2
    (60) print_type -> . exp
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    print_type                     shift and go to state 218
    exp                            shift and go to state 139
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 189

    (63) print_many2 -> empty .

    RPAREN          reduce using rule 63 (print_many2 -> empty .)


state 190

    (71) call_function -> ID LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 219


state 191

    (72) exp_many -> COMMA . exp exp_many
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 220
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 192

    (73) exp_many -> empty .

    RPAREN          reduce using rule 73 (exp_many -> empty .)


state 193

    (31) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (33) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (34) variable_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 221
    ASSIGN          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_matrix                shift and go to state 222
    empty                          shift and go to state 223

state 194

    (68) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (69) for_end -> . CTE_INT
    (70) for_end -> . ID

    CTE_INT         shift and go to state 226
    ID              shift and go to state 224

    for_end                        shift and go to state 225

state 195

    (67) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 227
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 196

    (49) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 49 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 49 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 49 (body -> LBRACKET inner_body RBRACKET .)


state 197

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET program_function
    (11) program_vars -> . VAR var_type
    (12) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 228
    empty                          shift and go to state 11

state 198

    (42) param -> s_type id_saver test . param2
    (43) param2 -> . COMMA s_type id_saver test param2
    (44) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 230
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 229
    empty                          shift and go to state 231

state 199

    (45) test -> empty .

    COMMA           reduce using rule 45 (test -> empty .)
    RPAREN          reduce using rule 45 (test -> empty .)


state 200

    (28) var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .

    COMMA           reduce using rule 28 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)
    SEMICOLON       reduce using rule 28 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)


state 201

    (102) exp_or -> OR exp .

    SEMICOLON       reduce using rule 102 (exp_or -> OR exp .)
    RPAREN          reduce using rule 102 (exp_or -> OR exp .)
    COMMA           reduce using rule 102 (exp_or -> OR exp .)
    RSQBRACKET      reduce using rule 102 (exp_or -> OR exp .)


state 202

    (64) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 232


state 203

    (30) variable -> ID . variable_array
    (31) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (32) variable_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 92
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 91
    empty                          shift and go to state 93

state 204

    (132) factor_exp -> LPAREN exp RPAREN .

    MODULE          reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    LTHAN           reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    GTHAN           reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)
    RSQBRACKET      reduce using rule 132 (factor_exp -> LPAREN exp RPAREN .)


state 205

    (105) t_exp_and -> AND t_exp .

    OR              reduce using rule 105 (t_exp_and -> AND t_exp .)
    SEMICOLON       reduce using rule 105 (t_exp_and -> AND t_exp .)
    RPAREN          reduce using rule 105 (t_exp_and -> AND t_exp .)
    COMMA           reduce using rule 105 (t_exp_and -> AND t_exp .)
    RSQBRACKET      reduce using rule 105 (t_exp_and -> AND t_exp .)


state 206

    (85) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (86) explore_var -> . COMMA variable
    (87) explore_var -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 234
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    explore_var                    shift and go to state 233
    empty                          shift and go to state 235

state 207

    (90) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 236


state 208

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 237


state 209

    (91) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 238


state 210

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 239


state 211

    (100) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 240


state 212

    (108) expression_comp -> expression_comp_2 m_exp .

    AND             reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    OR              reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    SEMICOLON       reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    RPAREN          reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    COMMA           reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)
    RSQBRACKET      reduce using rule 108 (expression_comp -> expression_comp_2 m_exp .)


state 213

    (115) m_exp_sr -> m_exp_sr_2 m_exp .

    EQUAL           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GTHAN           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 115 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 214

    (120) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 120 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 120 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 120 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 120 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 120 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 120 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 120 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 120 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 120 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 120 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 120 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 120 (term_pc -> term_pc_2 term .)


state 215

    (126) sub_factor_pc -> MODULE sub_factor .

    MULTIPLY        reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    DIVIDE          reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    MODULE          reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    PLUS            reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    MINUS           reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    EQUAL           reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    NOTEQUAL        reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    LTHAN           reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    GTHAN           reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    AND             reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    OR              reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    SEMICOLON       reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    RPAREN          reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    COMMA           reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)
    RSQBRACKET      reduce using rule 126 (sub_factor_pc -> MODULE sub_factor .)


state 216

    (56) condition -> IF LPAREN exp RPAREN body . condition2 SEMICOLON
    (57) condition2 -> . ELSE body
    (58) condition2 -> . empty
    (2) empty -> .

    ELSE            shift and go to state 242
    SEMICOLON       reduce using rule 2 (empty -> .)

    condition2                     shift and go to state 241
    empty                          shift and go to state 243

state 217

    (59) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 59 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 59 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 59 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 59 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 59 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 59 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 59 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 218

    (62) print_many2 -> COMMA print_type . print_many2
    (62) print_many2 -> . COMMA print_type print_many2
    (63) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 188
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 244
    empty                          shift and go to state 189

state 219

    (71) call_function -> ID LPAREN exp exp_many RPAREN .

    IF              reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MODULE          reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 71 (call_function -> ID LPAREN exp exp_many RPAREN .)


state 220

    (72) exp_many -> COMMA exp . exp_many
    (72) exp_many -> . COMMA exp exp_many
    (73) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 191
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 245
    empty                          shift and go to state 192

state 221

    (33) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 246
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 222

    (31) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 31 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 223

    (34) variable_matrix -> empty .

    ASSIGN          reduce using rule 34 (variable_matrix -> empty .)
    MODULE          reduce using rule 34 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 34 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 34 (variable_matrix -> empty .)
    PLUS            reduce using rule 34 (variable_matrix -> empty .)
    MINUS           reduce using rule 34 (variable_matrix -> empty .)
    EQUAL           reduce using rule 34 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 34 (variable_matrix -> empty .)
    LTHAN           reduce using rule 34 (variable_matrix -> empty .)
    GTHAN           reduce using rule 34 (variable_matrix -> empty .)
    AND             reduce using rule 34 (variable_matrix -> empty .)
    OR              reduce using rule 34 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 34 (variable_matrix -> empty .)
    RPAREN          reduce using rule 34 (variable_matrix -> empty .)
    COMMA           reduce using rule 34 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 34 (variable_matrix -> empty .)


state 224

    (70) for_end -> ID .

    RPAREN          reduce using rule 70 (for_end -> ID .)


state 225

    (68) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 247


state 226

    (69) for_end -> CTE_INT .

    RPAREN          reduce using rule 69 (for_end -> CTE_INT .)


state 227

    (67) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 248


state 228

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET program_function
    (50) inner_body -> . statement inner_body
    (51) inner_body -> . empty
    (74) statement -> . assign
    (75) statement -> . condition
    (76) statement -> . print
    (77) statement -> . cycle
    (78) statement -> . call_function
    (2) empty -> .
    (52) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (56) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (59) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (65) cycle -> . for
    (66) cycle -> . while
    (71) call_function -> . ID LPAREN exp exp_many RPAREN
    (30) variable -> . ID variable_array
    (68) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (67) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 70
    PRINT           shift and go to state 71
    ID              shift and go to state 74
    FOR             shift and go to state 75
    DO              shift and go to state 76

    inner_body                     shift and go to state 249
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condition                      shift and go to state 65
    print                          shift and go to state 66
    cycle                          shift and go to state 67
    call_function                  shift and go to state 68
    variable                       shift and go to state 69
    for                            shift and go to state 72
    while                          shift and go to state 73

state 229

    (42) param -> s_type id_saver test param2 .

    RPAREN          reduce using rule 42 (param -> s_type id_saver test param2 .)


state 230

    (43) param2 -> COMMA . s_type id_saver test param2
    (13) s_type -> . INT
    (14) s_type -> . FLOAT
    (15) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 250

state 231

    (44) param2 -> empty .

    RPAREN          reduce using rule 44 (param2 -> empty .)


state 232

    (64) read -> READ LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 64 (read -> READ LPAREN variable RPAREN .)


state 233

    (85) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (88) explor_cte -> . COMMA CTE_INT
    (89) explor_cte -> . empty
    (2) empty -> .

    COMMA           shift and go to state 252
    RPAREN          reduce using rule 2 (empty -> .)

    explor_cte                     shift and go to state 251
    empty                          shift and go to state 253

state 234

    (86) explore_var -> COMMA . variable
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 254

state 235

    (87) explore_var -> empty .

    COMMA           reduce using rule 87 (explore_var -> empty .)
    RPAREN          reduce using rule 87 (explore_var -> empty .)


state 236

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 255

state 237

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 256

state 238

    (91) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 91 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 239

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 257


state 240

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 258

state 241

    (56) condition -> IF LPAREN exp RPAREN body condition2 . SEMICOLON

    SEMICOLON       shift and go to state 259


state 242

    (57) condition2 -> ELSE . body
    (49) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 96

    body                           shift and go to state 260

state 243

    (58) condition2 -> empty .

    SEMICOLON       reduce using rule 58 (condition2 -> empty .)


state 244

    (62) print_many2 -> COMMA print_type print_many2 .

    RPAREN          reduce using rule 62 (print_many2 -> COMMA print_type print_many2 .)


state 245

    (72) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 72 (exp_many -> COMMA exp exp_many .)


state 246

    (33) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 261


state 247

    (68) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (49) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 96

    body                           shift and go to state 262

state 248

    (67) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 263


state 249

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET program_function
    (46) return -> . RETURN exp SEMICOLON
    (47) return -> . empty
    (2) empty -> .

    RETURN          shift and go to state 265
    RBRACKET        reduce using rule 2 (empty -> .)

    return                         shift and go to state 264
    empty                          shift and go to state 266

state 250

    (43) param2 -> COMMA s_type . id_saver test param2
    (3) id_saver -> . ID empty

    ID              shift and go to state 42

    id_saver                       shift and go to state 267

state 251

    (85) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 268


state 252

    (88) explor_cte -> COMMA . CTE_INT

    CTE_INT         shift and go to state 269


state 253

    (89) explor_cte -> empty .

    RPAREN          reduce using rule 89 (explor_cte -> empty .)


state 254

    (86) explore_var -> COMMA variable .

    COMMA           reduce using rule 86 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 86 (explore_var -> COMMA variable .)


state 255

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 270


state 256

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (94) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (95) dr_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 271
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    dr_array                       shift and go to state 272
    empty                          shift and go to state 273

state 257

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT . COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 274


state 258

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 275


state 259

    (56) condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .

    IF              reduce using rule 56 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    PRINT           reduce using rule 56 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ID              reduce using rule 56 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FOR             reduce using rule 56 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DO              reduce using rule 56 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RBRACKET        reduce using rule 56 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RETURN          reduce using rule 56 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)


state 260

    (57) condition2 -> ELSE body .

    SEMICOLON       reduce using rule 57 (condition2 -> ELSE body .)


state 261

    (33) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MODULE          reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 33 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 262

    (68) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 276


state 263

    (67) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 67 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 67 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 67 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 67 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 67 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 67 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 264

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET program_function

    RBRACKET        shift and go to state 277


state 265

    (46) return -> RETURN . exp SEMICOLON
    (101) exp -> . t_exp exp_or
    (104) t_exp -> . expression t_exp_and
    (107) expression -> . m_exp expression_comp
    (114) m_exp -> . term m_exp_sr
    (119) term -> . sub_factor term_pc
    (125) sub_factor -> . factor sub_factor_pc
    (128) factor -> . factor_exp
    (129) factor -> . factor_cte
    (130) factor -> . variable
    (131) factor -> . call_function
    (132) factor_exp -> . LPAREN exp RPAREN
    (133) factor_cte -> . CTE_INT
    (134) factor_cte -> . CTE_FLOAT
    (135) factor_cte -> . CTE_CHAR
    (30) variable -> . ID variable_array
    (71) call_function -> . ID LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 117
    CTE_INT         shift and go to state 124
    CTE_FLOAT       shift and go to state 133
    CTE_CHAR        shift and go to state 134
    ID              shift and go to state 135

    exp                            shift and go to state 278
    t_exp                          shift and go to state 109
    expression                     shift and go to state 118
    m_exp                          shift and go to state 126
    term                           shift and go to state 127
    sub_factor                     shift and go to state 128
    factor                         shift and go to state 129
    factor_exp                     shift and go to state 130
    factor_cte                     shift and go to state 131
    variable                       shift and go to state 104
    call_function                  shift and go to state 132

state 266

    (47) return -> empty .

    RBRACKET        reduce using rule 47 (return -> empty .)


state 267

    (43) param2 -> COMMA s_type id_saver . test param2
    (45) test -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    test                           shift and go to state 279
    empty                          shift and go to state 199

state 268

    (85) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 85 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 269

    (88) explor_cte -> COMMA CTE_INT .

    RPAREN          reduce using rule 88 (explor_cte -> COMMA CTE_INT .)


state 270

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 280

state 271

    (94) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 281


state 272

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (98) dr_int -> . COMMA CTE_INT
    (99) dr_int -> . empty
    (2) empty -> .

    COMMA           shift and go to state 282
    RPAREN          reduce using rule 2 (empty -> .)

    dr_int                         shift and go to state 283
    empty                          shift and go to state 284

state 273

    (95) dr_array -> empty .

    COMMA           reduce using rule 95 (dr_array -> empty .)
    RPAREN          reduce using rule 95 (dr_array -> empty .)


state 274

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA . CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 285


state 275

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 286


state 276

    (68) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 68 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 68 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 68 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 68 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 68 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 68 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 68 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 277

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET . program_function
    (35) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (36) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 287
    empty                          shift and go to state 17

state 278

    (46) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 288


state 279

    (43) param2 -> COMMA s_type id_saver test . param2
    (43) param2 -> . COMMA s_type id_saver test param2
    (44) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 230
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 289
    empty                          shift and go to state 231

state 280

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 290


state 281

    (94) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 291


state 282

    (98) dr_int -> COMMA . CTE_INT

    CTE_INT         shift and go to state 292


state 283

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 293


state 284

    (99) dr_int -> empty .

    RPAREN          reduce using rule 99 (dr_int -> empty .)


state 285

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT . COMMA CTE_INT RPAREN

    COMMA           shift and go to state 294


state 286

    (100) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 100 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 287

    (35) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .

    MAIN            reduce using rule 35 (program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .)


state 288

    (46) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 46 (return -> RETURN exp SEMICOLON .)


state 289

    (43) param2 -> COMMA s_type id_saver test param2 .

    RPAREN          reduce using rule 43 (param2 -> COMMA s_type id_saver test param2 .)


state 290

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (30) variable -> . ID variable_array

    ID              shift and go to state 203

    variable                       shift and go to state 295

state 291

    (94) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (96) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (97) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 296
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 297
    empty                          shift and go to state 298

state 292

    (98) dr_int -> COMMA CTE_INT .

    RPAREN          reduce using rule 98 (dr_int -> COMMA CTE_INT .)


state 293

    (93) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 93 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 294

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA . CTE_INT RPAREN

    CTE_INT         shift and go to state 299


state 295

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 300


state 296

    (96) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 301


state 297

    (94) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 302


state 298

    (97) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 97 (dr_array_mp -> empty .)


state 299

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT . RPAREN

    RPAREN          shift and go to state 303


state 300

    (90) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 90 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 301

    (96) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (96) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (97) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 296
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 304
    empty                          shift and go to state 298

state 302

    (94) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 94 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 94 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 303

    (92) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .

    SEMICOLON       reduce using rule 92 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)


state 304

    (96) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 96 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MODULE in state 129 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 206 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 256 resolved as shift
