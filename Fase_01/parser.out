Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end
Rule 2     end -> END empty
Rule 3     empty -> <empty>
Rule 4     id_saver -> ID empty
Rule 5     int_const_saver -> CTE_INT empty
Rule 6     program_libraries -> from_library import_library
Rule 7     program_libraries -> empty
Rule 8     from_library -> FROM ID
Rule 9     from_library -> empty
Rule 10    import_library -> IMPORT ID AS ID program_libraries
Rule 11    var_type -> var_c_type
Rule 12    var_type -> var_s_type
Rule 13    program_vars -> VAR var_type
Rule 14    program_vars -> empty
Rule 15    s_type -> INT
Rule 16    s_type -> FLOAT
Rule 17    s_type -> CHAR
Rule 18    c_type -> DATAFRAME
Rule 19    c_type -> DATE
Rule 20    var_multiple -> var_type
Rule 21    var_multiple -> empty
Rule 22    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 23    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 24    var_c_type2 -> empty
Rule 25    add_c_var -> empty
Rule 26    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 27    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 28    var_s_type2 -> empty
Rule 29    add_s_var -> empty
Rule 30    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 31    var_s_array -> empty
Rule 32    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 33    var_s_matrix -> empty
Rule 34    var_s_dimesions -> CTE_INT empty
Rule 35    variable -> id_saver variable_array
Rule 36    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 37    variable_array -> empty
Rule 38    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 39    variable_matrix -> empty
Rule 40    program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
Rule 41    program_function -> empty
Rule 42    f_type -> INT
Rule 43    f_type -> FLOAT
Rule 44    f_type -> CHAR
Rule 45    f_type -> VOID
Rule 46    func_creator -> empty
Rule 47    param -> s_type id_saver add_params param2
Rule 48    param2 -> COMMA s_type id_saver add_params param2
Rule 49    param2 -> empty
Rule 50    add_params -> empty
Rule 51    return -> RETURN exp SEMICOLON
Rule 52    return -> empty
Rule 53    program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET
Rule 54    main_id -> empty
Rule 55    body -> LBRACKET inner_body RBRACKET
Rule 56    inner_body -> statement inner_body
Rule 57    inner_body -> empty
Rule 58    assign -> variable keep_assign specialf_assign end_assign
Rule 59    specialf_assign -> exp
Rule 60    specialf_assign -> special_function
Rule 61    specialf_assign -> read
Rule 62    keep_assign -> ASSIGN empty
Rule 63    end_assign -> SEMICOLON empty
Rule 64    condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON
Rule 65    condition2 -> ELSE body
Rule 66    condition2 -> empty
Rule 67    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 68    print_type -> exp
Rule 69    print_many -> print_type print_many2
Rule 70    print_many2 -> COMMA print_many
Rule 71    print_many2 -> empty
Rule 72    read -> READ LPAREN variable RPAREN
Rule 73    cycle -> for
Rule 74    cycle -> while
Rule 75    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 76    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 77    for_end -> int_const_saver
Rule 78    for_end -> ID
Rule 79    call_function -> function_saver LPAREN exp exp_many RPAREN
Rule 80    function_saver -> ID empty
Rule 81    exp_many -> COMMA exp exp_many
Rule 82    exp_many -> empty
Rule 83    statement -> assign
Rule 84    statement -> condition
Rule 85    statement -> print
Rule 86    statement -> cycle
Rule 87    statement -> call_function
Rule 88    special_function -> exploration
Rule 89    special_function -> financial_state
Rule 90    special_function -> dummi_regression
Rule 91    special_function -> season_analysis
Rule 92    special_function -> trend_prediction
Rule 93    special_function -> model_predict
Rule 94    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 95    explore_var -> COMMA variable
Rule 96    explore_var -> empty
Rule 97    explor_cte -> COMMA int_const_saver
Rule 98    explor_cte -> empty
Rule 99    financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 100   season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 101   trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
Rule 102   dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 103   dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 104   dr_array -> empty
Rule 105   dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 106   dr_array_mp -> empty
Rule 107   dr_int -> COMMA int_const_saver
Rule 108   dr_int -> empty
Rule 109   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 110   exp -> t_exp exp_or
Rule 111   exp_or -> exp_keep_or exp
Rule 112   exp_or -> empty
Rule 113   exp_keep_or -> OR
Rule 114   t_exp -> expression t_exp_and
Rule 115   t_exp_and -> AND keep_and t_exp
Rule 116   t_exp_and -> empty
Rule 117   keep_and -> empty
Rule 118   expression -> m_exp expression_comp
Rule 119   expression_comp -> expression_comp_2 m_exp
Rule 120   expression_comp -> empty
Rule 121   expression_comp_2 -> EQUAL
Rule 122   expression_comp_2 -> NOTEQUAL
Rule 123   expression_comp_2 -> LTHAN
Rule 124   expression_comp_2 -> GTHAN
Rule 125   m_exp -> term m_exp_sr
Rule 126   m_exp_sr -> m_exp_sr_2 m_exp
Rule 127   m_exp_sr -> empty
Rule 128   m_exp_sr_2 -> PLUS
Rule 129   m_exp_sr_2 -> MINUS
Rule 130   term -> sub_factor term_pc
Rule 131   term_pc -> term_pc_2 term
Rule 132   term_pc -> empty
Rule 133   term_pc_2 -> MULTIPLY
Rule 134   term_pc_2 -> DIVIDE
Rule 135   term_pc_2 -> MODULE
Rule 136   sub_factor -> factor sub_factor_pc
Rule 137   sub_factor_pc -> sub_factor_pc_2 sub_factor
Rule 138   sub_factor_pc -> empty
Rule 139   sub_factor_pc_2 -> POWER empty
Rule 140   factor -> factor_exp
Rule 141   factor -> factor_cte
Rule 142   factor -> variable
Rule 143   factor -> call_function
Rule 144   factor_exp -> LPAREN exp RPAREN
Rule 145   factor_cte -> CTE_FLOAT
Rule 146   factor_cte -> CTE_INT
Rule 147   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 115
AS                   : 10
ASSIGN               : 62
CHAR                 : 17 44
COLON                : 
COMMA                : 23 27 48 70 81 95 97 99 99 99 101 101 101 102 103 105 107 109 109
CTE_CHAR             : 103 105 147
CTE_FLOAT            : 145
CTE_INT              : 5 34 146
DATAFRAME            : 18
DATE                 : 19
DIVIDE               : 134
DO                   : 75
DUMMI_REGRESSION     : 102
ELSE                 : 65
END                  : 2
EQUAL                : 121
EXPLORATION          : 94
FINANCIAL_STATE      : 99
FLOAT                : 16 43
FOR                  : 76
FROM                 : 8
FUNCTION             : 40
GTHAN                : 124
ID                   : 1 4 8 10 10 76 78 80
IF                   : 64
IMPORT               : 10
INT                  : 15 42
LBRACKET             : 40 53 55
LPAREN               : 40 64 67 72 75 76 79 94 99 100 101 102 109 144
LSQBRACKET           : 30 32 36 38 103
LTHAN                : 123
MAIN                 : 53
MINUS                : 129
MODEL_PREDICT        : 109
MODULE               : 135
MULTIPLY             : 133
NOTEQUAL             : 122
OR                   : 113
PLUS                 : 128
POWER                : 139
PRINT                : 67
PROGRAM              : 1
RBRACKET             : 40 53 55
READ                 : 72
RETURN               : 51
RPAREN               : 40 64 67 72 75 76 79 94 99 100 101 102 109 144
RSQBRACKET           : 30 32 36 38 103
SEASON_ANALYSIS      : 100
SEMICOLON            : 1 22 26 51 63 64 67 75 76
TO                   : 76
TREND_PREDICTION     : 101
VAR                  : 13
VOID                 : 45
WHILE                : 75
error                : 

Nonterminals, with rules where they appear

add_c_var            : 22 23
add_params           : 47 48
add_s_var            : 26 27
assign               : 83
body                 : 64 65 75 76
c_type               : 22
call_function        : 87 143
condition            : 84
condition2           : 64
cycle                : 86
dr_array             : 102
dr_array_mp          : 103 105
dr_int               : 102
dummi_regression     : 90
empty                : 2 4 5 7 9 14 21 24 25 28 29 31 33 34 37 39 41 46 49 50 52 54 57 62 63 66 71 80 82 96 98 104 106 108 112 116 117 120 127 132 138 139
end                  : 1
end_assign           : 58
exp                  : 36 38 51 59 64 68 75 79 81 111 144
exp_keep_or          : 111
exp_many             : 79 81
exp_or               : 110
explor_cte           : 94
exploration          : 88
explore_var          : 94
expression           : 114
expression_comp      : 118
expression_comp_2    : 119
f_type               : 40
factor               : 136
factor_cte           : 141
factor_exp           : 140
financial_state      : 89
for                  : 73
for_end              : 76
from_library         : 6
func_creator         : 40
function_saver       : 79
id_saver             : 22 23 26 27 35 40 47 48
import_library       : 6
inner_body           : 40 53 55 56
int_const_saver      : 77 97 101 101 101 107
keep_and             : 115
keep_assign          : 58
m_exp                : 118 119 126
m_exp_sr             : 125
m_exp_sr_2           : 126
main_id              : 53
model_predict        : 93
param                : 40
param2               : 47 48
print                : 85
print_many           : 67 70
print_many2          : 69
print_type           : 69
program              : 0
program_function     : 1 40
program_libraries    : 1 10
program_main         : 1
program_vars         : 1 40 53
read                 : 61
return               : 40
s_type               : 26 47 48
season_analysis      : 91
special_function     : 60
specialf_assign      : 58
statement            : 56
sub_factor           : 130 137
sub_factor_pc        : 136
sub_factor_pc_2      : 137
t_exp                : 110 115
t_exp_and            : 114
term                 : 125 131
term_pc              : 130
term_pc_2            : 131
trend_prediction     : 92
var_c_type           : 11
var_c_type2          : 22 23
var_multiple         : 22 26
var_s_array          : 26 27
var_s_dimesions      : 30 32
var_s_matrix         : 30
var_s_type           : 12
var_s_type2          : 26 27
var_type             : 13 20
variable             : 58 72 94 95 99 99 99 99 100 101 102 102 109 109 142
variable_array       : 35
variable_matrix      : 36
while                : 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main end

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main end

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main end
    (6) program_libraries -> . from_library import_library
    (7) program_libraries -> . empty
    (8) from_library -> . FROM ID
    (9) from_library -> . empty
    (3) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 3 (empty -> .)
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IMPORT          reduce using rule 3 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main end
    (13) program_vars -> . VAR var_type
    (14) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (6) program_libraries -> from_library . import_library
    (10) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (7) program_libraries -> empty .
    (9) from_library -> empty .

    VAR             reduce using rule 7 (program_libraries -> empty .)
    FUNCTION        reduce using rule 7 (program_libraries -> empty .)
    MAIN            reduce using rule 7 (program_libraries -> empty .)
    IMPORT          reduce using rule 9 (from_library -> empty .)


state 8

    (8) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main end
    (40) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (41) program_function -> . empty
    (3) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 3 (empty -> .)

    program_function               shift and go to state 15
    empty                          shift and go to state 17

state 10

    (13) program_vars -> VAR . var_type
    (11) var_type -> . var_c_type
    (12) var_type -> . var_s_type
    (22) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (26) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (18) c_type -> . DATAFRAME
    (19) c_type -> . DATE
    (15) s_type -> . INT
    (16) s_type -> . FLOAT
    (17) s_type -> . CHAR

    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    var_type                       shift and go to state 18
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21
    s_type                         shift and go to state 22

state 11

    (14) program_vars -> empty .

    FUNCTION        reduce using rule 14 (program_vars -> empty .)
    MAIN            reduce using rule 14 (program_vars -> empty .)
    IF              reduce using rule 14 (program_vars -> empty .)
    PRINT           reduce using rule 14 (program_vars -> empty .)
    FOR             reduce using rule 14 (program_vars -> empty .)
    DO              reduce using rule 14 (program_vars -> empty .)
    ID              reduce using rule 14 (program_vars -> empty .)
    RBRACKET        reduce using rule 14 (program_vars -> empty .)
    RETURN          reduce using rule 14 (program_vars -> empty .)


state 12

    (6) program_libraries -> from_library import_library .

    VAR             reduce using rule 6 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 6 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 6 (program_libraries -> from_library import_library .)


state 13

    (10) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 28


state 14

    (8) from_library -> FROM ID .

    IMPORT          reduce using rule 8 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main end
    (53) program_main -> . MAIN main_id LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 30

    program_main                   shift and go to state 29

state 16

    (40) program_function -> FUNCTION . f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (42) f_type -> . INT
    (43) f_type -> . FLOAT
    (44) f_type -> . CHAR
    (45) f_type -> . VOID

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    f_type                         shift and go to state 31

state 17

    (41) program_function -> empty .

    MAIN            reduce using rule 41 (program_function -> empty .)


state 18

    (13) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 13 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 13 (program_vars -> VAR var_type .)
    IF              reduce using rule 13 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 13 (program_vars -> VAR var_type .)
    FOR             reduce using rule 13 (program_vars -> VAR var_type .)
    DO              reduce using rule 13 (program_vars -> VAR var_type .)
    ID              reduce using rule 13 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 13 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 13 (program_vars -> VAR var_type .)


state 19

    (11) var_type -> var_c_type .

    FUNCTION        reduce using rule 11 (var_type -> var_c_type .)
    MAIN            reduce using rule 11 (var_type -> var_c_type .)
    IF              reduce using rule 11 (var_type -> var_c_type .)
    PRINT           reduce using rule 11 (var_type -> var_c_type .)
    FOR             reduce using rule 11 (var_type -> var_c_type .)
    DO              reduce using rule 11 (var_type -> var_c_type .)
    ID              reduce using rule 11 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 11 (var_type -> var_c_type .)
    RETURN          reduce using rule 11 (var_type -> var_c_type .)


state 20

    (12) var_type -> var_s_type .

    FUNCTION        reduce using rule 12 (var_type -> var_s_type .)
    MAIN            reduce using rule 12 (var_type -> var_s_type .)
    IF              reduce using rule 12 (var_type -> var_s_type .)
    PRINT           reduce using rule 12 (var_type -> var_s_type .)
    FOR             reduce using rule 12 (var_type -> var_s_type .)
    DO              reduce using rule 12 (var_type -> var_s_type .)
    ID              reduce using rule 12 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 12 (var_type -> var_s_type .)
    RETURN          reduce using rule 12 (var_type -> var_s_type .)


state 21

    (22) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 36

state 22

    (26) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 38

state 23

    (18) c_type -> DATAFRAME .

    ID              reduce using rule 18 (c_type -> DATAFRAME .)


state 24

    (19) c_type -> DATE .

    ID              reduce using rule 19 (c_type -> DATE .)


state 25

    (15) s_type -> INT .

    ID              reduce using rule 15 (s_type -> INT .)


state 26

    (16) s_type -> FLOAT .

    ID              reduce using rule 16 (s_type -> FLOAT .)


state 27

    (17) s_type -> CHAR .

    ID              reduce using rule 17 (s_type -> CHAR .)


state 28

    (10) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 39


state 29

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . end
    (2) end -> . END empty

    END             shift and go to state 41

    end                            shift and go to state 40

state 30

    (53) program_main -> MAIN . main_id LBRACKET program_vars inner_body RBRACKET
    (54) main_id -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    main_id                        shift and go to state 42
    empty                          shift and go to state 43

state 31

    (40) program_function -> FUNCTION f_type . id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 44

state 32

    (42) f_type -> INT .

    ID              reduce using rule 42 (f_type -> INT .)


state 33

    (43) f_type -> FLOAT .

    ID              reduce using rule 43 (f_type -> FLOAT .)


state 34

    (44) f_type -> CHAR .

    ID              reduce using rule 44 (f_type -> CHAR .)


state 35

    (45) f_type -> VOID .

    ID              reduce using rule 45 (f_type -> VOID .)


state 36

    (22) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (25) add_c_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_c_var                      shift and go to state 45
    empty                          shift and go to state 46

state 37

    (4) id_saver -> ID . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    LSQBRACKET      reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 47

state 38

    (26) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (30) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (31) var_s_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 49
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_array                    shift and go to state 48
    empty                          shift and go to state 50

state 39

    (10) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 51


state 40

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end .)


state 41

    (2) end -> END . empty
    (3) empty -> .

    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 52

state 42

    (53) program_main -> MAIN main_id . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 53


state 43

    (54) main_id -> empty .

    LBRACKET        reduce using rule 54 (main_id -> empty .)


state 44

    (40) program_function -> FUNCTION f_type id_saver . func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (46) func_creator -> . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)

    func_creator                   shift and go to state 54
    empty                          shift and go to state 55

state 45

    (22) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (23) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (24) var_c_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_c_type2                    shift and go to state 56
    empty                          shift and go to state 58

state 46

    (25) add_c_var -> empty .

    COMMA           reduce using rule 25 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 25 (add_c_var -> empty .)


state 47

    (4) id_saver -> ID empty .

    COMMA           reduce using rule 4 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 4 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    LPAREN          reduce using rule 4 (id_saver -> ID empty .)
    RPAREN          reduce using rule 4 (id_saver -> ID empty .)


state 48

    (26) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (29) add_s_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_s_var                      shift and go to state 59
    empty                          shift and go to state 60

state 49

    (30) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (34) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 62

    var_s_dimesions                shift and go to state 61

state 50

    (31) var_s_array -> empty .

    COMMA           reduce using rule 31 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 31 (var_s_array -> empty .)


state 51

    (10) import_library -> IMPORT ID AS ID . program_libraries
    (6) program_libraries -> . from_library import_library
    (7) program_libraries -> . empty
    (8) from_library -> . FROM ID
    (9) from_library -> . empty
    (3) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 3 (empty -> .)
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IMPORT          reduce using rule 3 (empty -> .)

    program_libraries              shift and go to state 63
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 52

    (2) end -> END empty .

    $end            reduce using rule 2 (end -> END empty .)


state 53

    (53) program_main -> MAIN main_id LBRACKET . program_vars inner_body RBRACKET
    (13) program_vars -> . VAR var_type
    (14) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 64
    empty                          shift and go to state 11

state 54

    (40) program_function -> FUNCTION f_type id_saver func_creator . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    LPAREN          shift and go to state 65


state 55

    (46) func_creator -> empty .

    LPAREN          reduce using rule 46 (func_creator -> empty .)


state 56

    (22) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 66


state 57

    (23) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 67

state 58

    (24) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 24 (var_c_type2 -> empty .)


state 59

    (26) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (27) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (28) var_s_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_type2                    shift and go to state 68
    empty                          shift and go to state 70

state 60

    (29) add_s_var -> empty .

    COMMA           reduce using rule 29 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 29 (add_s_var -> empty .)


state 61

    (30) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 71


state 62

    (34) var_s_dimesions -> CTE_INT . empty
    (3) empty -> .

    RSQBRACKET      reduce using rule 3 (empty -> .)

    empty                          shift and go to state 72

state 63

    (10) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 10 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 10 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 10 (import_library -> IMPORT ID AS ID program_libraries .)


state 64

    (53) program_main -> MAIN main_id LBRACKET program_vars . inner_body RBRACKET
    (56) inner_body -> . statement inner_body
    (57) inner_body -> . empty
    (83) statement -> . assign
    (84) statement -> . condition
    (85) statement -> . print
    (86) statement -> . cycle
    (87) statement -> . call_function
    (3) empty -> .
    (58) assign -> . variable keep_assign specialf_assign end_assign
    (64) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (67) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (73) cycle -> . for
    (74) cycle -> . while
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (35) variable -> . id_saver variable_array
    (76) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (75) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (80) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    inner_body                     shift and go to state 73
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 65

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (47) param -> . s_type id_saver add_params param2
    (15) s_type -> . INT
    (16) s_type -> . FLOAT
    (17) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    param                          shift and go to state 91
    s_type                         shift and go to state 92

state 66

    (22) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (20) var_multiple -> . var_type
    (21) var_multiple -> . empty
    (11) var_type -> . var_c_type
    (12) var_type -> . var_s_type
    (3) empty -> .
    (22) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (26) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (18) c_type -> . DATAFRAME
    (19) c_type -> . DATE
    (15) s_type -> . INT
    (16) s_type -> . FLOAT
    (17) s_type -> . CHAR

    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    c_type                         shift and go to state 21
    var_multiple                   shift and go to state 93
    var_type                       shift and go to state 94
    empty                          shift and go to state 95
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    s_type                         shift and go to state 22

state 67

    (23) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (25) add_c_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_c_var                      shift and go to state 96
    empty                          shift and go to state 46

state 68

    (26) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 97


state 69

    (27) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 98

state 70

    (28) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 28 (var_s_type2 -> empty .)


state 71

    (30) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (32) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (33) var_s_matrix -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 99
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_matrix                   shift and go to state 100
    empty                          shift and go to state 101

state 72

    (34) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 34 (var_s_dimesions -> CTE_INT empty .)


state 73

    (53) program_main -> MAIN main_id LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 102


state 74

    (56) inner_body -> statement . inner_body
    (56) inner_body -> . statement inner_body
    (57) inner_body -> . empty
    (83) statement -> . assign
    (84) statement -> . condition
    (85) statement -> . print
    (86) statement -> . cycle
    (87) statement -> . call_function
    (3) empty -> .
    (58) assign -> . variable keep_assign specialf_assign end_assign
    (64) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (67) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (73) cycle -> . for
    (74) cycle -> . while
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (35) variable -> . id_saver variable_array
    (76) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (75) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (80) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    statement                      shift and go to state 74
    inner_body                     shift and go to state 103
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 75

    (57) inner_body -> empty .

    RBRACKET        reduce using rule 57 (inner_body -> empty .)
    RETURN          reduce using rule 57 (inner_body -> empty .)


state 76

    (83) statement -> assign .

    IF              reduce using rule 83 (statement -> assign .)
    PRINT           reduce using rule 83 (statement -> assign .)
    FOR             reduce using rule 83 (statement -> assign .)
    DO              reduce using rule 83 (statement -> assign .)
    ID              reduce using rule 83 (statement -> assign .)
    RBRACKET        reduce using rule 83 (statement -> assign .)
    RETURN          reduce using rule 83 (statement -> assign .)


state 77

    (84) statement -> condition .

    IF              reduce using rule 84 (statement -> condition .)
    PRINT           reduce using rule 84 (statement -> condition .)
    FOR             reduce using rule 84 (statement -> condition .)
    DO              reduce using rule 84 (statement -> condition .)
    ID              reduce using rule 84 (statement -> condition .)
    RBRACKET        reduce using rule 84 (statement -> condition .)
    RETURN          reduce using rule 84 (statement -> condition .)


state 78

    (85) statement -> print .

    IF              reduce using rule 85 (statement -> print .)
    PRINT           reduce using rule 85 (statement -> print .)
    FOR             reduce using rule 85 (statement -> print .)
    DO              reduce using rule 85 (statement -> print .)
    ID              reduce using rule 85 (statement -> print .)
    RBRACKET        reduce using rule 85 (statement -> print .)
    RETURN          reduce using rule 85 (statement -> print .)


state 79

    (86) statement -> cycle .

    IF              reduce using rule 86 (statement -> cycle .)
    PRINT           reduce using rule 86 (statement -> cycle .)
    FOR             reduce using rule 86 (statement -> cycle .)
    DO              reduce using rule 86 (statement -> cycle .)
    ID              reduce using rule 86 (statement -> cycle .)
    RBRACKET        reduce using rule 86 (statement -> cycle .)
    RETURN          reduce using rule 86 (statement -> cycle .)


state 80

    (87) statement -> call_function .

    IF              reduce using rule 87 (statement -> call_function .)
    PRINT           reduce using rule 87 (statement -> call_function .)
    FOR             reduce using rule 87 (statement -> call_function .)
    DO              reduce using rule 87 (statement -> call_function .)
    ID              reduce using rule 87 (statement -> call_function .)
    RBRACKET        reduce using rule 87 (statement -> call_function .)
    RETURN          reduce using rule 87 (statement -> call_function .)


state 81

    (58) assign -> variable . keep_assign specialf_assign end_assign
    (62) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 105

    keep_assign                    shift and go to state 104

state 82

    (64) condition -> IF . LPAREN exp RPAREN body condition2 SEMICOLON

    LPAREN          shift and go to state 106


state 83

    (67) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 107


state 84

    (73) cycle -> for .

    IF              reduce using rule 73 (cycle -> for .)
    PRINT           reduce using rule 73 (cycle -> for .)
    FOR             reduce using rule 73 (cycle -> for .)
    DO              reduce using rule 73 (cycle -> for .)
    ID              reduce using rule 73 (cycle -> for .)
    RBRACKET        reduce using rule 73 (cycle -> for .)
    RETURN          reduce using rule 73 (cycle -> for .)


state 85

    (74) cycle -> while .

    IF              reduce using rule 74 (cycle -> while .)
    PRINT           reduce using rule 74 (cycle -> while .)
    FOR             reduce using rule 74 (cycle -> while .)
    DO              reduce using rule 74 (cycle -> while .)
    ID              reduce using rule 74 (cycle -> while .)
    RBRACKET        reduce using rule 74 (cycle -> while .)
    RETURN          reduce using rule 74 (cycle -> while .)


state 86

    (79) call_function -> function_saver . LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 108


state 87

    (35) variable -> id_saver . variable_array
    (36) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (37) variable_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 110
    ASSIGN          reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    variable_array                 shift and go to state 109
    empty                          shift and go to state 111

state 88

    (76) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 112


state 89

    (80) function_saver -> ID . empty
    (4) id_saver -> ID . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)
    LSQBRACKET      reduce using rule 3 (empty -> .)
    ASSIGN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 113

state 90

    (75) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (55) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 114

state 91

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    RPAREN          shift and go to state 116


state 92

    (47) param -> s_type . id_saver add_params param2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 117

state 93

    (22) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 22 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 94

    (20) var_multiple -> var_type .

    FUNCTION        reduce using rule 20 (var_multiple -> var_type .)
    MAIN            reduce using rule 20 (var_multiple -> var_type .)
    IF              reduce using rule 20 (var_multiple -> var_type .)
    PRINT           reduce using rule 20 (var_multiple -> var_type .)
    FOR             reduce using rule 20 (var_multiple -> var_type .)
    DO              reduce using rule 20 (var_multiple -> var_type .)
    ID              reduce using rule 20 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 20 (var_multiple -> var_type .)
    RETURN          reduce using rule 20 (var_multiple -> var_type .)


state 95

    (21) var_multiple -> empty .

    FUNCTION        reduce using rule 21 (var_multiple -> empty .)
    MAIN            reduce using rule 21 (var_multiple -> empty .)
    IF              reduce using rule 21 (var_multiple -> empty .)
    PRINT           reduce using rule 21 (var_multiple -> empty .)
    FOR             reduce using rule 21 (var_multiple -> empty .)
    DO              reduce using rule 21 (var_multiple -> empty .)
    ID              reduce using rule 21 (var_multiple -> empty .)
    RBRACKET        reduce using rule 21 (var_multiple -> empty .)
    RETURN          reduce using rule 21 (var_multiple -> empty .)


state 96

    (23) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (23) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (24) var_c_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_c_type2                    shift and go to state 118
    empty                          shift and go to state 58

state 97

    (26) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (20) var_multiple -> . var_type
    (21) var_multiple -> . empty
    (11) var_type -> . var_c_type
    (12) var_type -> . var_s_type
    (3) empty -> .
    (22) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (26) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (18) c_type -> . DATAFRAME
    (19) c_type -> . DATE
    (15) s_type -> . INT
    (16) s_type -> . FLOAT
    (17) s_type -> . CHAR

    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 22
    var_multiple                   shift and go to state 119
    var_type                       shift and go to state 94
    empty                          shift and go to state 95
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21

state 98

    (27) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (30) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (31) var_s_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 49
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_array                    shift and go to state 120
    empty                          shift and go to state 50

state 99

    (32) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (34) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 62

    var_s_dimesions                shift and go to state 121

state 100

    (30) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 30 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 30 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 101

    (33) var_s_matrix -> empty .

    COMMA           reduce using rule 33 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 33 (var_s_matrix -> empty .)


state 102

    (53) program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 53 (program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .)


state 103

    (56) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 56 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 56 (inner_body -> statement inner_body .)


state 104

    (58) assign -> variable keep_assign . specialf_assign end_assign
    (59) specialf_assign -> . exp
    (60) specialf_assign -> . special_function
    (61) specialf_assign -> . read
    (110) exp -> . t_exp exp_or
    (88) special_function -> . exploration
    (89) special_function -> . financial_state
    (90) special_function -> . dummi_regression
    (91) special_function -> . season_analysis
    (92) special_function -> . trend_prediction
    (93) special_function -> . model_predict
    (72) read -> . READ LPAREN variable RPAREN
    (114) t_exp -> . expression t_exp_and
    (94) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (99) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (102) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (100) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (101) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (109) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    READ            shift and go to state 134
    EXPLORATION     shift and go to state 137
    FINANCIAL_STATE shift and go to state 138
    DUMMI_REGRESSION shift and go to state 139
    SEASON_ANALYSIS shift and go to state 140
    TREND_PREDICTION shift and go to state 141
    MODEL_PREDICT   shift and go to state 142
    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    variable                       shift and go to state 122
    specialf_assign                shift and go to state 123
    exp                            shift and go to state 124
    special_function               shift and go to state 125
    read                           shift and go to state 126
    t_exp                          shift and go to state 127
    exploration                    shift and go to state 128
    financial_state                shift and go to state 129
    dummi_regression               shift and go to state 130
    season_analysis                shift and go to state 131
    trend_prediction               shift and go to state 132
    model_predict                  shift and go to state 133
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 105

    (62) keep_assign -> ASSIGN . empty
    (3) empty -> .

    READ            reduce using rule 3 (empty -> .)
    EXPLORATION     reduce using rule 3 (empty -> .)
    FINANCIAL_STATE reduce using rule 3 (empty -> .)
    DUMMI_REGRESSION reduce using rule 3 (empty -> .)
    SEASON_ANALYSIS reduce using rule 3 (empty -> .)
    TREND_PREDICTION reduce using rule 3 (empty -> .)
    MODEL_PREDICT   reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    empty                          shift and go to state 154

state 106

    (64) condition -> IF LPAREN . exp RPAREN body condition2 SEMICOLON
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 155
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 107

    (67) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (69) print_many -> . print_type print_many2
    (68) print_type -> . exp
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    print_many                     shift and go to state 156
    print_type                     shift and go to state 157
    exp                            shift and go to state 158
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 108

    (79) call_function -> function_saver LPAREN . exp exp_many RPAREN
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    function_saver                 shift and go to state 86
    exp                            shift and go to state 159
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87

state 109

    (35) variable -> id_saver variable_array .

    ASSIGN          reduce using rule 35 (variable -> id_saver variable_array .)
    POWER           reduce using rule 35 (variable -> id_saver variable_array .)
    MULTIPLY        reduce using rule 35 (variable -> id_saver variable_array .)
    DIVIDE          reduce using rule 35 (variable -> id_saver variable_array .)
    MODULE          reduce using rule 35 (variable -> id_saver variable_array .)
    PLUS            reduce using rule 35 (variable -> id_saver variable_array .)
    MINUS           reduce using rule 35 (variable -> id_saver variable_array .)
    EQUAL           reduce using rule 35 (variable -> id_saver variable_array .)
    NOTEQUAL        reduce using rule 35 (variable -> id_saver variable_array .)
    LTHAN           reduce using rule 35 (variable -> id_saver variable_array .)
    GTHAN           reduce using rule 35 (variable -> id_saver variable_array .)
    AND             reduce using rule 35 (variable -> id_saver variable_array .)
    OR              reduce using rule 35 (variable -> id_saver variable_array .)
    SEMICOLON       reduce using rule 35 (variable -> id_saver variable_array .)
    RPAREN          reduce using rule 35 (variable -> id_saver variable_array .)
    COMMA           reduce using rule 35 (variable -> id_saver variable_array .)
    RSQBRACKET      reduce using rule 35 (variable -> id_saver variable_array .)


state 110

    (36) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 160
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 111

    (37) variable_array -> empty .

    ASSIGN          reduce using rule 37 (variable_array -> empty .)
    POWER           reduce using rule 37 (variable_array -> empty .)
    MULTIPLY        reduce using rule 37 (variable_array -> empty .)
    DIVIDE          reduce using rule 37 (variable_array -> empty .)
    MODULE          reduce using rule 37 (variable_array -> empty .)
    PLUS            reduce using rule 37 (variable_array -> empty .)
    MINUS           reduce using rule 37 (variable_array -> empty .)
    EQUAL           reduce using rule 37 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 37 (variable_array -> empty .)
    LTHAN           reduce using rule 37 (variable_array -> empty .)
    GTHAN           reduce using rule 37 (variable_array -> empty .)
    AND             reduce using rule 37 (variable_array -> empty .)
    OR              reduce using rule 37 (variable_array -> empty .)
    SEMICOLON       reduce using rule 37 (variable_array -> empty .)
    RPAREN          reduce using rule 37 (variable_array -> empty .)
    COMMA           reduce using rule 37 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 37 (variable_array -> empty .)


state 112

    (76) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 161


state 113

    (80) function_saver -> ID empty .
    (4) id_saver -> ID empty .

    LPAREN          reduce using rule 80 (function_saver -> ID empty .)
    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 4 (id_saver -> ID empty .)


state 114

    (75) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 162


state 115

    (55) body -> LBRACKET . inner_body RBRACKET
    (56) inner_body -> . statement inner_body
    (57) inner_body -> . empty
    (83) statement -> . assign
    (84) statement -> . condition
    (85) statement -> . print
    (86) statement -> . cycle
    (87) statement -> . call_function
    (3) empty -> .
    (58) assign -> . variable keep_assign specialf_assign end_assign
    (64) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (67) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (73) cycle -> . for
    (74) cycle -> . while
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (35) variable -> . id_saver variable_array
    (76) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (75) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (80) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    inner_body                     shift and go to state 163
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 116

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET program_function

    LBRACKET        shift and go to state 164


state 117

    (47) param -> s_type id_saver . add_params param2
    (50) add_params -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    add_params                     shift and go to state 165
    empty                          shift and go to state 166

state 118

    (23) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 23 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 119

    (26) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 26 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 120

    (27) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (29) add_s_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_s_var                      shift and go to state 167
    empty                          shift and go to state 60

state 121

    (32) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 168


state 122

    (142) factor -> variable .

    POWER           reduce using rule 142 (factor -> variable .)
    MULTIPLY        reduce using rule 142 (factor -> variable .)
    DIVIDE          reduce using rule 142 (factor -> variable .)
    MODULE          reduce using rule 142 (factor -> variable .)
    PLUS            reduce using rule 142 (factor -> variable .)
    MINUS           reduce using rule 142 (factor -> variable .)
    EQUAL           reduce using rule 142 (factor -> variable .)
    NOTEQUAL        reduce using rule 142 (factor -> variable .)
    LTHAN           reduce using rule 142 (factor -> variable .)
    GTHAN           reduce using rule 142 (factor -> variable .)
    AND             reduce using rule 142 (factor -> variable .)
    OR              reduce using rule 142 (factor -> variable .)
    SEMICOLON       reduce using rule 142 (factor -> variable .)
    RPAREN          reduce using rule 142 (factor -> variable .)
    COMMA           reduce using rule 142 (factor -> variable .)
    RSQBRACKET      reduce using rule 142 (factor -> variable .)


state 123

    (58) assign -> variable keep_assign specialf_assign . end_assign
    (63) end_assign -> . SEMICOLON empty

    SEMICOLON       shift and go to state 170

    end_assign                     shift and go to state 169

state 124

    (59) specialf_assign -> exp .

    SEMICOLON       reduce using rule 59 (specialf_assign -> exp .)


state 125

    (60) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 60 (specialf_assign -> special_function .)


state 126

    (61) specialf_assign -> read .

    SEMICOLON       reduce using rule 61 (specialf_assign -> read .)


state 127

    (110) exp -> t_exp . exp_or
    (111) exp_or -> . exp_keep_or exp
    (112) exp_or -> . empty
    (113) exp_keep_or -> . OR
    (3) empty -> .

    OR              shift and go to state 174
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    exp_or                         shift and go to state 171
    exp_keep_or                    shift and go to state 172
    empty                          shift and go to state 173

state 128

    (88) special_function -> exploration .

    SEMICOLON       reduce using rule 88 (special_function -> exploration .)


state 129

    (89) special_function -> financial_state .

    SEMICOLON       reduce using rule 89 (special_function -> financial_state .)


state 130

    (90) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 90 (special_function -> dummi_regression .)


state 131

    (91) special_function -> season_analysis .

    SEMICOLON       reduce using rule 91 (special_function -> season_analysis .)


state 132

    (92) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 92 (special_function -> trend_prediction .)


state 133

    (93) special_function -> model_predict .

    SEMICOLON       reduce using rule 93 (special_function -> model_predict .)


state 134

    (72) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 175


state 135

    (144) factor_exp -> LPAREN . exp RPAREN
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 176
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 136

    (114) t_exp -> expression . t_exp_and
    (115) t_exp_and -> . AND keep_and t_exp
    (116) t_exp_and -> . empty
    (3) empty -> .

    AND             shift and go to state 178
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    t_exp_and                      shift and go to state 177
    empty                          shift and go to state 179

state 137

    (94) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 180


state 138

    (99) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 181


state 139

    (102) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 182


state 140

    (100) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 183


state 141

    (101) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    LPAREN          shift and go to state 184


state 142

    (109) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 185


state 143

    (118) expression -> m_exp . expression_comp
    (119) expression_comp -> . expression_comp_2 m_exp
    (120) expression_comp -> . empty
    (121) expression_comp_2 -> . EQUAL
    (122) expression_comp_2 -> . NOTEQUAL
    (123) expression_comp_2 -> . LTHAN
    (124) expression_comp_2 -> . GTHAN
    (3) empty -> .

    EQUAL           shift and go to state 189
    NOTEQUAL        shift and go to state 190
    LTHAN           shift and go to state 191
    GTHAN           shift and go to state 192
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    expression_comp                shift and go to state 186
    expression_comp_2              shift and go to state 187
    empty                          shift and go to state 188

state 144

    (125) m_exp -> term . m_exp_sr
    (126) m_exp_sr -> . m_exp_sr_2 m_exp
    (127) m_exp_sr -> . empty
    (128) m_exp_sr_2 -> . PLUS
    (129) m_exp_sr_2 -> . MINUS
    (3) empty -> .

    PLUS            shift and go to state 196
    MINUS           shift and go to state 197
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    m_exp_sr                       shift and go to state 193
    m_exp_sr_2                     shift and go to state 194
    empty                          shift and go to state 195

state 145

    (130) term -> sub_factor . term_pc
    (131) term_pc -> . term_pc_2 term
    (132) term_pc -> . empty
    (133) term_pc_2 -> . MULTIPLY
    (134) term_pc_2 -> . DIVIDE
    (135) term_pc_2 -> . MODULE
    (3) empty -> .

    MULTIPLY        shift and go to state 201
    DIVIDE          shift and go to state 202
    MODULE          shift and go to state 203
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    term_pc                        shift and go to state 198
    term_pc_2                      shift and go to state 199
    empty                          shift and go to state 200

state 146

    (136) sub_factor -> factor . sub_factor_pc
    (137) sub_factor_pc -> . sub_factor_pc_2 sub_factor
    (138) sub_factor_pc -> . empty
    (139) sub_factor_pc_2 -> . POWER empty
    (3) empty -> .

    POWER           shift and go to state 207
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    sub_factor_pc                  shift and go to state 204
    sub_factor_pc_2                shift and go to state 205
    empty                          shift and go to state 206

state 147

    (140) factor -> factor_exp .

    POWER           reduce using rule 140 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 140 (factor -> factor_exp .)
    DIVIDE          reduce using rule 140 (factor -> factor_exp .)
    MODULE          reduce using rule 140 (factor -> factor_exp .)
    PLUS            reduce using rule 140 (factor -> factor_exp .)
    MINUS           reduce using rule 140 (factor -> factor_exp .)
    EQUAL           reduce using rule 140 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 140 (factor -> factor_exp .)
    LTHAN           reduce using rule 140 (factor -> factor_exp .)
    GTHAN           reduce using rule 140 (factor -> factor_exp .)
    AND             reduce using rule 140 (factor -> factor_exp .)
    OR              reduce using rule 140 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 140 (factor -> factor_exp .)
    RPAREN          reduce using rule 140 (factor -> factor_exp .)
    COMMA           reduce using rule 140 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 140 (factor -> factor_exp .)


state 148

    (141) factor -> factor_cte .

    POWER           reduce using rule 141 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 141 (factor -> factor_cte .)
    DIVIDE          reduce using rule 141 (factor -> factor_cte .)
    MODULE          reduce using rule 141 (factor -> factor_cte .)
    PLUS            reduce using rule 141 (factor -> factor_cte .)
    MINUS           reduce using rule 141 (factor -> factor_cte .)
    EQUAL           reduce using rule 141 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 141 (factor -> factor_cte .)
    LTHAN           reduce using rule 141 (factor -> factor_cte .)
    GTHAN           reduce using rule 141 (factor -> factor_cte .)
    AND             reduce using rule 141 (factor -> factor_cte .)
    OR              reduce using rule 141 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 141 (factor -> factor_cte .)
    RPAREN          reduce using rule 141 (factor -> factor_cte .)
    COMMA           reduce using rule 141 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 141 (factor -> factor_cte .)


state 149

    (143) factor -> call_function .

    POWER           reduce using rule 143 (factor -> call_function .)
    MULTIPLY        reduce using rule 143 (factor -> call_function .)
    DIVIDE          reduce using rule 143 (factor -> call_function .)
    MODULE          reduce using rule 143 (factor -> call_function .)
    PLUS            reduce using rule 143 (factor -> call_function .)
    MINUS           reduce using rule 143 (factor -> call_function .)
    EQUAL           reduce using rule 143 (factor -> call_function .)
    NOTEQUAL        reduce using rule 143 (factor -> call_function .)
    LTHAN           reduce using rule 143 (factor -> call_function .)
    GTHAN           reduce using rule 143 (factor -> call_function .)
    AND             reduce using rule 143 (factor -> call_function .)
    OR              reduce using rule 143 (factor -> call_function .)
    SEMICOLON       reduce using rule 143 (factor -> call_function .)
    RPAREN          reduce using rule 143 (factor -> call_function .)
    COMMA           reduce using rule 143 (factor -> call_function .)
    RSQBRACKET      reduce using rule 143 (factor -> call_function .)


state 150

    (145) factor_cte -> CTE_FLOAT .

    POWER           reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    MODULE          reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 145 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 145 (factor_cte -> CTE_FLOAT .)


state 151

    (146) factor_cte -> CTE_INT .

    POWER           reduce using rule 146 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 146 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 146 (factor_cte -> CTE_INT .)
    MODULE          reduce using rule 146 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 146 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 146 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 146 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 146 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 146 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 146 (factor_cte -> CTE_INT .)
    AND             reduce using rule 146 (factor_cte -> CTE_INT .)
    OR              reduce using rule 146 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 146 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 146 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 146 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 146 (factor_cte -> CTE_INT .)


state 152

    (147) factor_cte -> CTE_CHAR .

    POWER           reduce using rule 147 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 147 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 147 (factor_cte -> CTE_CHAR .)
    MODULE          reduce using rule 147 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 147 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 147 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 147 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 147 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 147 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 147 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 147 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 147 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 147 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 147 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 147 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 147 (factor_cte -> CTE_CHAR .)


state 153

    (4) id_saver -> ID . empty
    (80) function_saver -> ID . empty
    (3) empty -> .

    LSQBRACKET      reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    empty                          shift and go to state 208

state 154

    (62) keep_assign -> ASSIGN empty .

    READ            reduce using rule 62 (keep_assign -> ASSIGN empty .)
    EXPLORATION     reduce using rule 62 (keep_assign -> ASSIGN empty .)
    FINANCIAL_STATE reduce using rule 62 (keep_assign -> ASSIGN empty .)
    DUMMI_REGRESSION reduce using rule 62 (keep_assign -> ASSIGN empty .)
    SEASON_ANALYSIS reduce using rule 62 (keep_assign -> ASSIGN empty .)
    TREND_PREDICTION reduce using rule 62 (keep_assign -> ASSIGN empty .)
    MODEL_PREDICT   reduce using rule 62 (keep_assign -> ASSIGN empty .)
    LPAREN          reduce using rule 62 (keep_assign -> ASSIGN empty .)
    CTE_FLOAT       reduce using rule 62 (keep_assign -> ASSIGN empty .)
    CTE_INT         reduce using rule 62 (keep_assign -> ASSIGN empty .)
    CTE_CHAR        reduce using rule 62 (keep_assign -> ASSIGN empty .)
    ID              reduce using rule 62 (keep_assign -> ASSIGN empty .)


state 155

    (64) condition -> IF LPAREN exp . RPAREN body condition2 SEMICOLON

    RPAREN          shift and go to state 209


state 156

    (67) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 210


state 157

    (69) print_many -> print_type . print_many2
    (70) print_many2 -> . COMMA print_many
    (71) print_many2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 212
    RPAREN          reduce using rule 3 (empty -> .)

    print_many2                    shift and go to state 211
    empty                          shift and go to state 213

state 158

    (68) print_type -> exp .

    COMMA           reduce using rule 68 (print_type -> exp .)
    RPAREN          reduce using rule 68 (print_type -> exp .)


state 159

    (79) call_function -> function_saver LPAREN exp . exp_many RPAREN
    (81) exp_many -> . COMMA exp exp_many
    (82) exp_many -> . empty
    (3) empty -> .

    COMMA           shift and go to state 215
    RPAREN          reduce using rule 3 (empty -> .)

    exp_many                       shift and go to state 214
    empty                          shift and go to state 216

state 160

    (36) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 217


state 161

    (76) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 218


state 162

    (75) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 219


state 163

    (55) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 220


state 164

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET program_function
    (13) program_vars -> . VAR var_type
    (14) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 221
    empty                          shift and go to state 11

state 165

    (47) param -> s_type id_saver add_params . param2
    (48) param2 -> . COMMA s_type id_saver add_params param2
    (49) param2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 3 (empty -> .)

    param2                         shift and go to state 222
    empty                          shift and go to state 224

state 166

    (50) add_params -> empty .

    COMMA           reduce using rule 50 (add_params -> empty .)
    RPAREN          reduce using rule 50 (add_params -> empty .)


state 167

    (27) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (27) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (28) var_s_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_type2                    shift and go to state 225
    empty                          shift and go to state 70

state 168

    (32) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 32 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 32 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 169

    (58) assign -> variable keep_assign specialf_assign end_assign .

    IF              reduce using rule 58 (assign -> variable keep_assign specialf_assign end_assign .)
    PRINT           reduce using rule 58 (assign -> variable keep_assign specialf_assign end_assign .)
    FOR             reduce using rule 58 (assign -> variable keep_assign specialf_assign end_assign .)
    DO              reduce using rule 58 (assign -> variable keep_assign specialf_assign end_assign .)
    ID              reduce using rule 58 (assign -> variable keep_assign specialf_assign end_assign .)
    RBRACKET        reduce using rule 58 (assign -> variable keep_assign specialf_assign end_assign .)
    RETURN          reduce using rule 58 (assign -> variable keep_assign specialf_assign end_assign .)


state 170

    (63) end_assign -> SEMICOLON . empty
    (3) empty -> .

    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 226

state 171

    (110) exp -> t_exp exp_or .

    SEMICOLON       reduce using rule 110 (exp -> t_exp exp_or .)
    RPAREN          reduce using rule 110 (exp -> t_exp exp_or .)
    COMMA           reduce using rule 110 (exp -> t_exp exp_or .)
    RSQBRACKET      reduce using rule 110 (exp -> t_exp exp_or .)


state 172

    (111) exp_or -> exp_keep_or . exp
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 227
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 173

    (112) exp_or -> empty .

    SEMICOLON       reduce using rule 112 (exp_or -> empty .)
    RPAREN          reduce using rule 112 (exp_or -> empty .)
    COMMA           reduce using rule 112 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 112 (exp_or -> empty .)


state 174

    (113) exp_keep_or -> OR .

    LPAREN          reduce using rule 113 (exp_keep_or -> OR .)
    CTE_FLOAT       reduce using rule 113 (exp_keep_or -> OR .)
    CTE_INT         reduce using rule 113 (exp_keep_or -> OR .)
    CTE_CHAR        reduce using rule 113 (exp_keep_or -> OR .)
    ID              reduce using rule 113 (exp_keep_or -> OR .)


state 175

    (72) read -> READ LPAREN . variable RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 228
    id_saver                       shift and go to state 87

state 176

    (144) factor_exp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 229


state 177

    (114) t_exp -> expression t_exp_and .

    OR              reduce using rule 114 (t_exp -> expression t_exp_and .)
    SEMICOLON       reduce using rule 114 (t_exp -> expression t_exp_and .)
    RPAREN          reduce using rule 114 (t_exp -> expression t_exp_and .)
    COMMA           reduce using rule 114 (t_exp -> expression t_exp_and .)
    RSQBRACKET      reduce using rule 114 (t_exp -> expression t_exp_and .)


state 178

    (115) t_exp_and -> AND . keep_and t_exp
    (117) keep_and -> . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)
    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    keep_and                       shift and go to state 230
    empty                          shift and go to state 231

state 179

    (116) t_exp_and -> empty .

    OR              reduce using rule 116 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 116 (t_exp_and -> empty .)
    RPAREN          reduce using rule 116 (t_exp_and -> empty .)
    COMMA           reduce using rule 116 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 116 (t_exp_and -> empty .)


state 180

    (94) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 232
    id_saver                       shift and go to state 87

state 181

    (99) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 233
    id_saver                       shift and go to state 87

state 182

    (102) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 234
    id_saver                       shift and go to state 87

state 183

    (100) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 235
    id_saver                       shift and go to state 87

state 184

    (101) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 236
    id_saver                       shift and go to state 87

state 185

    (109) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 237
    id_saver                       shift and go to state 87

state 186

    (118) expression -> m_exp expression_comp .

    AND             reduce using rule 118 (expression -> m_exp expression_comp .)
    OR              reduce using rule 118 (expression -> m_exp expression_comp .)
    SEMICOLON       reduce using rule 118 (expression -> m_exp expression_comp .)
    RPAREN          reduce using rule 118 (expression -> m_exp expression_comp .)
    COMMA           reduce using rule 118 (expression -> m_exp expression_comp .)
    RSQBRACKET      reduce using rule 118 (expression -> m_exp expression_comp .)


state 187

    (119) expression_comp -> expression_comp_2 . m_exp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    m_exp                          shift and go to state 238
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 188

    (120) expression_comp -> empty .

    AND             reduce using rule 120 (expression_comp -> empty .)
    OR              reduce using rule 120 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 120 (expression_comp -> empty .)
    RPAREN          reduce using rule 120 (expression_comp -> empty .)
    COMMA           reduce using rule 120 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 120 (expression_comp -> empty .)


state 189

    (121) expression_comp_2 -> EQUAL .

    LPAREN          reduce using rule 121 (expression_comp_2 -> EQUAL .)
    CTE_FLOAT       reduce using rule 121 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 121 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 121 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 121 (expression_comp_2 -> EQUAL .)


state 190

    (122) expression_comp_2 -> NOTEQUAL .

    LPAREN          reduce using rule 122 (expression_comp_2 -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 122 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 122 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 122 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 122 (expression_comp_2 -> NOTEQUAL .)


state 191

    (123) expression_comp_2 -> LTHAN .

    LPAREN          reduce using rule 123 (expression_comp_2 -> LTHAN .)
    CTE_FLOAT       reduce using rule 123 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 123 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 123 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 123 (expression_comp_2 -> LTHAN .)


state 192

    (124) expression_comp_2 -> GTHAN .

    LPAREN          reduce using rule 124 (expression_comp_2 -> GTHAN .)
    CTE_FLOAT       reduce using rule 124 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 124 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 124 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 124 (expression_comp_2 -> GTHAN .)


state 193

    (125) m_exp -> term m_exp_sr .

    EQUAL           reduce using rule 125 (m_exp -> term m_exp_sr .)
    NOTEQUAL        reduce using rule 125 (m_exp -> term m_exp_sr .)
    LTHAN           reduce using rule 125 (m_exp -> term m_exp_sr .)
    GTHAN           reduce using rule 125 (m_exp -> term m_exp_sr .)
    AND             reduce using rule 125 (m_exp -> term m_exp_sr .)
    OR              reduce using rule 125 (m_exp -> term m_exp_sr .)
    SEMICOLON       reduce using rule 125 (m_exp -> term m_exp_sr .)
    RPAREN          reduce using rule 125 (m_exp -> term m_exp_sr .)
    COMMA           reduce using rule 125 (m_exp -> term m_exp_sr .)
    RSQBRACKET      reduce using rule 125 (m_exp -> term m_exp_sr .)


state 194

    (126) m_exp_sr -> m_exp_sr_2 . m_exp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    m_exp                          shift and go to state 239
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 195

    (127) m_exp_sr -> empty .

    EQUAL           reduce using rule 127 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 127 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 127 (m_exp_sr -> empty .)
    GTHAN           reduce using rule 127 (m_exp_sr -> empty .)
    AND             reduce using rule 127 (m_exp_sr -> empty .)
    OR              reduce using rule 127 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 127 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 127 (m_exp_sr -> empty .)
    COMMA           reduce using rule 127 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 127 (m_exp_sr -> empty .)


state 196

    (128) m_exp_sr_2 -> PLUS .

    LPAREN          reduce using rule 128 (m_exp_sr_2 -> PLUS .)
    CTE_FLOAT       reduce using rule 128 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 128 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 128 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 128 (m_exp_sr_2 -> PLUS .)


state 197

    (129) m_exp_sr_2 -> MINUS .

    LPAREN          reduce using rule 129 (m_exp_sr_2 -> MINUS .)
    CTE_FLOAT       reduce using rule 129 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 129 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 129 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 129 (m_exp_sr_2 -> MINUS .)


state 198

    (130) term -> sub_factor term_pc .

    PLUS            reduce using rule 130 (term -> sub_factor term_pc .)
    MINUS           reduce using rule 130 (term -> sub_factor term_pc .)
    EQUAL           reduce using rule 130 (term -> sub_factor term_pc .)
    NOTEQUAL        reduce using rule 130 (term -> sub_factor term_pc .)
    LTHAN           reduce using rule 130 (term -> sub_factor term_pc .)
    GTHAN           reduce using rule 130 (term -> sub_factor term_pc .)
    AND             reduce using rule 130 (term -> sub_factor term_pc .)
    OR              reduce using rule 130 (term -> sub_factor term_pc .)
    SEMICOLON       reduce using rule 130 (term -> sub_factor term_pc .)
    RPAREN          reduce using rule 130 (term -> sub_factor term_pc .)
    COMMA           reduce using rule 130 (term -> sub_factor term_pc .)
    RSQBRACKET      reduce using rule 130 (term -> sub_factor term_pc .)


state 199

    (131) term_pc -> term_pc_2 . term
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    term                           shift and go to state 240
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 200

    (132) term_pc -> empty .

    PLUS            reduce using rule 132 (term_pc -> empty .)
    MINUS           reduce using rule 132 (term_pc -> empty .)
    EQUAL           reduce using rule 132 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 132 (term_pc -> empty .)
    LTHAN           reduce using rule 132 (term_pc -> empty .)
    GTHAN           reduce using rule 132 (term_pc -> empty .)
    AND             reduce using rule 132 (term_pc -> empty .)
    OR              reduce using rule 132 (term_pc -> empty .)
    SEMICOLON       reduce using rule 132 (term_pc -> empty .)
    RPAREN          reduce using rule 132 (term_pc -> empty .)
    COMMA           reduce using rule 132 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 132 (term_pc -> empty .)


state 201

    (133) term_pc_2 -> MULTIPLY .

    LPAREN          reduce using rule 133 (term_pc_2 -> MULTIPLY .)
    CTE_FLOAT       reduce using rule 133 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 133 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 133 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 133 (term_pc_2 -> MULTIPLY .)


state 202

    (134) term_pc_2 -> DIVIDE .

    LPAREN          reduce using rule 134 (term_pc_2 -> DIVIDE .)
    CTE_FLOAT       reduce using rule 134 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 134 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 134 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 134 (term_pc_2 -> DIVIDE .)


state 203

    (135) term_pc_2 -> MODULE .

    LPAREN          reduce using rule 135 (term_pc_2 -> MODULE .)
    CTE_FLOAT       reduce using rule 135 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 135 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 135 (term_pc_2 -> MODULE .)
    ID              reduce using rule 135 (term_pc_2 -> MODULE .)


state 204

    (136) sub_factor -> factor sub_factor_pc .

    MULTIPLY        reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    DIVIDE          reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    MODULE          reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    PLUS            reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    MINUS           reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    EQUAL           reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    NOTEQUAL        reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    LTHAN           reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    GTHAN           reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    AND             reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    OR              reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    SEMICOLON       reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    RPAREN          reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    COMMA           reduce using rule 136 (sub_factor -> factor sub_factor_pc .)
    RSQBRACKET      reduce using rule 136 (sub_factor -> factor sub_factor_pc .)


state 205

    (137) sub_factor_pc -> sub_factor_pc_2 . sub_factor
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    sub_factor                     shift and go to state 241
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 206

    (138) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 138 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 138 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 138 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 138 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 138 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 138 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 138 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 138 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 138 (sub_factor_pc -> empty .)
    AND             reduce using rule 138 (sub_factor_pc -> empty .)
    OR              reduce using rule 138 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 138 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 138 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 138 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 138 (sub_factor_pc -> empty .)


state 207

    (139) sub_factor_pc_2 -> POWER . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)
    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    empty                          shift and go to state 242

state 208

    (4) id_saver -> ID empty .
    (80) function_saver -> ID empty .

    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    POWER           reduce using rule 4 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 4 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 4 (id_saver -> ID empty .)
    MODULE          reduce using rule 4 (id_saver -> ID empty .)
    PLUS            reduce using rule 4 (id_saver -> ID empty .)
    MINUS           reduce using rule 4 (id_saver -> ID empty .)
    EQUAL           reduce using rule 4 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 4 (id_saver -> ID empty .)
    LTHAN           reduce using rule 4 (id_saver -> ID empty .)
    GTHAN           reduce using rule 4 (id_saver -> ID empty .)
    AND             reduce using rule 4 (id_saver -> ID empty .)
    OR              reduce using rule 4 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 4 (id_saver -> ID empty .)
    RPAREN          reduce using rule 4 (id_saver -> ID empty .)
    COMMA           reduce using rule 4 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    LPAREN          reduce using rule 80 (function_saver -> ID empty .)


state 209

    (64) condition -> IF LPAREN exp RPAREN . body condition2 SEMICOLON
    (55) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 243

state 210

    (67) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 244


state 211

    (69) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 69 (print_many -> print_type print_many2 .)


state 212

    (70) print_many2 -> COMMA . print_many
    (69) print_many -> . print_type print_many2
    (68) print_type -> . exp
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    print_many                     shift and go to state 245
    print_type                     shift and go to state 157
    exp                            shift and go to state 158
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 213

    (71) print_many2 -> empty .

    RPAREN          reduce using rule 71 (print_many2 -> empty .)


state 214

    (79) call_function -> function_saver LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 246


state 215

    (81) exp_many -> COMMA . exp exp_many
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 247
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 216

    (82) exp_many -> empty .

    RPAREN          reduce using rule 82 (exp_many -> empty .)


state 217

    (36) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (38) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (39) variable_matrix -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 248
    ASSIGN          reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    variable_matrix                shift and go to state 249
    empty                          shift and go to state 250

state 218

    (76) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (77) for_end -> . int_const_saver
    (78) for_end -> . ID
    (5) int_const_saver -> . CTE_INT empty

    ID              shift and go to state 251
    CTE_INT         shift and go to state 254

    for_end                        shift and go to state 252
    int_const_saver                shift and go to state 253

state 219

    (75) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 255
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 220

    (55) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 55 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 55 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 55 (body -> LBRACKET inner_body RBRACKET .)


state 221

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET program_function
    (56) inner_body -> . statement inner_body
    (57) inner_body -> . empty
    (83) statement -> . assign
    (84) statement -> . condition
    (85) statement -> . print
    (86) statement -> . cycle
    (87) statement -> . call_function
    (3) empty -> .
    (58) assign -> . variable keep_assign specialf_assign end_assign
    (64) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (67) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (73) cycle -> . for
    (74) cycle -> . while
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (35) variable -> . id_saver variable_array
    (76) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (75) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (80) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RETURN          reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    id_saver                       shift and go to state 87
    inner_body                     shift and go to state 256
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86

state 222

    (47) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 47 (param -> s_type id_saver add_params param2 .)


state 223

    (48) param2 -> COMMA . s_type id_saver add_params param2
    (15) s_type -> . INT
    (16) s_type -> . FLOAT
    (17) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 257

state 224

    (49) param2 -> empty .

    RPAREN          reduce using rule 49 (param2 -> empty .)


state 225

    (27) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 27 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 226

    (63) end_assign -> SEMICOLON empty .

    IF              reduce using rule 63 (end_assign -> SEMICOLON empty .)
    PRINT           reduce using rule 63 (end_assign -> SEMICOLON empty .)
    FOR             reduce using rule 63 (end_assign -> SEMICOLON empty .)
    DO              reduce using rule 63 (end_assign -> SEMICOLON empty .)
    ID              reduce using rule 63 (end_assign -> SEMICOLON empty .)
    RBRACKET        reduce using rule 63 (end_assign -> SEMICOLON empty .)
    RETURN          reduce using rule 63 (end_assign -> SEMICOLON empty .)


state 227

    (111) exp_or -> exp_keep_or exp .

    SEMICOLON       reduce using rule 111 (exp_or -> exp_keep_or exp .)
    RPAREN          reduce using rule 111 (exp_or -> exp_keep_or exp .)
    COMMA           reduce using rule 111 (exp_or -> exp_keep_or exp .)
    RSQBRACKET      reduce using rule 111 (exp_or -> exp_keep_or exp .)


state 228

    (72) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 258


state 229

    (144) factor_exp -> LPAREN exp RPAREN .

    POWER           reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    MODULE          reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    LTHAN           reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    GTHAN           reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)
    RSQBRACKET      reduce using rule 144 (factor_exp -> LPAREN exp RPAREN .)


state 230

    (115) t_exp_and -> AND keep_and . t_exp
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    t_exp                          shift and go to state 259
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 231

    (117) keep_and -> empty .

    LPAREN          reduce using rule 117 (keep_and -> empty .)
    CTE_FLOAT       reduce using rule 117 (keep_and -> empty .)
    CTE_INT         reduce using rule 117 (keep_and -> empty .)
    CTE_CHAR        reduce using rule 117 (keep_and -> empty .)
    ID              reduce using rule 117 (keep_and -> empty .)


state 232

    (94) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (95) explore_var -> . COMMA variable
    (96) explore_var -> . empty
    (3) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 261
    RPAREN          reduce using rule 3 (empty -> .)

  ! COMMA           [ reduce using rule 3 (empty -> .) ]

    explore_var                    shift and go to state 260
    empty                          shift and go to state 262

state 233

    (99) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 263


state 234

    (102) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 264


state 235

    (100) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 265


state 236

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 266


state 237

    (109) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 267


state 238

    (119) expression_comp -> expression_comp_2 m_exp .

    AND             reduce using rule 119 (expression_comp -> expression_comp_2 m_exp .)
    OR              reduce using rule 119 (expression_comp -> expression_comp_2 m_exp .)
    SEMICOLON       reduce using rule 119 (expression_comp -> expression_comp_2 m_exp .)
    RPAREN          reduce using rule 119 (expression_comp -> expression_comp_2 m_exp .)
    COMMA           reduce using rule 119 (expression_comp -> expression_comp_2 m_exp .)
    RSQBRACKET      reduce using rule 119 (expression_comp -> expression_comp_2 m_exp .)


state 239

    (126) m_exp_sr -> m_exp_sr_2 m_exp .

    EQUAL           reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GTHAN           reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 126 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 240

    (131) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 131 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 131 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 131 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 131 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 131 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 131 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 131 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 131 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 131 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 131 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 131 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 131 (term_pc -> term_pc_2 term .)


state 241

    (137) sub_factor_pc -> sub_factor_pc_2 sub_factor .

    MULTIPLY        reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    DIVIDE          reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MODULE          reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    PLUS            reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MINUS           reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    EQUAL           reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    NOTEQUAL        reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LTHAN           reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GTHAN           reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    AND             reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    OR              reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    SEMICOLON       reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RPAREN          reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    COMMA           reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RSQBRACKET      reduce using rule 137 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)


state 242

    (139) sub_factor_pc_2 -> POWER empty .

    LPAREN          reduce using rule 139 (sub_factor_pc_2 -> POWER empty .)
    CTE_FLOAT       reduce using rule 139 (sub_factor_pc_2 -> POWER empty .)
    CTE_INT         reduce using rule 139 (sub_factor_pc_2 -> POWER empty .)
    CTE_CHAR        reduce using rule 139 (sub_factor_pc_2 -> POWER empty .)
    ID              reduce using rule 139 (sub_factor_pc_2 -> POWER empty .)


state 243

    (64) condition -> IF LPAREN exp RPAREN body . condition2 SEMICOLON
    (65) condition2 -> . ELSE body
    (66) condition2 -> . empty
    (3) empty -> .

    ELSE            shift and go to state 269
    SEMICOLON       reduce using rule 3 (empty -> .)

    condition2                     shift and go to state 268
    empty                          shift and go to state 270

state 244

    (67) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 67 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 67 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 67 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 67 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 67 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 67 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 245

    (70) print_many2 -> COMMA print_many .

    RPAREN          reduce using rule 70 (print_many2 -> COMMA print_many .)


state 246

    (79) call_function -> function_saver LPAREN exp exp_many RPAREN .

    IF              reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    POWER           reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MODULE          reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 79 (call_function -> function_saver LPAREN exp exp_many RPAREN .)


state 247

    (81) exp_many -> COMMA exp . exp_many
    (81) exp_many -> . COMMA exp exp_many
    (82) exp_many -> . empty
    (3) empty -> .

    COMMA           shift and go to state 215
    RPAREN          reduce using rule 3 (empty -> .)

    exp_many                       shift and go to state 271
    empty                          shift and go to state 216

state 248

    (38) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 272
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 249

    (36) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    POWER           reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 36 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 250

    (39) variable_matrix -> empty .

    ASSIGN          reduce using rule 39 (variable_matrix -> empty .)
    POWER           reduce using rule 39 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 39 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 39 (variable_matrix -> empty .)
    MODULE          reduce using rule 39 (variable_matrix -> empty .)
    PLUS            reduce using rule 39 (variable_matrix -> empty .)
    MINUS           reduce using rule 39 (variable_matrix -> empty .)
    EQUAL           reduce using rule 39 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 39 (variable_matrix -> empty .)
    LTHAN           reduce using rule 39 (variable_matrix -> empty .)
    GTHAN           reduce using rule 39 (variable_matrix -> empty .)
    AND             reduce using rule 39 (variable_matrix -> empty .)
    OR              reduce using rule 39 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 39 (variable_matrix -> empty .)
    RPAREN          reduce using rule 39 (variable_matrix -> empty .)
    COMMA           reduce using rule 39 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 39 (variable_matrix -> empty .)


state 251

    (78) for_end -> ID .

    RPAREN          reduce using rule 78 (for_end -> ID .)


state 252

    (76) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 273


state 253

    (77) for_end -> int_const_saver .

    RPAREN          reduce using rule 77 (for_end -> int_const_saver .)


state 254

    (5) int_const_saver -> CTE_INT . empty
    (3) empty -> .

    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)

    empty                          shift and go to state 274

state 255

    (75) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 275


state 256

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET program_function
    (51) return -> . RETURN exp SEMICOLON
    (52) return -> . empty
    (3) empty -> .

    RETURN          shift and go to state 277
    RBRACKET        reduce using rule 3 (empty -> .)

    return                         shift and go to state 276
    empty                          shift and go to state 278

state 257

    (48) param2 -> COMMA s_type . id_saver add_params param2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 279

state 258

    (72) read -> READ LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 72 (read -> READ LPAREN variable RPAREN .)


state 259

    (115) t_exp_and -> AND keep_and t_exp .

    OR              reduce using rule 115 (t_exp_and -> AND keep_and t_exp .)
    SEMICOLON       reduce using rule 115 (t_exp_and -> AND keep_and t_exp .)
    RPAREN          reduce using rule 115 (t_exp_and -> AND keep_and t_exp .)
    COMMA           reduce using rule 115 (t_exp_and -> AND keep_and t_exp .)
    RSQBRACKET      reduce using rule 115 (t_exp_and -> AND keep_and t_exp .)


state 260

    (94) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (97) explor_cte -> . COMMA int_const_saver
    (98) explor_cte -> . empty
    (3) empty -> .

    COMMA           shift and go to state 281
    RPAREN          reduce using rule 3 (empty -> .)

    explor_cte                     shift and go to state 280
    empty                          shift and go to state 282

state 261

    (95) explore_var -> COMMA . variable
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 283
    id_saver                       shift and go to state 87

state 262

    (96) explore_var -> empty .

    COMMA           reduce using rule 96 (explore_var -> empty .)
    RPAREN          reduce using rule 96 (explore_var -> empty .)


state 263

    (99) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 284
    id_saver                       shift and go to state 87

state 264

    (102) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 285
    id_saver                       shift and go to state 87

state 265

    (100) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 100 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 266

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 254

    int_const_saver                shift and go to state 286

state 267

    (109) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 287
    id_saver                       shift and go to state 87

state 268

    (64) condition -> IF LPAREN exp RPAREN body condition2 . SEMICOLON

    SEMICOLON       shift and go to state 288


state 269

    (65) condition2 -> ELSE . body
    (55) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 289

state 270

    (66) condition2 -> empty .

    SEMICOLON       reduce using rule 66 (condition2 -> empty .)


state 271

    (81) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 81 (exp_many -> COMMA exp exp_many .)


state 272

    (38) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 290


state 273

    (76) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (55) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 291

state 274

    (5) int_const_saver -> CTE_INT empty .

    RPAREN          reduce using rule 5 (int_const_saver -> CTE_INT empty .)
    COMMA           reduce using rule 5 (int_const_saver -> CTE_INT empty .)


state 275

    (75) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 292


state 276

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET program_function

    RBRACKET        shift and go to state 293


state 277

    (51) return -> RETURN . exp SEMICOLON
    (110) exp -> . t_exp exp_or
    (114) t_exp -> . expression t_exp_and
    (118) expression -> . m_exp expression_comp
    (125) m_exp -> . term m_exp_sr
    (130) term -> . sub_factor term_pc
    (136) sub_factor -> . factor sub_factor_pc
    (140) factor -> . factor_exp
    (141) factor -> . factor_cte
    (142) factor -> . variable
    (143) factor -> . call_function
    (144) factor_exp -> . LPAREN exp RPAREN
    (145) factor_cte -> . CTE_FLOAT
    (146) factor_cte -> . CTE_INT
    (147) factor_cte -> . CTE_CHAR
    (35) variable -> . id_saver variable_array
    (79) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (4) id_saver -> . ID empty
    (80) function_saver -> . ID empty

    LPAREN          shift and go to state 135
    CTE_FLOAT       shift and go to state 150
    CTE_INT         shift and go to state 151
    CTE_CHAR        shift and go to state 152
    ID              shift and go to state 153

    exp                            shift and go to state 294
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 278

    (52) return -> empty .

    RBRACKET        reduce using rule 52 (return -> empty .)


state 279

    (48) param2 -> COMMA s_type id_saver . add_params param2
    (50) add_params -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    add_params                     shift and go to state 295
    empty                          shift and go to state 166

state 280

    (94) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 296


state 281

    (97) explor_cte -> COMMA . int_const_saver
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 254

    int_const_saver                shift and go to state 297

state 282

    (98) explor_cte -> empty .

    RPAREN          reduce using rule 98 (explor_cte -> empty .)


state 283

    (95) explore_var -> COMMA variable .

    COMMA           reduce using rule 95 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 95 (explore_var -> COMMA variable .)


state 284

    (99) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 298


state 285

    (102) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (103) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (104) dr_array -> . empty
    (3) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 299
    RPAREN          reduce using rule 3 (empty -> .)

  ! COMMA           [ reduce using rule 3 (empty -> .) ]

    dr_array                       shift and go to state 300
    empty                          shift and go to state 301

state 286

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver . COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 302


state 287

    (109) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 303


state 288

    (64) condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .

    IF              reduce using rule 64 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    PRINT           reduce using rule 64 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FOR             reduce using rule 64 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DO              reduce using rule 64 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ID              reduce using rule 64 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RBRACKET        reduce using rule 64 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RETURN          reduce using rule 64 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)


state 289

    (65) condition2 -> ELSE body .

    SEMICOLON       reduce using rule 65 (condition2 -> ELSE body .)


state 290

    (38) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    POWER           reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MODULE          reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 38 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 291

    (76) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 304


state 292

    (75) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 75 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 75 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 75 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 75 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 75 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 75 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 75 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 293

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET . program_function
    (40) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (41) program_function -> . empty
    (3) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 3 (empty -> .)

    program_function               shift and go to state 305
    empty                          shift and go to state 17

state 294

    (51) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 306


state 295

    (48) param2 -> COMMA s_type id_saver add_params . param2
    (48) param2 -> . COMMA s_type id_saver add_params param2
    (49) param2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 3 (empty -> .)

    param2                         shift and go to state 307
    empty                          shift and go to state 224

state 296

    (94) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 94 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 297

    (97) explor_cte -> COMMA int_const_saver .

    RPAREN          reduce using rule 97 (explor_cte -> COMMA int_const_saver .)


state 298

    (99) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 308
    id_saver                       shift and go to state 87

state 299

    (103) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 309


state 300

    (102) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (107) dr_int -> . COMMA int_const_saver
    (108) dr_int -> . empty
    (3) empty -> .

    COMMA           shift and go to state 310
    RPAREN          reduce using rule 3 (empty -> .)

    dr_int                         shift and go to state 311
    empty                          shift and go to state 312

state 301

    (104) dr_array -> empty .

    COMMA           reduce using rule 104 (dr_array -> empty .)
    RPAREN          reduce using rule 104 (dr_array -> empty .)


state 302

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA . int_const_saver COMMA int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 254

    int_const_saver                shift and go to state 313

state 303

    (109) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 314


state 304

    (76) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 76 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 76 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 76 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 76 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 76 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 76 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 76 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 305

    (40) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .

    MAIN            reduce using rule 40 (program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .)


state 306

    (51) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 51 (return -> RETURN exp SEMICOLON .)


state 307

    (48) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 48 (param2 -> COMMA s_type id_saver add_params param2 .)


state 308

    (99) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 315


state 309

    (103) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 316


state 310

    (107) dr_int -> COMMA . int_const_saver
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 254

    int_const_saver                shift and go to state 317

state 311

    (102) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 318


state 312

    (108) dr_int -> empty .

    RPAREN          reduce using rule 108 (dr_int -> empty .)


state 313

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver . COMMA int_const_saver RPAREN

    COMMA           shift and go to state 319


state 314

    (109) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 109 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 315

    (99) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (35) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 320
    id_saver                       shift and go to state 87

state 316

    (103) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (105) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (106) dr_array_mp -> . empty
    (3) empty -> .

    COMMA           shift and go to state 321
    RSQBRACKET      reduce using rule 3 (empty -> .)

    dr_array_mp                    shift and go to state 322
    empty                          shift and go to state 323

state 317

    (107) dr_int -> COMMA int_const_saver .

    RPAREN          reduce using rule 107 (dr_int -> COMMA int_const_saver .)


state 318

    (102) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 102 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 319

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA . int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 254

    int_const_saver                shift and go to state 324

state 320

    (99) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 325


state 321

    (105) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 326


state 322

    (103) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 327


state 323

    (106) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 106 (dr_array_mp -> empty .)


state 324

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver . RPAREN

    RPAREN          shift and go to state 328


state 325

    (99) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 99 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 326

    (105) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (105) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (106) dr_array_mp -> . empty
    (3) empty -> .

    COMMA           shift and go to state 321
    RSQBRACKET      reduce using rule 3 (empty -> .)

    dr_array_mp                    shift and go to state 329
    empty                          shift and go to state 323

state 327

    (103) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 103 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 103 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 328

    (101) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .

    SEMICOLON       reduce using rule 101 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .)


state 329

    (105) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 105 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 232 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 285 resolved as shift
