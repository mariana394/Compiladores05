Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    COLON
    DATE
    FROM
    IMPORT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID goto_main program_vars program_function program_main end
Rule 2     goto_main -> SEMICOLON
Rule 3     end -> END
Rule 4     empty -> <empty>
Rule 5     id_saver -> ID empty
Rule 6     int_const_saver -> CTE_INT
Rule 7     int_const_saver -> empty
Rule 8     release_exp -> empty
Rule 9     resources -> empty
Rule 10    var_type -> var_c_type
Rule 11    var_type -> var_s_type
Rule 12    program_vars -> VAR var_type
Rule 13    program_vars -> empty
Rule 14    s_type -> INT
Rule 15    s_type -> FLOAT
Rule 16    s_type -> CHAR
Rule 17    c_type -> DATAFRAME
Rule 18    var_multiple -> var_type
Rule 19    var_multiple -> empty
Rule 20    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 21    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 22    var_c_type2 -> empty
Rule 23    add_c_var -> empty
Rule 24    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 25    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 26    var_s_type2 -> empty
Rule 27    add_s_var -> empty
Rule 28    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 29    var_s_array -> empty
Rule 30    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 31    var_s_matrix -> empty
Rule 32    var_s_dimesions -> CTE_INT empty
Rule 33    variable -> var_id_saver variable_array clear_dimension
Rule 34    clear_dimension -> empty
Rule 35    var_id_saver -> id_saver
Rule 36    variable_array -> save_var exp index_arr_mat variable_matrix
Rule 37    variable_array -> empty
Rule 38    save_var -> LSQBRACKET
Rule 39    variable_matrix -> LSQBRACKET exp index_arr_mat
Rule 40    variable_matrix -> empty
Rule 41    index_arr_mat -> RSQBRACKET
Rule 42    program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function
Rule 43    program_function -> empty
Rule 44    f_type -> INT
Rule 45    f_type -> FLOAT
Rule 46    f_type -> CHAR
Rule 47    f_type -> VOID
Rule 48    func_creator -> empty
Rule 49    end_function -> RBRACKET
Rule 50    param -> s_type id_saver add_params param2
Rule 51    param -> empty
Rule 52    param2 -> COMMA s_type id_saver add_params param2
Rule 53    param2 -> empty
Rule 54    add_params -> empty
Rule 55    return -> return_np exp return_quad SEMICOLON
Rule 56    return -> empty_path_return
Rule 57    return_np -> RETURN
Rule 58    return_quad -> empty
Rule 59    empty_path_return -> empty
Rule 60    program_main -> main_id LBRACKET program_vars inner_body RBRACKET
Rule 61    main_id -> MAIN resources
Rule 62    body -> LBRACKET inner_body RBRACKET
Rule 63    inner_body -> statement inner_body
Rule 64    inner_body -> empty
Rule 65    assign -> variable keep_assign specialf_assign end_assign
Rule 66    specialf_assign -> exp
Rule 67    specialf_assign -> special_function
Rule 68    specialf_assign -> read
Rule 69    keep_assign -> ASSIGN empty
Rule 70    end_assign -> SEMICOLON empty
Rule 71    condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
Rule 72    condition2 -> ELSE condition_GOTO body
Rule 73    condition2 -> empty
Rule 74    condition_GOTOF -> empty
Rule 75    condition_GOTO -> empty
Rule 76    end_condition -> empty
Rule 77    print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
Rule 78    print_type -> exp
Rule 79    print_many -> print_type print_many2
Rule 80    print_many2 -> COMMA print_many_np print_many
Rule 81    print_many2 -> empty
Rule 82    print_many_np -> empty
Rule 83    end_print_np -> empty
Rule 84    read -> READ LPAREN valid_exp_read read_np
Rule 85    valid_exp_read -> exp
Rule 86    read_np -> RPAREN
Rule 87    cycle -> for
Rule 88    cycle -> while
Rule 89    while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
Rule 90    seed -> empty
Rule 91    gotoV -> empty
Rule 92    for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
Rule 93    for_control -> id_saver
Rule 94    for_np1 -> TO
Rule 95    for_end -> int_const_saver RPAREN
Rule 96    for_np2 -> SEMICOLON
Rule 97    call_function -> function_saver function_flag call_params check_not_void
Rule 98    check_not_void -> RPAREN
Rule 99    call_void_function -> function_saver function_flag call_params verify_params check_void
Rule 100   verify_params -> RPAREN
Rule 101   check_void -> SEMICOLON
Rule 102   function_saver -> ID empty
Rule 103   function_flag -> LPAREN
Rule 104   call_params -> check_param exp_many
Rule 105   call_params -> empty
Rule 106   check_param -> exp
Rule 107   exp_many -> COMMA check_param exp_many
Rule 108   exp_many -> empty
Rule 109   statement -> assign
Rule 110   statement -> condition
Rule 111   statement -> print
Rule 112   statement -> cycle
Rule 113   statement -> call_void_function
Rule 114   special_function -> exploration
Rule 115   special_function -> financial_state
Rule 116   special_function -> dummi_regression
Rule 117   special_function -> season_analysis
Rule 118   special_function -> trend_prediction
Rule 119   special_function -> model_predict
Rule 120   tag_sp -> LPAREN
Rule 121   exploration -> EXPLORATION tag_sp variable explore_cte np_check_size
Rule 122   sp_param -> COMMA
Rule 123   np_check_size -> RPAREN
Rule 124   explore_cte -> sp_param int_const_saver
Rule 125   financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param exp sp_param exp np_check_size
Rule 126   season_analysis -> SEASON_ANALYSIS tag_sp variable np_check_size
Rule 127   trend_prediction -> TREND_PREDICTION tag_sp variable np_check_size
Rule 128   dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param exp np_check_size
Rule 129   model_predict -> MODEL_PREDICT tag_sp variable np_check_size
Rule 130   exp -> t_exp release_exp exp_or
Rule 131   exp_or -> exp_keep_or exp
Rule 132   exp_or -> empty
Rule 133   exp_keep_or -> OR
Rule 134   t_exp -> expression release_exp t_exp_and
Rule 135   t_exp_and -> keep_and t_exp
Rule 136   t_exp_and -> empty
Rule 137   keep_and -> AND
Rule 138   expression -> m_exp release_exp expression_comp
Rule 139   expression_comp -> expression_comp_2 m_exp release_exp
Rule 140   expression_comp -> empty
Rule 141   expression_comp_2 -> GTHAN
Rule 142   expression_comp_2 -> EQUAL
Rule 143   expression_comp_2 -> NOTEQUAL
Rule 144   expression_comp_2 -> LTHAN
Rule 145   expression_comp_2 -> GORE
Rule 146   expression_comp_2 -> LORE
Rule 147   m_exp -> term release_exp m_exp_sr
Rule 148   m_exp_sr -> m_exp_sr_2 m_exp
Rule 149   m_exp_sr -> empty
Rule 150   m_exp_sr_2 -> PLUS
Rule 151   m_exp_sr_2 -> MINUS
Rule 152   term -> sub_factor release_exp term_pc
Rule 153   term_pc -> term_pc_2 term
Rule 154   term_pc -> empty
Rule 155   term_pc_2 -> MULTIPLY
Rule 156   term_pc_2 -> DIVIDE
Rule 157   term_pc_2 -> MODULE
Rule 158   sub_factor -> factor release_exp sub_factor_pc
Rule 159   sub_factor_pc -> sub_factor_pc_2 sub_factor
Rule 160   sub_factor_pc -> empty
Rule 161   sub_factor_pc_2 -> POWER empty
Rule 162   factor -> factor_exp
Rule 163   factor -> factor_cte
Rule 164   factor -> variable
Rule 165   factor -> call_function
Rule 166   factor_exp -> false_button exp release_false_button
Rule 167   false_button -> LPAREN
Rule 168   release_false_button -> RPAREN
Rule 169   factor_cte -> CTE_FLOAT
Rule 170   factor_cte -> CTE_INT
Rule 171   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 137
AS                   : 
ASSIGN               : 69
CHAR                 : 16 46
COLON                : 
COMMA                : 21 25 52 80 107 122
CTE_CHAR             : 171
CTE_FLOAT            : 169
CTE_INT              : 6 32 170
DATAFRAME            : 17
DATE                 : 
DIVIDE               : 156
DO                   : 89
DUMMI_REGRESSION     : 128
ELSE                 : 72
END                  : 3
EQUAL                : 142
EXPLORATION          : 121
FINANCIAL_STATE      : 125
FLOAT                : 15 45
FOR                  : 92
FROM                 : 
FUNCTION             : 42
GORE                 : 145
GTHAN                : 141
ID                   : 1 5 102
IF                   : 71
IMPORT               : 
INT                  : 14 44
LBRACKET             : 42 60 62
LORE                 : 146
LPAREN               : 42 71 77 84 89 92 103 120 167
LSQBRACKET           : 28 30 38 39
LTHAN                : 144
MAIN                 : 61
MINUS                : 151
MODEL_PREDICT        : 129
MODULE               : 157
MULTIPLY             : 155
NOTEQUAL             : 143
OR                   : 133
PLUS                 : 150
POWER                : 161
PRINT                : 77
PROGRAM              : 1
RBRACKET             : 49 60 62
READ                 : 84
RETURN               : 57
RPAREN               : 42 71 77 86 89 95 98 100 123 168
RSQBRACKET           : 28 30 41
SEASON_ANALYSIS      : 126
SEMICOLON            : 2 20 24 55 70 71 77 89 96 101
TO                   : 94
TREND_PREDICTION     : 127
VAR                  : 12
VOID                 : 47
WHILE                : 89
error                : 

Nonterminals, with rules where they appear

add_c_var            : 20 21
add_params           : 50 52
add_s_var            : 24 25
assign               : 109
body                 : 71 72 89 92
c_type               : 20
call_function        : 165
call_params          : 97 99
call_void_function   : 113
check_not_void       : 97
check_param          : 104 107
check_void           : 99
clear_dimension      : 33
condition            : 110
condition2           : 71
condition_GOTO       : 72
condition_GOTOF      : 71
cycle                : 112
dummi_regression     : 116
empty                : 5 7 8 9 13 19 22 23 26 27 29 31 32 34 37 40 43 48 51 53 54 58 59 64 69 70 73 74 75 76 81 82 83 90 91 102 105 108 132 136 140 149 154 160 161
empty_path_return    : 56
end                  : 1
end_assign           : 65
end_condition        : 71
end_function         : 42
end_print_np         : 77
exp                  : 36 39 55 66 71 78 85 89 92 106 125 125 128 131 166
exp_keep_or          : 131
exp_many             : 104 107
exp_or               : 130
exploration          : 114
explore_cte          : 121
expression           : 134
expression_comp      : 138
expression_comp_2    : 139
f_type               : 42
factor               : 158
factor_cte           : 163
factor_exp           : 162
false_button         : 166
financial_state      : 115
for                  : 87
for_control          : 92
for_end              : 92
for_np1              : 92
for_np2              : 92
func_creator         : 42
function_flag        : 97 99
function_saver       : 97 99
gotoV                : 89
goto_main            : 1
id_saver             : 20 21 24 25 35 42 50 52 93
index_arr_mat        : 36 39
inner_body           : 42 60 62 63
int_const_saver      : 95 124
keep_and             : 135
keep_assign          : 65 92
m_exp                : 138 139 148
m_exp_sr             : 147
m_exp_sr_2           : 148
main_id              : 60
model_predict        : 119
np_check_size        : 121 125 126 127 128 129
param                : 42
param2               : 50 52
print                : 111
print_many           : 77 80
print_many2          : 79
print_many_np        : 80
print_type           : 79
program              : 0
program_function     : 1 42
program_main         : 1
program_vars         : 1 42 60
read                 : 68
read_np              : 84
release_exp          : 130 134 138 139 147 152 158
release_false_button : 166
resources            : 42 61
return               : 42
return_np            : 55
return_quad          : 55
s_type               : 24 50 52
save_var             : 36
season_analysis      : 117
seed                 : 89
sp_param             : 124 125 125 125 128
special_function     : 67
specialf_assign      : 65
statement            : 63
sub_factor           : 152 159
sub_factor_pc        : 158
sub_factor_pc_2      : 159
t_exp                : 130 135
t_exp_and            : 134
tag_sp               : 121 125 126 127 128 129
term                 : 147 153
term_pc              : 152
term_pc_2            : 153
trend_prediction     : 118
valid_exp_read       : 84
var_c_type           : 10
var_c_type2          : 20 21
var_id_saver         : 33
var_multiple         : 20 24
var_s_array          : 24 25
var_s_dimesions      : 28 30
var_s_matrix         : 28
var_s_type           : 11
var_s_type2          : 24 25
var_type             : 12 18
variable             : 65 121 125 125 126 127 128 129 164
variable_array       : 33
variable_matrix      : 36
verify_params        : 99
while                : 88

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID goto_main program_vars program_function program_main end

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID goto_main program_vars program_function program_main end

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . goto_main program_vars program_function program_main end
    (2) goto_main -> . SEMICOLON

    SEMICOLON       shift and go to state 5

    goto_main                      shift and go to state 4

state 4

    (1) program -> PROGRAM ID goto_main . program_vars program_function program_main end
    (12) program_vars -> . VAR var_type
    (13) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 7
    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 6
    empty                          shift and go to state 8

state 5

    (2) goto_main -> SEMICOLON .

    VAR             reduce using rule 2 (goto_main -> SEMICOLON .)
    FUNCTION        reduce using rule 2 (goto_main -> SEMICOLON .)
    MAIN            reduce using rule 2 (goto_main -> SEMICOLON .)


state 6

    (1) program -> PROGRAM ID goto_main program_vars . program_function program_main end
    (42) program_function -> . FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function
    (43) program_function -> . empty
    (4) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 4 (empty -> .)

    program_function               shift and go to state 9
    empty                          shift and go to state 11

state 7

    (12) program_vars -> VAR . var_type
    (10) var_type -> . var_c_type
    (11) var_type -> . var_s_type
    (20) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (24) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (17) c_type -> . DATAFRAME
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    DATAFRAME       shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    var_type                       shift and go to state 12
    var_c_type                     shift and go to state 13
    var_s_type                     shift and go to state 14
    c_type                         shift and go to state 15
    s_type                         shift and go to state 16

state 8

    (13) program_vars -> empty .

    FUNCTION        reduce using rule 13 (program_vars -> empty .)
    MAIN            reduce using rule 13 (program_vars -> empty .)
    IF              reduce using rule 13 (program_vars -> empty .)
    PRINT           reduce using rule 13 (program_vars -> empty .)
    FOR             reduce using rule 13 (program_vars -> empty .)
    DO              reduce using rule 13 (program_vars -> empty .)
    ID              reduce using rule 13 (program_vars -> empty .)
    RBRACKET        reduce using rule 13 (program_vars -> empty .)
    RETURN          reduce using rule 13 (program_vars -> empty .)


state 9

    (1) program -> PROGRAM ID goto_main program_vars program_function . program_main end
    (60) program_main -> . main_id LBRACKET program_vars inner_body RBRACKET
    (61) main_id -> . MAIN resources

    MAIN            shift and go to state 23

    program_main                   shift and go to state 21
    main_id                        shift and go to state 22

state 10

    (42) program_function -> FUNCTION . resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function
    (9) resources -> . empty
    (4) empty -> .

    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    CHAR            reduce using rule 4 (empty -> .)
    VOID            reduce using rule 4 (empty -> .)

    resources                      shift and go to state 24
    empty                          shift and go to state 25

state 11

    (43) program_function -> empty .

    MAIN            reduce using rule 43 (program_function -> empty .)


state 12

    (12) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 12 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 12 (program_vars -> VAR var_type .)
    IF              reduce using rule 12 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 12 (program_vars -> VAR var_type .)
    FOR             reduce using rule 12 (program_vars -> VAR var_type .)
    DO              reduce using rule 12 (program_vars -> VAR var_type .)
    ID              reduce using rule 12 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 12 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 12 (program_vars -> VAR var_type .)


state 13

    (10) var_type -> var_c_type .

    FUNCTION        reduce using rule 10 (var_type -> var_c_type .)
    MAIN            reduce using rule 10 (var_type -> var_c_type .)
    IF              reduce using rule 10 (var_type -> var_c_type .)
    PRINT           reduce using rule 10 (var_type -> var_c_type .)
    FOR             reduce using rule 10 (var_type -> var_c_type .)
    DO              reduce using rule 10 (var_type -> var_c_type .)
    ID              reduce using rule 10 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 10 (var_type -> var_c_type .)
    RETURN          reduce using rule 10 (var_type -> var_c_type .)


state 14

    (11) var_type -> var_s_type .

    FUNCTION        reduce using rule 11 (var_type -> var_s_type .)
    MAIN            reduce using rule 11 (var_type -> var_s_type .)
    IF              reduce using rule 11 (var_type -> var_s_type .)
    PRINT           reduce using rule 11 (var_type -> var_s_type .)
    FOR             reduce using rule 11 (var_type -> var_s_type .)
    DO              reduce using rule 11 (var_type -> var_s_type .)
    ID              reduce using rule 11 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 11 (var_type -> var_s_type .)
    RETURN          reduce using rule 11 (var_type -> var_s_type .)


state 15

    (20) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    id_saver                       shift and go to state 26

state 16

    (24) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    id_saver                       shift and go to state 28

state 17

    (17) c_type -> DATAFRAME .

    ID              reduce using rule 17 (c_type -> DATAFRAME .)


state 18

    (14) s_type -> INT .

    ID              reduce using rule 14 (s_type -> INT .)


state 19

    (15) s_type -> FLOAT .

    ID              reduce using rule 15 (s_type -> FLOAT .)


state 20

    (16) s_type -> CHAR .

    ID              reduce using rule 16 (s_type -> CHAR .)


state 21

    (1) program -> PROGRAM ID goto_main program_vars program_function program_main . end
    (3) end -> . END

    END             shift and go to state 30

    end                            shift and go to state 29

state 22

    (60) program_main -> main_id . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 31


state 23

    (61) main_id -> MAIN . resources
    (9) resources -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    resources                      shift and go to state 32
    empty                          shift and go to state 25

state 24

    (42) program_function -> FUNCTION resources . f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function
    (44) f_type -> . INT
    (45) f_type -> . FLOAT
    (46) f_type -> . CHAR
    (47) f_type -> . VOID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    CHAR            shift and go to state 36
    VOID            shift and go to state 37

    f_type                         shift and go to state 33

state 25

    (9) resources -> empty .

    INT             reduce using rule 9 (resources -> empty .)
    FLOAT           reduce using rule 9 (resources -> empty .)
    CHAR            reduce using rule 9 (resources -> empty .)
    VOID            reduce using rule 9 (resources -> empty .)
    LBRACKET        reduce using rule 9 (resources -> empty .)


state 26

    (20) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (23) add_c_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_c_var                      shift and go to state 38
    empty                          shift and go to state 39

state 27

    (5) id_saver -> ID . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    LSQBRACKET      reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ASSIGN          reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 40

state 28

    (24) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (28) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (29) var_s_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 42
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_array                    shift and go to state 41
    empty                          shift and go to state 43

state 29

    (1) program -> PROGRAM ID goto_main program_vars program_function program_main end .

    $end            reduce using rule 1 (program -> PROGRAM ID goto_main program_vars program_function program_main end .)


state 30

    (3) end -> END .

    $end            reduce using rule 3 (end -> END .)


state 31

    (60) program_main -> main_id LBRACKET . program_vars inner_body RBRACKET
    (12) program_vars -> . VAR var_type
    (13) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 7
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 44
    empty                          shift and go to state 8

state 32

    (61) main_id -> MAIN resources .

    LBRACKET        reduce using rule 61 (main_id -> MAIN resources .)


state 33

    (42) program_function -> FUNCTION resources f_type . id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    id_saver                       shift and go to state 45

state 34

    (44) f_type -> INT .

    ID              reduce using rule 44 (f_type -> INT .)


state 35

    (45) f_type -> FLOAT .

    ID              reduce using rule 45 (f_type -> FLOAT .)


state 36

    (46) f_type -> CHAR .

    ID              reduce using rule 46 (f_type -> CHAR .)


state 37

    (47) f_type -> VOID .

    ID              reduce using rule 47 (f_type -> VOID .)


state 38

    (20) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (21) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (22) var_c_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 47
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_c_type2                    shift and go to state 46
    empty                          shift and go to state 48

state 39

    (23) add_c_var -> empty .

    COMMA           reduce using rule 23 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 23 (add_c_var -> empty .)


state 40

    (5) id_saver -> ID empty .

    COMMA           reduce using rule 5 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 5 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    LPAREN          reduce using rule 5 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 5 (id_saver -> ID empty .)
    RPAREN          reduce using rule 5 (id_saver -> ID empty .)


state 41

    (24) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (27) add_s_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_s_var                      shift and go to state 49
    empty                          shift and go to state 50

state 42

    (28) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (32) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 52

    var_s_dimesions                shift and go to state 51

state 43

    (29) var_s_array -> empty .

    COMMA           reduce using rule 29 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 29 (var_s_array -> empty .)


state 44

    (60) program_main -> main_id LBRACKET program_vars . inner_body RBRACKET
    (63) inner_body -> . statement inner_body
    (64) inner_body -> . empty
    (109) statement -> . assign
    (110) statement -> . condition
    (111) statement -> . print
    (112) statement -> . cycle
    (113) statement -> . call_void_function
    (4) empty -> .
    (65) assign -> . variable keep_assign specialf_assign end_assign
    (71) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (77) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (87) cycle -> . for
    (88) cycle -> . while
    (99) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (33) variable -> . var_id_saver variable_array clear_dimension
    (92) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (89) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (102) function_saver -> . ID empty
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    FOR             shift and go to state 68
    DO              shift and go to state 69
    ID              shift and go to state 70

    inner_body                     shift and go to state 53
    statement                      shift and go to state 54
    empty                          shift and go to state 55
    assign                         shift and go to state 56
    condition                      shift and go to state 57
    print                          shift and go to state 58
    cycle                          shift and go to state 59
    call_void_function             shift and go to state 60
    variable                       shift and go to state 61
    for                            shift and go to state 64
    while                          shift and go to state 65
    function_saver                 shift and go to state 66
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 45

    (42) program_function -> FUNCTION resources f_type id_saver . func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function
    (48) func_creator -> . empty
    (4) empty -> .

    LPAREN          reduce using rule 4 (empty -> .)

    func_creator                   shift and go to state 72
    empty                          shift and go to state 73

state 46

    (20) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 74


state 47

    (21) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    id_saver                       shift and go to state 75

state 48

    (22) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 22 (var_c_type2 -> empty .)


state 49

    (24) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (25) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (26) var_s_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 77
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_type2                    shift and go to state 76
    empty                          shift and go to state 78

state 50

    (27) add_s_var -> empty .

    COMMA           reduce using rule 27 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 27 (add_s_var -> empty .)


state 51

    (28) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 79


state 52

    (32) var_s_dimesions -> CTE_INT . empty
    (4) empty -> .

    RSQBRACKET      reduce using rule 4 (empty -> .)

    empty                          shift and go to state 80

state 53

    (60) program_main -> main_id LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 81


state 54

    (63) inner_body -> statement . inner_body
    (63) inner_body -> . statement inner_body
    (64) inner_body -> . empty
    (109) statement -> . assign
    (110) statement -> . condition
    (111) statement -> . print
    (112) statement -> . cycle
    (113) statement -> . call_void_function
    (4) empty -> .
    (65) assign -> . variable keep_assign specialf_assign end_assign
    (71) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (77) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (87) cycle -> . for
    (88) cycle -> . while
    (99) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (33) variable -> . var_id_saver variable_array clear_dimension
    (92) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (89) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (102) function_saver -> . ID empty
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    FOR             shift and go to state 68
    DO              shift and go to state 69
    ID              shift and go to state 70

    statement                      shift and go to state 54
    inner_body                     shift and go to state 82
    empty                          shift and go to state 55
    assign                         shift and go to state 56
    condition                      shift and go to state 57
    print                          shift and go to state 58
    cycle                          shift and go to state 59
    call_void_function             shift and go to state 60
    variable                       shift and go to state 61
    for                            shift and go to state 64
    while                          shift and go to state 65
    function_saver                 shift and go to state 66
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 55

    (64) inner_body -> empty .

    RBRACKET        reduce using rule 64 (inner_body -> empty .)
    RETURN          reduce using rule 64 (inner_body -> empty .)


state 56

    (109) statement -> assign .

    IF              reduce using rule 109 (statement -> assign .)
    PRINT           reduce using rule 109 (statement -> assign .)
    FOR             reduce using rule 109 (statement -> assign .)
    DO              reduce using rule 109 (statement -> assign .)
    ID              reduce using rule 109 (statement -> assign .)
    RBRACKET        reduce using rule 109 (statement -> assign .)
    RETURN          reduce using rule 109 (statement -> assign .)


state 57

    (110) statement -> condition .

    IF              reduce using rule 110 (statement -> condition .)
    PRINT           reduce using rule 110 (statement -> condition .)
    FOR             reduce using rule 110 (statement -> condition .)
    DO              reduce using rule 110 (statement -> condition .)
    ID              reduce using rule 110 (statement -> condition .)
    RBRACKET        reduce using rule 110 (statement -> condition .)
    RETURN          reduce using rule 110 (statement -> condition .)


state 58

    (111) statement -> print .

    IF              reduce using rule 111 (statement -> print .)
    PRINT           reduce using rule 111 (statement -> print .)
    FOR             reduce using rule 111 (statement -> print .)
    DO              reduce using rule 111 (statement -> print .)
    ID              reduce using rule 111 (statement -> print .)
    RBRACKET        reduce using rule 111 (statement -> print .)
    RETURN          reduce using rule 111 (statement -> print .)


state 59

    (112) statement -> cycle .

    IF              reduce using rule 112 (statement -> cycle .)
    PRINT           reduce using rule 112 (statement -> cycle .)
    FOR             reduce using rule 112 (statement -> cycle .)
    DO              reduce using rule 112 (statement -> cycle .)
    ID              reduce using rule 112 (statement -> cycle .)
    RBRACKET        reduce using rule 112 (statement -> cycle .)
    RETURN          reduce using rule 112 (statement -> cycle .)


state 60

    (113) statement -> call_void_function .

    IF              reduce using rule 113 (statement -> call_void_function .)
    PRINT           reduce using rule 113 (statement -> call_void_function .)
    FOR             reduce using rule 113 (statement -> call_void_function .)
    DO              reduce using rule 113 (statement -> call_void_function .)
    ID              reduce using rule 113 (statement -> call_void_function .)
    RBRACKET        reduce using rule 113 (statement -> call_void_function .)
    RETURN          reduce using rule 113 (statement -> call_void_function .)


state 61

    (65) assign -> variable . keep_assign specialf_assign end_assign
    (69) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 84

    keep_assign                    shift and go to state 83

state 62

    (71) condition -> IF . LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    LPAREN          shift and go to state 85


state 63

    (77) print -> PRINT . LPAREN print_many RPAREN SEMICOLON end_print_np

    LPAREN          shift and go to state 86


state 64

    (87) cycle -> for .

    IF              reduce using rule 87 (cycle -> for .)
    PRINT           reduce using rule 87 (cycle -> for .)
    FOR             reduce using rule 87 (cycle -> for .)
    DO              reduce using rule 87 (cycle -> for .)
    ID              reduce using rule 87 (cycle -> for .)
    RBRACKET        reduce using rule 87 (cycle -> for .)
    RETURN          reduce using rule 87 (cycle -> for .)


state 65

    (88) cycle -> while .

    IF              reduce using rule 88 (cycle -> while .)
    PRINT           reduce using rule 88 (cycle -> while .)
    FOR             reduce using rule 88 (cycle -> while .)
    DO              reduce using rule 88 (cycle -> while .)
    ID              reduce using rule 88 (cycle -> while .)
    RBRACKET        reduce using rule 88 (cycle -> while .)
    RETURN          reduce using rule 88 (cycle -> while .)


state 66

    (99) call_void_function -> function_saver . function_flag call_params verify_params check_void
    (103) function_flag -> . LPAREN

    LPAREN          shift and go to state 88

    function_flag                  shift and go to state 87

state 67

    (33) variable -> var_id_saver . variable_array clear_dimension
    (36) variable_array -> . save_var exp index_arr_mat variable_matrix
    (37) variable_array -> . empty
    (38) save_var -> . LSQBRACKET
    (4) empty -> .

    LSQBRACKET      shift and go to state 92
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    variable_array                 shift and go to state 89
    save_var                       shift and go to state 90
    empty                          shift and go to state 91

state 68

    (92) for -> FOR . LPAREN for_control keep_assign exp for_np1 for_end body for_np2

    LPAREN          shift and go to state 93


state 69

    (89) while -> DO . seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (90) seed -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    seed                           shift and go to state 94
    empty                          shift and go to state 95

state 70

    (102) function_saver -> ID . empty
    (5) id_saver -> ID . empty
    (4) empty -> .

    LPAREN          reduce using rule 4 (empty -> .)
    LSQBRACKET      reduce using rule 4 (empty -> .)
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 96

state 71

    (35) var_id_saver -> id_saver .

    LSQBRACKET      reduce using rule 35 (var_id_saver -> id_saver .)
    ASSIGN          reduce using rule 35 (var_id_saver -> id_saver .)
    POWER           reduce using rule 35 (var_id_saver -> id_saver .)
    MULTIPLY        reduce using rule 35 (var_id_saver -> id_saver .)
    DIVIDE          reduce using rule 35 (var_id_saver -> id_saver .)
    MODULE          reduce using rule 35 (var_id_saver -> id_saver .)
    PLUS            reduce using rule 35 (var_id_saver -> id_saver .)
    MINUS           reduce using rule 35 (var_id_saver -> id_saver .)
    GTHAN           reduce using rule 35 (var_id_saver -> id_saver .)
    EQUAL           reduce using rule 35 (var_id_saver -> id_saver .)
    NOTEQUAL        reduce using rule 35 (var_id_saver -> id_saver .)
    LTHAN           reduce using rule 35 (var_id_saver -> id_saver .)
    GORE            reduce using rule 35 (var_id_saver -> id_saver .)
    LORE            reduce using rule 35 (var_id_saver -> id_saver .)
    AND             reduce using rule 35 (var_id_saver -> id_saver .)
    OR              reduce using rule 35 (var_id_saver -> id_saver .)
    SEMICOLON       reduce using rule 35 (var_id_saver -> id_saver .)
    RPAREN          reduce using rule 35 (var_id_saver -> id_saver .)
    COMMA           reduce using rule 35 (var_id_saver -> id_saver .)
    RSQBRACKET      reduce using rule 35 (var_id_saver -> id_saver .)
    TO              reduce using rule 35 (var_id_saver -> id_saver .)


state 72

    (42) program_function -> FUNCTION resources f_type id_saver func_creator . LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function

    LPAREN          shift and go to state 97


state 73

    (48) func_creator -> empty .

    LPAREN          reduce using rule 48 (func_creator -> empty .)


state 74

    (20) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (18) var_multiple -> . var_type
    (19) var_multiple -> . empty
    (10) var_type -> . var_c_type
    (11) var_type -> . var_s_type
    (4) empty -> .
    (20) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (24) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (17) c_type -> . DATAFRAME
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    DATAFRAME       shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    c_type                         shift and go to state 15
    var_multiple                   shift and go to state 98
    var_type                       shift and go to state 99
    empty                          shift and go to state 100
    var_c_type                     shift and go to state 13
    var_s_type                     shift and go to state 14
    s_type                         shift and go to state 16

state 75

    (21) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (23) add_c_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_c_var                      shift and go to state 101
    empty                          shift and go to state 39

state 76

    (24) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 102


state 77

    (25) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    id_saver                       shift and go to state 103

state 78

    (26) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 26 (var_s_type2 -> empty .)


state 79

    (28) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (30) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (31) var_s_matrix -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 104
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_matrix                   shift and go to state 105
    empty                          shift and go to state 106

state 80

    (32) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 32 (var_s_dimesions -> CTE_INT empty .)


state 81

    (60) program_main -> main_id LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 60 (program_main -> main_id LBRACKET program_vars inner_body RBRACKET .)


state 82

    (63) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 63 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 63 (inner_body -> statement inner_body .)


state 83

    (65) assign -> variable keep_assign . specialf_assign end_assign
    (66) specialf_assign -> . exp
    (67) specialf_assign -> . special_function
    (68) specialf_assign -> . read
    (130) exp -> . t_exp release_exp exp_or
    (114) special_function -> . exploration
    (115) special_function -> . financial_state
    (116) special_function -> . dummi_regression
    (117) special_function -> . season_analysis
    (118) special_function -> . trend_prediction
    (119) special_function -> . model_predict
    (84) read -> . READ LPAREN valid_exp_read read_np
    (134) t_exp -> . expression release_exp t_exp_and
    (121) exploration -> . EXPLORATION tag_sp variable explore_cte np_check_size
    (125) financial_state -> . FINANCIAL_STATE tag_sp variable sp_param variable sp_param exp sp_param exp np_check_size
    (128) dummi_regression -> . DUMMI_REGRESSION tag_sp variable sp_param exp np_check_size
    (126) season_analysis -> . SEASON_ANALYSIS tag_sp variable np_check_size
    (127) trend_prediction -> . TREND_PREDICTION tag_sp variable np_check_size
    (129) model_predict -> . MODEL_PREDICT tag_sp variable np_check_size
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    READ            shift and go to state 119
    EXPLORATION     shift and go to state 122
    FINANCIAL_STATE shift and go to state 123
    DUMMI_REGRESSION shift and go to state 124
    SEASON_ANALYSIS shift and go to state 125
    TREND_PREDICTION shift and go to state 126
    MODEL_PREDICT   shift and go to state 127
    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    variable                       shift and go to state 107
    specialf_assign                shift and go to state 108
    exp                            shift and go to state 109
    special_function               shift and go to state 110
    read                           shift and go to state 111
    t_exp                          shift and go to state 112
    exploration                    shift and go to state 113
    financial_state                shift and go to state 114
    dummi_regression               shift and go to state 115
    season_analysis                shift and go to state 116
    trend_prediction               shift and go to state 117
    model_predict                  shift and go to state 118
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 84

    (69) keep_assign -> ASSIGN . empty
    (4) empty -> .

    READ            reduce using rule 4 (empty -> .)
    EXPLORATION     reduce using rule 4 (empty -> .)
    FINANCIAL_STATE reduce using rule 4 (empty -> .)
    DUMMI_REGRESSION reduce using rule 4 (empty -> .)
    SEASON_ANALYSIS reduce using rule 4 (empty -> .)
    TREND_PREDICTION reduce using rule 4 (empty -> .)
    MODEL_PREDICT   reduce using rule 4 (empty -> .)
    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 140

state 85

    (71) condition -> IF LPAREN . exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    exp                            shift and go to state 141
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 86

    (77) print -> PRINT LPAREN . print_many RPAREN SEMICOLON end_print_np
    (79) print_many -> . print_type print_many2
    (78) print_type -> . exp
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    print_many                     shift and go to state 142
    print_type                     shift and go to state 143
    exp                            shift and go to state 144
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 87

    (99) call_void_function -> function_saver function_flag . call_params verify_params check_void
    (104) call_params -> . check_param exp_many
    (105) call_params -> . empty
    (106) check_param -> . exp
    (4) empty -> .
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RPAREN          reduce using rule 4 (empty -> .)
    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    function_saver                 shift and go to state 139
    call_params                    shift and go to state 145
    check_param                    shift and go to state 146
    empty                          shift and go to state 147
    exp                            shift and go to state 148
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 88

    (103) function_flag -> LPAREN .

    CTE_FLOAT       reduce using rule 103 (function_flag -> LPAREN .)
    CTE_INT         reduce using rule 103 (function_flag -> LPAREN .)
    CTE_CHAR        reduce using rule 103 (function_flag -> LPAREN .)
    LPAREN          reduce using rule 103 (function_flag -> LPAREN .)
    ID              reduce using rule 103 (function_flag -> LPAREN .)
    RPAREN          reduce using rule 103 (function_flag -> LPAREN .)


state 89

    (33) variable -> var_id_saver variable_array . clear_dimension
    (34) clear_dimension -> . empty
    (4) empty -> .

    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    clear_dimension                shift and go to state 149
    empty                          shift and go to state 150

state 90

    (36) variable_array -> save_var . exp index_arr_mat variable_matrix
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    exp                            shift and go to state 151
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 91

    (37) variable_array -> empty .

    ASSIGN          reduce using rule 37 (variable_array -> empty .)
    POWER           reduce using rule 37 (variable_array -> empty .)
    MULTIPLY        reduce using rule 37 (variable_array -> empty .)
    DIVIDE          reduce using rule 37 (variable_array -> empty .)
    MODULE          reduce using rule 37 (variable_array -> empty .)
    PLUS            reduce using rule 37 (variable_array -> empty .)
    MINUS           reduce using rule 37 (variable_array -> empty .)
    GTHAN           reduce using rule 37 (variable_array -> empty .)
    EQUAL           reduce using rule 37 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 37 (variable_array -> empty .)
    LTHAN           reduce using rule 37 (variable_array -> empty .)
    GORE            reduce using rule 37 (variable_array -> empty .)
    LORE            reduce using rule 37 (variable_array -> empty .)
    AND             reduce using rule 37 (variable_array -> empty .)
    OR              reduce using rule 37 (variable_array -> empty .)
    SEMICOLON       reduce using rule 37 (variable_array -> empty .)
    RPAREN          reduce using rule 37 (variable_array -> empty .)
    COMMA           reduce using rule 37 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 37 (variable_array -> empty .)
    TO              reduce using rule 37 (variable_array -> empty .)


state 92

    (38) save_var -> LSQBRACKET .

    CTE_FLOAT       reduce using rule 38 (save_var -> LSQBRACKET .)
    CTE_INT         reduce using rule 38 (save_var -> LSQBRACKET .)
    CTE_CHAR        reduce using rule 38 (save_var -> LSQBRACKET .)
    LPAREN          reduce using rule 38 (save_var -> LSQBRACKET .)
    ID              reduce using rule 38 (save_var -> LSQBRACKET .)


state 93

    (92) for -> FOR LPAREN . for_control keep_assign exp for_np1 for_end body for_np2
    (93) for_control -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    for_control                    shift and go to state 152
    id_saver                       shift and go to state 153

state 94

    (89) while -> DO seed . body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (62) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 155

    body                           shift and go to state 154

state 95

    (90) seed -> empty .

    LBRACKET        reduce using rule 90 (seed -> empty .)


state 96

    (102) function_saver -> ID empty .
    (5) id_saver -> ID empty .

    LPAREN          reduce using rule 102 (function_saver -> ID empty .)
    LSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 5 (id_saver -> ID empty .)
    POWER           reduce using rule 5 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 5 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 5 (id_saver -> ID empty .)
    MODULE          reduce using rule 5 (id_saver -> ID empty .)
    PLUS            reduce using rule 5 (id_saver -> ID empty .)
    MINUS           reduce using rule 5 (id_saver -> ID empty .)
    GTHAN           reduce using rule 5 (id_saver -> ID empty .)
    EQUAL           reduce using rule 5 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 5 (id_saver -> ID empty .)
    LTHAN           reduce using rule 5 (id_saver -> ID empty .)
    GORE            reduce using rule 5 (id_saver -> ID empty .)
    LORE            reduce using rule 5 (id_saver -> ID empty .)
    AND             reduce using rule 5 (id_saver -> ID empty .)
    OR              reduce using rule 5 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 5 (id_saver -> ID empty .)
    RPAREN          reduce using rule 5 (id_saver -> ID empty .)
    COMMA           reduce using rule 5 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    TO              reduce using rule 5 (id_saver -> ID empty .)


state 97

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN . param RPAREN LBRACKET program_vars inner_body return end_function program_function
    (50) param -> . s_type id_saver add_params param2
    (51) param -> . empty
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR
    (4) empty -> .

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    RPAREN          reduce using rule 4 (empty -> .)

    param                          shift and go to state 156
    s_type                         shift and go to state 157
    empty                          shift and go to state 158

state 98

    (20) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 20 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 99

    (18) var_multiple -> var_type .

    FUNCTION        reduce using rule 18 (var_multiple -> var_type .)
    MAIN            reduce using rule 18 (var_multiple -> var_type .)
    IF              reduce using rule 18 (var_multiple -> var_type .)
    PRINT           reduce using rule 18 (var_multiple -> var_type .)
    FOR             reduce using rule 18 (var_multiple -> var_type .)
    DO              reduce using rule 18 (var_multiple -> var_type .)
    ID              reduce using rule 18 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 18 (var_multiple -> var_type .)
    RETURN          reduce using rule 18 (var_multiple -> var_type .)


state 100

    (19) var_multiple -> empty .

    FUNCTION        reduce using rule 19 (var_multiple -> empty .)
    MAIN            reduce using rule 19 (var_multiple -> empty .)
    IF              reduce using rule 19 (var_multiple -> empty .)
    PRINT           reduce using rule 19 (var_multiple -> empty .)
    FOR             reduce using rule 19 (var_multiple -> empty .)
    DO              reduce using rule 19 (var_multiple -> empty .)
    ID              reduce using rule 19 (var_multiple -> empty .)
    RBRACKET        reduce using rule 19 (var_multiple -> empty .)
    RETURN          reduce using rule 19 (var_multiple -> empty .)


state 101

    (21) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (21) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (22) var_c_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 47
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_c_type2                    shift and go to state 159
    empty                          shift and go to state 48

state 102

    (24) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (18) var_multiple -> . var_type
    (19) var_multiple -> . empty
    (10) var_type -> . var_c_type
    (11) var_type -> . var_s_type
    (4) empty -> .
    (20) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (24) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (17) c_type -> . DATAFRAME
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    DATAFRAME       shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    s_type                         shift and go to state 16
    var_multiple                   shift and go to state 160
    var_type                       shift and go to state 99
    empty                          shift and go to state 100
    var_c_type                     shift and go to state 13
    var_s_type                     shift and go to state 14
    c_type                         shift and go to state 15

state 103

    (25) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (28) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (29) var_s_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 42
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_array                    shift and go to state 161
    empty                          shift and go to state 43

state 104

    (30) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (32) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 52

    var_s_dimesions                shift and go to state 162

state 105

    (28) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 28 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 28 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 106

    (31) var_s_matrix -> empty .

    COMMA           reduce using rule 31 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 31 (var_s_matrix -> empty .)


state 107

    (164) factor -> variable .

    POWER           reduce using rule 164 (factor -> variable .)
    MULTIPLY        reduce using rule 164 (factor -> variable .)
    DIVIDE          reduce using rule 164 (factor -> variable .)
    MODULE          reduce using rule 164 (factor -> variable .)
    PLUS            reduce using rule 164 (factor -> variable .)
    MINUS           reduce using rule 164 (factor -> variable .)
    GTHAN           reduce using rule 164 (factor -> variable .)
    EQUAL           reduce using rule 164 (factor -> variable .)
    NOTEQUAL        reduce using rule 164 (factor -> variable .)
    LTHAN           reduce using rule 164 (factor -> variable .)
    GORE            reduce using rule 164 (factor -> variable .)
    LORE            reduce using rule 164 (factor -> variable .)
    AND             reduce using rule 164 (factor -> variable .)
    OR              reduce using rule 164 (factor -> variable .)
    SEMICOLON       reduce using rule 164 (factor -> variable .)
    RPAREN          reduce using rule 164 (factor -> variable .)
    COMMA           reduce using rule 164 (factor -> variable .)
    RSQBRACKET      reduce using rule 164 (factor -> variable .)
    TO              reduce using rule 164 (factor -> variable .)


state 108

    (65) assign -> variable keep_assign specialf_assign . end_assign
    (70) end_assign -> . SEMICOLON empty

    SEMICOLON       shift and go to state 164

    end_assign                     shift and go to state 163

state 109

    (66) specialf_assign -> exp .

    SEMICOLON       reduce using rule 66 (specialf_assign -> exp .)


state 110

    (67) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 67 (specialf_assign -> special_function .)


state 111

    (68) specialf_assign -> read .

    SEMICOLON       reduce using rule 68 (specialf_assign -> read .)


state 112

    (130) exp -> t_exp . release_exp exp_or
    (8) release_exp -> . empty
    (4) empty -> .

    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 165
    empty                          shift and go to state 166

state 113

    (114) special_function -> exploration .

    SEMICOLON       reduce using rule 114 (special_function -> exploration .)


state 114

    (115) special_function -> financial_state .

    SEMICOLON       reduce using rule 115 (special_function -> financial_state .)


state 115

    (116) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 116 (special_function -> dummi_regression .)


state 116

    (117) special_function -> season_analysis .

    SEMICOLON       reduce using rule 117 (special_function -> season_analysis .)


state 117

    (118) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 118 (special_function -> trend_prediction .)


state 118

    (119) special_function -> model_predict .

    SEMICOLON       reduce using rule 119 (special_function -> model_predict .)


state 119

    (84) read -> READ . LPAREN valid_exp_read read_np

    LPAREN          shift and go to state 167


state 120

    (167) false_button -> LPAREN .

    CTE_FLOAT       reduce using rule 167 (false_button -> LPAREN .)
    CTE_INT         reduce using rule 167 (false_button -> LPAREN .)
    CTE_CHAR        reduce using rule 167 (false_button -> LPAREN .)
    LPAREN          reduce using rule 167 (false_button -> LPAREN .)
    ID              reduce using rule 167 (false_button -> LPAREN .)


state 121

    (134) t_exp -> expression . release_exp t_exp_and
    (8) release_exp -> . empty
    (4) empty -> .

    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 168
    empty                          shift and go to state 166

state 122

    (121) exploration -> EXPLORATION . tag_sp variable explore_cte np_check_size
    (120) tag_sp -> . LPAREN

    LPAREN          shift and go to state 170

    tag_sp                         shift and go to state 169

state 123

    (125) financial_state -> FINANCIAL_STATE . tag_sp variable sp_param variable sp_param exp sp_param exp np_check_size
    (120) tag_sp -> . LPAREN

    LPAREN          shift and go to state 170

    tag_sp                         shift and go to state 171

state 124

    (128) dummi_regression -> DUMMI_REGRESSION . tag_sp variable sp_param exp np_check_size
    (120) tag_sp -> . LPAREN

    LPAREN          shift and go to state 170

    tag_sp                         shift and go to state 172

state 125

    (126) season_analysis -> SEASON_ANALYSIS . tag_sp variable np_check_size
    (120) tag_sp -> . LPAREN

    LPAREN          shift and go to state 170

    tag_sp                         shift and go to state 173

state 126

    (127) trend_prediction -> TREND_PREDICTION . tag_sp variable np_check_size
    (120) tag_sp -> . LPAREN

    LPAREN          shift and go to state 170

    tag_sp                         shift and go to state 174

state 127

    (129) model_predict -> MODEL_PREDICT . tag_sp variable np_check_size
    (120) tag_sp -> . LPAREN

    LPAREN          shift and go to state 170

    tag_sp                         shift and go to state 175

state 128

    (138) expression -> m_exp . release_exp expression_comp
    (8) release_exp -> . empty
    (4) empty -> .

    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 176
    empty                          shift and go to state 166

state 129

    (147) m_exp -> term . release_exp m_exp_sr
    (8) release_exp -> . empty
    (4) empty -> .

    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 177
    empty                          shift and go to state 166

state 130

    (152) term -> sub_factor . release_exp term_pc
    (8) release_exp -> . empty
    (4) empty -> .

    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 178
    empty                          shift and go to state 166

state 131

    (158) sub_factor -> factor . release_exp sub_factor_pc
    (8) release_exp -> . empty
    (4) empty -> .

    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 179
    empty                          shift and go to state 166

state 132

    (162) factor -> factor_exp .

    POWER           reduce using rule 162 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 162 (factor -> factor_exp .)
    DIVIDE          reduce using rule 162 (factor -> factor_exp .)
    MODULE          reduce using rule 162 (factor -> factor_exp .)
    PLUS            reduce using rule 162 (factor -> factor_exp .)
    MINUS           reduce using rule 162 (factor -> factor_exp .)
    GTHAN           reduce using rule 162 (factor -> factor_exp .)
    EQUAL           reduce using rule 162 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 162 (factor -> factor_exp .)
    LTHAN           reduce using rule 162 (factor -> factor_exp .)
    GORE            reduce using rule 162 (factor -> factor_exp .)
    LORE            reduce using rule 162 (factor -> factor_exp .)
    AND             reduce using rule 162 (factor -> factor_exp .)
    OR              reduce using rule 162 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 162 (factor -> factor_exp .)
    RPAREN          reduce using rule 162 (factor -> factor_exp .)
    COMMA           reduce using rule 162 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 162 (factor -> factor_exp .)
    TO              reduce using rule 162 (factor -> factor_exp .)


state 133

    (163) factor -> factor_cte .

    POWER           reduce using rule 163 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 163 (factor -> factor_cte .)
    DIVIDE          reduce using rule 163 (factor -> factor_cte .)
    MODULE          reduce using rule 163 (factor -> factor_cte .)
    PLUS            reduce using rule 163 (factor -> factor_cte .)
    MINUS           reduce using rule 163 (factor -> factor_cte .)
    GTHAN           reduce using rule 163 (factor -> factor_cte .)
    EQUAL           reduce using rule 163 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 163 (factor -> factor_cte .)
    LTHAN           reduce using rule 163 (factor -> factor_cte .)
    GORE            reduce using rule 163 (factor -> factor_cte .)
    LORE            reduce using rule 163 (factor -> factor_cte .)
    AND             reduce using rule 163 (factor -> factor_cte .)
    OR              reduce using rule 163 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 163 (factor -> factor_cte .)
    RPAREN          reduce using rule 163 (factor -> factor_cte .)
    COMMA           reduce using rule 163 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 163 (factor -> factor_cte .)
    TO              reduce using rule 163 (factor -> factor_cte .)


state 134

    (165) factor -> call_function .

    POWER           reduce using rule 165 (factor -> call_function .)
    MULTIPLY        reduce using rule 165 (factor -> call_function .)
    DIVIDE          reduce using rule 165 (factor -> call_function .)
    MODULE          reduce using rule 165 (factor -> call_function .)
    PLUS            reduce using rule 165 (factor -> call_function .)
    MINUS           reduce using rule 165 (factor -> call_function .)
    GTHAN           reduce using rule 165 (factor -> call_function .)
    EQUAL           reduce using rule 165 (factor -> call_function .)
    NOTEQUAL        reduce using rule 165 (factor -> call_function .)
    LTHAN           reduce using rule 165 (factor -> call_function .)
    GORE            reduce using rule 165 (factor -> call_function .)
    LORE            reduce using rule 165 (factor -> call_function .)
    AND             reduce using rule 165 (factor -> call_function .)
    OR              reduce using rule 165 (factor -> call_function .)
    SEMICOLON       reduce using rule 165 (factor -> call_function .)
    RPAREN          reduce using rule 165 (factor -> call_function .)
    COMMA           reduce using rule 165 (factor -> call_function .)
    RSQBRACKET      reduce using rule 165 (factor -> call_function .)
    TO              reduce using rule 165 (factor -> call_function .)


state 135

    (166) factor_exp -> false_button . exp release_false_button
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    false_button                   shift and go to state 135
    exp                            shift and go to state 180
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 136

    (169) factor_cte -> CTE_FLOAT .

    POWER           reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    MODULE          reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    GORE            reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    LORE            reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 169 (factor_cte -> CTE_FLOAT .)
    TO              reduce using rule 169 (factor_cte -> CTE_FLOAT .)


state 137

    (170) factor_cte -> CTE_INT .

    POWER           reduce using rule 170 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 170 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 170 (factor_cte -> CTE_INT .)
    MODULE          reduce using rule 170 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 170 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 170 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 170 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 170 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 170 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 170 (factor_cte -> CTE_INT .)
    GORE            reduce using rule 170 (factor_cte -> CTE_INT .)
    LORE            reduce using rule 170 (factor_cte -> CTE_INT .)
    AND             reduce using rule 170 (factor_cte -> CTE_INT .)
    OR              reduce using rule 170 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 170 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 170 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 170 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 170 (factor_cte -> CTE_INT .)
    TO              reduce using rule 170 (factor_cte -> CTE_INT .)


state 138

    (171) factor_cte -> CTE_CHAR .

    POWER           reduce using rule 171 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 171 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 171 (factor_cte -> CTE_CHAR .)
    MODULE          reduce using rule 171 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 171 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 171 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 171 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 171 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 171 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 171 (factor_cte -> CTE_CHAR .)
    GORE            reduce using rule 171 (factor_cte -> CTE_CHAR .)
    LORE            reduce using rule 171 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 171 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 171 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 171 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 171 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 171 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 171 (factor_cte -> CTE_CHAR .)
    TO              reduce using rule 171 (factor_cte -> CTE_CHAR .)


state 139

    (97) call_function -> function_saver . function_flag call_params check_not_void
    (103) function_flag -> . LPAREN

    LPAREN          shift and go to state 88

    function_flag                  shift and go to state 181

state 140

    (69) keep_assign -> ASSIGN empty .

    READ            reduce using rule 69 (keep_assign -> ASSIGN empty .)
    EXPLORATION     reduce using rule 69 (keep_assign -> ASSIGN empty .)
    FINANCIAL_STATE reduce using rule 69 (keep_assign -> ASSIGN empty .)
    DUMMI_REGRESSION reduce using rule 69 (keep_assign -> ASSIGN empty .)
    SEASON_ANALYSIS reduce using rule 69 (keep_assign -> ASSIGN empty .)
    TREND_PREDICTION reduce using rule 69 (keep_assign -> ASSIGN empty .)
    MODEL_PREDICT   reduce using rule 69 (keep_assign -> ASSIGN empty .)
    CTE_FLOAT       reduce using rule 69 (keep_assign -> ASSIGN empty .)
    CTE_INT         reduce using rule 69 (keep_assign -> ASSIGN empty .)
    CTE_CHAR        reduce using rule 69 (keep_assign -> ASSIGN empty .)
    LPAREN          reduce using rule 69 (keep_assign -> ASSIGN empty .)
    ID              reduce using rule 69 (keep_assign -> ASSIGN empty .)


state 141

    (71) condition -> IF LPAREN exp . RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    RPAREN          shift and go to state 182


state 142

    (77) print -> PRINT LPAREN print_many . RPAREN SEMICOLON end_print_np

    RPAREN          shift and go to state 183


state 143

    (79) print_many -> print_type . print_many2
    (80) print_many2 -> . COMMA print_many_np print_many
    (81) print_many2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 185
    RPAREN          reduce using rule 4 (empty -> .)

    print_many2                    shift and go to state 184
    empty                          shift and go to state 186

state 144

    (78) print_type -> exp .

    COMMA           reduce using rule 78 (print_type -> exp .)
    RPAREN          reduce using rule 78 (print_type -> exp .)


state 145

    (99) call_void_function -> function_saver function_flag call_params . verify_params check_void
    (100) verify_params -> . RPAREN

    RPAREN          shift and go to state 188

    verify_params                  shift and go to state 187

state 146

    (104) call_params -> check_param . exp_many
    (107) exp_many -> . COMMA check_param exp_many
    (108) exp_many -> . empty
    (4) empty -> .

    COMMA           shift and go to state 190
    RPAREN          reduce using rule 4 (empty -> .)

    exp_many                       shift and go to state 189
    empty                          shift and go to state 191

state 147

    (105) call_params -> empty .

    RPAREN          reduce using rule 105 (call_params -> empty .)


state 148

    (106) check_param -> exp .

    COMMA           reduce using rule 106 (check_param -> exp .)
    RPAREN          reduce using rule 106 (check_param -> exp .)


state 149

    (33) variable -> var_id_saver variable_array clear_dimension .

    ASSIGN          reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    POWER           reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    MULTIPLY        reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    DIVIDE          reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    MODULE          reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    PLUS            reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    MINUS           reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    GTHAN           reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    EQUAL           reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    NOTEQUAL        reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    LTHAN           reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    GORE            reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    LORE            reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    AND             reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    OR              reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    SEMICOLON       reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    RPAREN          reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    COMMA           reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    RSQBRACKET      reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)
    TO              reduce using rule 33 (variable -> var_id_saver variable_array clear_dimension .)


state 150

    (34) clear_dimension -> empty .

    ASSIGN          reduce using rule 34 (clear_dimension -> empty .)
    POWER           reduce using rule 34 (clear_dimension -> empty .)
    MULTIPLY        reduce using rule 34 (clear_dimension -> empty .)
    DIVIDE          reduce using rule 34 (clear_dimension -> empty .)
    MODULE          reduce using rule 34 (clear_dimension -> empty .)
    PLUS            reduce using rule 34 (clear_dimension -> empty .)
    MINUS           reduce using rule 34 (clear_dimension -> empty .)
    GTHAN           reduce using rule 34 (clear_dimension -> empty .)
    EQUAL           reduce using rule 34 (clear_dimension -> empty .)
    NOTEQUAL        reduce using rule 34 (clear_dimension -> empty .)
    LTHAN           reduce using rule 34 (clear_dimension -> empty .)
    GORE            reduce using rule 34 (clear_dimension -> empty .)
    LORE            reduce using rule 34 (clear_dimension -> empty .)
    AND             reduce using rule 34 (clear_dimension -> empty .)
    OR              reduce using rule 34 (clear_dimension -> empty .)
    SEMICOLON       reduce using rule 34 (clear_dimension -> empty .)
    RPAREN          reduce using rule 34 (clear_dimension -> empty .)
    COMMA           reduce using rule 34 (clear_dimension -> empty .)
    RSQBRACKET      reduce using rule 34 (clear_dimension -> empty .)
    TO              reduce using rule 34 (clear_dimension -> empty .)


state 151

    (36) variable_array -> save_var exp . index_arr_mat variable_matrix
    (41) index_arr_mat -> . RSQBRACKET

    RSQBRACKET      shift and go to state 193

    index_arr_mat                  shift and go to state 192

state 152

    (92) for -> FOR LPAREN for_control . keep_assign exp for_np1 for_end body for_np2
    (69) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 84

    keep_assign                    shift and go to state 194

state 153

    (93) for_control -> id_saver .

    ASSIGN          reduce using rule 93 (for_control -> id_saver .)


state 154

    (89) while -> DO seed body . WHILE LPAREN exp RPAREN SEMICOLON gotoV

    WHILE           shift and go to state 195


state 155

    (62) body -> LBRACKET . inner_body RBRACKET
    (63) inner_body -> . statement inner_body
    (64) inner_body -> . empty
    (109) statement -> . assign
    (110) statement -> . condition
    (111) statement -> . print
    (112) statement -> . cycle
    (113) statement -> . call_void_function
    (4) empty -> .
    (65) assign -> . variable keep_assign specialf_assign end_assign
    (71) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (77) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (87) cycle -> . for
    (88) cycle -> . while
    (99) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (33) variable -> . var_id_saver variable_array clear_dimension
    (92) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (89) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (102) function_saver -> . ID empty
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    FOR             shift and go to state 68
    DO              shift and go to state 69
    ID              shift and go to state 70

    inner_body                     shift and go to state 196
    statement                      shift and go to state 54
    empty                          shift and go to state 55
    assign                         shift and go to state 56
    condition                      shift and go to state 57
    print                          shift and go to state 58
    cycle                          shift and go to state 59
    call_void_function             shift and go to state 60
    variable                       shift and go to state 61
    for                            shift and go to state 64
    while                          shift and go to state 65
    function_saver                 shift and go to state 66
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 156

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param . RPAREN LBRACKET program_vars inner_body return end_function program_function

    RPAREN          shift and go to state 197


state 157

    (50) param -> s_type . id_saver add_params param2
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    id_saver                       shift and go to state 198

state 158

    (51) param -> empty .

    RPAREN          reduce using rule 51 (param -> empty .)


state 159

    (21) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 21 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 160

    (24) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 24 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 161

    (25) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (27) add_s_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_s_var                      shift and go to state 199
    empty                          shift and go to state 50

state 162

    (30) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 200


state 163

    (65) assign -> variable keep_assign specialf_assign end_assign .

    IF              reduce using rule 65 (assign -> variable keep_assign specialf_assign end_assign .)
    PRINT           reduce using rule 65 (assign -> variable keep_assign specialf_assign end_assign .)
    FOR             reduce using rule 65 (assign -> variable keep_assign specialf_assign end_assign .)
    DO              reduce using rule 65 (assign -> variable keep_assign specialf_assign end_assign .)
    ID              reduce using rule 65 (assign -> variable keep_assign specialf_assign end_assign .)
    RBRACKET        reduce using rule 65 (assign -> variable keep_assign specialf_assign end_assign .)
    RETURN          reduce using rule 65 (assign -> variable keep_assign specialf_assign end_assign .)


state 164

    (70) end_assign -> SEMICOLON . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 201

state 165

    (130) exp -> t_exp release_exp . exp_or
    (131) exp_or -> . exp_keep_or exp
    (132) exp_or -> . empty
    (133) exp_keep_or -> . OR
    (4) empty -> .

    OR              shift and go to state 205
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    exp_or                         shift and go to state 202
    exp_keep_or                    shift and go to state 203
    empty                          shift and go to state 204

state 166

    (8) release_exp -> empty .

    OR              reduce using rule 8 (release_exp -> empty .)
    SEMICOLON       reduce using rule 8 (release_exp -> empty .)
    RPAREN          reduce using rule 8 (release_exp -> empty .)
    COMMA           reduce using rule 8 (release_exp -> empty .)
    RSQBRACKET      reduce using rule 8 (release_exp -> empty .)
    TO              reduce using rule 8 (release_exp -> empty .)
    AND             reduce using rule 8 (release_exp -> empty .)
    GTHAN           reduce using rule 8 (release_exp -> empty .)
    EQUAL           reduce using rule 8 (release_exp -> empty .)
    NOTEQUAL        reduce using rule 8 (release_exp -> empty .)
    LTHAN           reduce using rule 8 (release_exp -> empty .)
    GORE            reduce using rule 8 (release_exp -> empty .)
    LORE            reduce using rule 8 (release_exp -> empty .)
    PLUS            reduce using rule 8 (release_exp -> empty .)
    MINUS           reduce using rule 8 (release_exp -> empty .)
    MULTIPLY        reduce using rule 8 (release_exp -> empty .)
    DIVIDE          reduce using rule 8 (release_exp -> empty .)
    MODULE          reduce using rule 8 (release_exp -> empty .)
    POWER           reduce using rule 8 (release_exp -> empty .)


state 167

    (84) read -> READ LPAREN . valid_exp_read read_np
    (85) valid_exp_read -> . exp
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    valid_exp_read                 shift and go to state 206
    exp                            shift and go to state 207
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 168

    (134) t_exp -> expression release_exp . t_exp_and
    (135) t_exp_and -> . keep_and t_exp
    (136) t_exp_and -> . empty
    (137) keep_and -> . AND
    (4) empty -> .

    AND             shift and go to state 211
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    t_exp_and                      shift and go to state 208
    keep_and                       shift and go to state 209
    empty                          shift and go to state 210

state 169

    (121) exploration -> EXPLORATION tag_sp . variable explore_cte np_check_size
    (33) variable -> . var_id_saver variable_array clear_dimension
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    variable                       shift and go to state 212
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 170

    (120) tag_sp -> LPAREN .

    ID              reduce using rule 120 (tag_sp -> LPAREN .)


state 171

    (125) financial_state -> FINANCIAL_STATE tag_sp . variable sp_param variable sp_param exp sp_param exp np_check_size
    (33) variable -> . var_id_saver variable_array clear_dimension
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    variable                       shift and go to state 213
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 172

    (128) dummi_regression -> DUMMI_REGRESSION tag_sp . variable sp_param exp np_check_size
    (33) variable -> . var_id_saver variable_array clear_dimension
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    variable                       shift and go to state 214
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 173

    (126) season_analysis -> SEASON_ANALYSIS tag_sp . variable np_check_size
    (33) variable -> . var_id_saver variable_array clear_dimension
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    variable                       shift and go to state 215
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 174

    (127) trend_prediction -> TREND_PREDICTION tag_sp . variable np_check_size
    (33) variable -> . var_id_saver variable_array clear_dimension
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    variable                       shift and go to state 216
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 175

    (129) model_predict -> MODEL_PREDICT tag_sp . variable np_check_size
    (33) variable -> . var_id_saver variable_array clear_dimension
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    variable                       shift and go to state 217
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 176

    (138) expression -> m_exp release_exp . expression_comp
    (139) expression_comp -> . expression_comp_2 m_exp release_exp
    (140) expression_comp -> . empty
    (141) expression_comp_2 -> . GTHAN
    (142) expression_comp_2 -> . EQUAL
    (143) expression_comp_2 -> . NOTEQUAL
    (144) expression_comp_2 -> . LTHAN
    (145) expression_comp_2 -> . GORE
    (146) expression_comp_2 -> . LORE
    (4) empty -> .

    GTHAN           shift and go to state 221
    EQUAL           shift and go to state 222
    NOTEQUAL        shift and go to state 223
    LTHAN           shift and go to state 224
    GORE            shift and go to state 225
    LORE            shift and go to state 226
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    expression_comp                shift and go to state 218
    expression_comp_2              shift and go to state 219
    empty                          shift and go to state 220

state 177

    (147) m_exp -> term release_exp . m_exp_sr
    (148) m_exp_sr -> . m_exp_sr_2 m_exp
    (149) m_exp_sr -> . empty
    (150) m_exp_sr_2 -> . PLUS
    (151) m_exp_sr_2 -> . MINUS
    (4) empty -> .

    PLUS            shift and go to state 230
    MINUS           shift and go to state 231
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    m_exp_sr                       shift and go to state 227
    m_exp_sr_2                     shift and go to state 228
    empty                          shift and go to state 229

state 178

    (152) term -> sub_factor release_exp . term_pc
    (153) term_pc -> . term_pc_2 term
    (154) term_pc -> . empty
    (155) term_pc_2 -> . MULTIPLY
    (156) term_pc_2 -> . DIVIDE
    (157) term_pc_2 -> . MODULE
    (4) empty -> .

    MULTIPLY        shift and go to state 235
    DIVIDE          shift and go to state 236
    MODULE          shift and go to state 237
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    term_pc                        shift and go to state 232
    term_pc_2                      shift and go to state 233
    empty                          shift and go to state 234

state 179

    (158) sub_factor -> factor release_exp . sub_factor_pc
    (159) sub_factor_pc -> . sub_factor_pc_2 sub_factor
    (160) sub_factor_pc -> . empty
    (161) sub_factor_pc_2 -> . POWER empty
    (4) empty -> .

    POWER           shift and go to state 241
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    sub_factor_pc                  shift and go to state 238
    sub_factor_pc_2                shift and go to state 239
    empty                          shift and go to state 240

state 180

    (166) factor_exp -> false_button exp . release_false_button
    (168) release_false_button -> . RPAREN

    RPAREN          shift and go to state 243

    release_false_button           shift and go to state 242

state 181

    (97) call_function -> function_saver function_flag . call_params check_not_void
    (104) call_params -> . check_param exp_many
    (105) call_params -> . empty
    (106) check_param -> . exp
    (4) empty -> .
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RPAREN          reduce using rule 4 (empty -> .)
    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    function_saver                 shift and go to state 139
    call_params                    shift and go to state 244
    check_param                    shift and go to state 146
    empty                          shift and go to state 147
    exp                            shift and go to state 148
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 182

    (71) condition -> IF LPAREN exp RPAREN . condition_GOTOF body condition2 SEMICOLON end_condition
    (74) condition_GOTOF -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    condition_GOTOF                shift and go to state 245
    empty                          shift and go to state 246

state 183

    (77) print -> PRINT LPAREN print_many RPAREN . SEMICOLON end_print_np

    SEMICOLON       shift and go to state 247


state 184

    (79) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 79 (print_many -> print_type print_many2 .)


state 185

    (80) print_many2 -> COMMA . print_many_np print_many
    (82) print_many_np -> . empty
    (4) empty -> .

    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    print_many_np                  shift and go to state 248
    empty                          shift and go to state 249

state 186

    (81) print_many2 -> empty .

    RPAREN          reduce using rule 81 (print_many2 -> empty .)


state 187

    (99) call_void_function -> function_saver function_flag call_params verify_params . check_void
    (101) check_void -> . SEMICOLON

    SEMICOLON       shift and go to state 251

    check_void                     shift and go to state 250

state 188

    (100) verify_params -> RPAREN .

    SEMICOLON       reduce using rule 100 (verify_params -> RPAREN .)


state 189

    (104) call_params -> check_param exp_many .

    RPAREN          reduce using rule 104 (call_params -> check_param exp_many .)


state 190

    (107) exp_many -> COMMA . check_param exp_many
    (106) check_param -> . exp
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    check_param                    shift and go to state 252
    exp                            shift and go to state 148
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 191

    (108) exp_many -> empty .

    RPAREN          reduce using rule 108 (exp_many -> empty .)


state 192

    (36) variable_array -> save_var exp index_arr_mat . variable_matrix
    (39) variable_matrix -> . LSQBRACKET exp index_arr_mat
    (40) variable_matrix -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 254
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    variable_matrix                shift and go to state 253
    empty                          shift and go to state 255

state 193

    (41) index_arr_mat -> RSQBRACKET .

    LSQBRACKET      reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    ASSIGN          reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    POWER           reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    MULTIPLY        reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    DIVIDE          reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    MODULE          reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    PLUS            reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    MINUS           reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    GTHAN           reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    EQUAL           reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    NOTEQUAL        reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    LTHAN           reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    GORE            reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    LORE            reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    AND             reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    OR              reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    SEMICOLON       reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    RPAREN          reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    COMMA           reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    RSQBRACKET      reduce using rule 41 (index_arr_mat -> RSQBRACKET .)
    TO              reduce using rule 41 (index_arr_mat -> RSQBRACKET .)


state 194

    (92) for -> FOR LPAREN for_control keep_assign . exp for_np1 for_end body for_np2
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    exp                            shift and go to state 256
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 195

    (89) while -> DO seed body WHILE . LPAREN exp RPAREN SEMICOLON gotoV

    LPAREN          shift and go to state 257


state 196

    (62) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 258


state 197

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN . LBRACKET program_vars inner_body return end_function program_function

    LBRACKET        shift and go to state 259


state 198

    (50) param -> s_type id_saver . add_params param2
    (54) add_params -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    add_params                     shift and go to state 260
    empty                          shift and go to state 261

state 199

    (25) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (25) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (26) var_s_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 77
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_type2                    shift and go to state 262
    empty                          shift and go to state 78

state 200

    (30) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 30 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 30 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 201

    (70) end_assign -> SEMICOLON empty .

    IF              reduce using rule 70 (end_assign -> SEMICOLON empty .)
    PRINT           reduce using rule 70 (end_assign -> SEMICOLON empty .)
    FOR             reduce using rule 70 (end_assign -> SEMICOLON empty .)
    DO              reduce using rule 70 (end_assign -> SEMICOLON empty .)
    ID              reduce using rule 70 (end_assign -> SEMICOLON empty .)
    RBRACKET        reduce using rule 70 (end_assign -> SEMICOLON empty .)
    RETURN          reduce using rule 70 (end_assign -> SEMICOLON empty .)


state 202

    (130) exp -> t_exp release_exp exp_or .

    SEMICOLON       reduce using rule 130 (exp -> t_exp release_exp exp_or .)
    RPAREN          reduce using rule 130 (exp -> t_exp release_exp exp_or .)
    COMMA           reduce using rule 130 (exp -> t_exp release_exp exp_or .)
    RSQBRACKET      reduce using rule 130 (exp -> t_exp release_exp exp_or .)
    TO              reduce using rule 130 (exp -> t_exp release_exp exp_or .)


state 203

    (131) exp_or -> exp_keep_or . exp
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    exp                            shift and go to state 263
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 204

    (132) exp_or -> empty .

    SEMICOLON       reduce using rule 132 (exp_or -> empty .)
    RPAREN          reduce using rule 132 (exp_or -> empty .)
    COMMA           reduce using rule 132 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 132 (exp_or -> empty .)
    TO              reduce using rule 132 (exp_or -> empty .)


state 205

    (133) exp_keep_or -> OR .

    CTE_FLOAT       reduce using rule 133 (exp_keep_or -> OR .)
    CTE_INT         reduce using rule 133 (exp_keep_or -> OR .)
    CTE_CHAR        reduce using rule 133 (exp_keep_or -> OR .)
    LPAREN          reduce using rule 133 (exp_keep_or -> OR .)
    ID              reduce using rule 133 (exp_keep_or -> OR .)


state 206

    (84) read -> READ LPAREN valid_exp_read . read_np
    (86) read_np -> . RPAREN

    RPAREN          shift and go to state 265

    read_np                        shift and go to state 264

state 207

    (85) valid_exp_read -> exp .

    RPAREN          reduce using rule 85 (valid_exp_read -> exp .)


state 208

    (134) t_exp -> expression release_exp t_exp_and .

    OR              reduce using rule 134 (t_exp -> expression release_exp t_exp_and .)
    SEMICOLON       reduce using rule 134 (t_exp -> expression release_exp t_exp_and .)
    RPAREN          reduce using rule 134 (t_exp -> expression release_exp t_exp_and .)
    COMMA           reduce using rule 134 (t_exp -> expression release_exp t_exp_and .)
    RSQBRACKET      reduce using rule 134 (t_exp -> expression release_exp t_exp_and .)
    TO              reduce using rule 134 (t_exp -> expression release_exp t_exp_and .)


state 209

    (135) t_exp_and -> keep_and . t_exp
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    t_exp                          shift and go to state 266
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 210

    (136) t_exp_and -> empty .

    OR              reduce using rule 136 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 136 (t_exp_and -> empty .)
    RPAREN          reduce using rule 136 (t_exp_and -> empty .)
    COMMA           reduce using rule 136 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 136 (t_exp_and -> empty .)
    TO              reduce using rule 136 (t_exp_and -> empty .)


state 211

    (137) keep_and -> AND .

    CTE_FLOAT       reduce using rule 137 (keep_and -> AND .)
    CTE_INT         reduce using rule 137 (keep_and -> AND .)
    CTE_CHAR        reduce using rule 137 (keep_and -> AND .)
    LPAREN          reduce using rule 137 (keep_and -> AND .)
    ID              reduce using rule 137 (keep_and -> AND .)


state 212

    (121) exploration -> EXPLORATION tag_sp variable . explore_cte np_check_size
    (124) explore_cte -> . sp_param int_const_saver
    (122) sp_param -> . COMMA

    COMMA           shift and go to state 269

    explore_cte                    shift and go to state 267
    sp_param                       shift and go to state 268

state 213

    (125) financial_state -> FINANCIAL_STATE tag_sp variable . sp_param variable sp_param exp sp_param exp np_check_size
    (122) sp_param -> . COMMA

    COMMA           shift and go to state 269

    sp_param                       shift and go to state 270

state 214

    (128) dummi_regression -> DUMMI_REGRESSION tag_sp variable . sp_param exp np_check_size
    (122) sp_param -> . COMMA

    COMMA           shift and go to state 269

    sp_param                       shift and go to state 271

state 215

    (126) season_analysis -> SEASON_ANALYSIS tag_sp variable . np_check_size
    (123) np_check_size -> . RPAREN

    RPAREN          shift and go to state 273

    np_check_size                  shift and go to state 272

state 216

    (127) trend_prediction -> TREND_PREDICTION tag_sp variable . np_check_size
    (123) np_check_size -> . RPAREN

    RPAREN          shift and go to state 273

    np_check_size                  shift and go to state 274

state 217

    (129) model_predict -> MODEL_PREDICT tag_sp variable . np_check_size
    (123) np_check_size -> . RPAREN

    RPAREN          shift and go to state 273

    np_check_size                  shift and go to state 275

state 218

    (138) expression -> m_exp release_exp expression_comp .

    AND             reduce using rule 138 (expression -> m_exp release_exp expression_comp .)
    OR              reduce using rule 138 (expression -> m_exp release_exp expression_comp .)
    SEMICOLON       reduce using rule 138 (expression -> m_exp release_exp expression_comp .)
    RPAREN          reduce using rule 138 (expression -> m_exp release_exp expression_comp .)
    COMMA           reduce using rule 138 (expression -> m_exp release_exp expression_comp .)
    RSQBRACKET      reduce using rule 138 (expression -> m_exp release_exp expression_comp .)
    TO              reduce using rule 138 (expression -> m_exp release_exp expression_comp .)


state 219

    (139) expression_comp -> expression_comp_2 . m_exp release_exp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    m_exp                          shift and go to state 276
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 220

    (140) expression_comp -> empty .

    AND             reduce using rule 140 (expression_comp -> empty .)
    OR              reduce using rule 140 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 140 (expression_comp -> empty .)
    RPAREN          reduce using rule 140 (expression_comp -> empty .)
    COMMA           reduce using rule 140 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 140 (expression_comp -> empty .)
    TO              reduce using rule 140 (expression_comp -> empty .)


state 221

    (141) expression_comp_2 -> GTHAN .

    CTE_FLOAT       reduce using rule 141 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 141 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 141 (expression_comp_2 -> GTHAN .)
    LPAREN          reduce using rule 141 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 141 (expression_comp_2 -> GTHAN .)


state 222

    (142) expression_comp_2 -> EQUAL .

    CTE_FLOAT       reduce using rule 142 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 142 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 142 (expression_comp_2 -> EQUAL .)
    LPAREN          reduce using rule 142 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 142 (expression_comp_2 -> EQUAL .)


state 223

    (143) expression_comp_2 -> NOTEQUAL .

    CTE_FLOAT       reduce using rule 143 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 143 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 143 (expression_comp_2 -> NOTEQUAL .)
    LPAREN          reduce using rule 143 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 143 (expression_comp_2 -> NOTEQUAL .)


state 224

    (144) expression_comp_2 -> LTHAN .

    CTE_FLOAT       reduce using rule 144 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 144 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 144 (expression_comp_2 -> LTHAN .)
    LPAREN          reduce using rule 144 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 144 (expression_comp_2 -> LTHAN .)


state 225

    (145) expression_comp_2 -> GORE .

    CTE_FLOAT       reduce using rule 145 (expression_comp_2 -> GORE .)
    CTE_INT         reduce using rule 145 (expression_comp_2 -> GORE .)
    CTE_CHAR        reduce using rule 145 (expression_comp_2 -> GORE .)
    LPAREN          reduce using rule 145 (expression_comp_2 -> GORE .)
    ID              reduce using rule 145 (expression_comp_2 -> GORE .)


state 226

    (146) expression_comp_2 -> LORE .

    CTE_FLOAT       reduce using rule 146 (expression_comp_2 -> LORE .)
    CTE_INT         reduce using rule 146 (expression_comp_2 -> LORE .)
    CTE_CHAR        reduce using rule 146 (expression_comp_2 -> LORE .)
    LPAREN          reduce using rule 146 (expression_comp_2 -> LORE .)
    ID              reduce using rule 146 (expression_comp_2 -> LORE .)


state 227

    (147) m_exp -> term release_exp m_exp_sr .

    GTHAN           reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    EQUAL           reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    NOTEQUAL        reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    LTHAN           reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    GORE            reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    LORE            reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    AND             reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    OR              reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    SEMICOLON       reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    RPAREN          reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    COMMA           reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    RSQBRACKET      reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)
    TO              reduce using rule 147 (m_exp -> term release_exp m_exp_sr .)


state 228

    (148) m_exp_sr -> m_exp_sr_2 . m_exp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    m_exp                          shift and go to state 277
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 229

    (149) m_exp_sr -> empty .

    GTHAN           reduce using rule 149 (m_exp_sr -> empty .)
    EQUAL           reduce using rule 149 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 149 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 149 (m_exp_sr -> empty .)
    GORE            reduce using rule 149 (m_exp_sr -> empty .)
    LORE            reduce using rule 149 (m_exp_sr -> empty .)
    AND             reduce using rule 149 (m_exp_sr -> empty .)
    OR              reduce using rule 149 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 149 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 149 (m_exp_sr -> empty .)
    COMMA           reduce using rule 149 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 149 (m_exp_sr -> empty .)
    TO              reduce using rule 149 (m_exp_sr -> empty .)


state 230

    (150) m_exp_sr_2 -> PLUS .

    CTE_FLOAT       reduce using rule 150 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 150 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 150 (m_exp_sr_2 -> PLUS .)
    LPAREN          reduce using rule 150 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 150 (m_exp_sr_2 -> PLUS .)


state 231

    (151) m_exp_sr_2 -> MINUS .

    CTE_FLOAT       reduce using rule 151 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 151 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 151 (m_exp_sr_2 -> MINUS .)
    LPAREN          reduce using rule 151 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 151 (m_exp_sr_2 -> MINUS .)


state 232

    (152) term -> sub_factor release_exp term_pc .

    PLUS            reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    MINUS           reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    GTHAN           reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    EQUAL           reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    NOTEQUAL        reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    LTHAN           reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    GORE            reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    LORE            reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    AND             reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    OR              reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    SEMICOLON       reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    RPAREN          reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    COMMA           reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    RSQBRACKET      reduce using rule 152 (term -> sub_factor release_exp term_pc .)
    TO              reduce using rule 152 (term -> sub_factor release_exp term_pc .)


state 233

    (153) term_pc -> term_pc_2 . term
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    term                           shift and go to state 278
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 234

    (154) term_pc -> empty .

    PLUS            reduce using rule 154 (term_pc -> empty .)
    MINUS           reduce using rule 154 (term_pc -> empty .)
    GTHAN           reduce using rule 154 (term_pc -> empty .)
    EQUAL           reduce using rule 154 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 154 (term_pc -> empty .)
    LTHAN           reduce using rule 154 (term_pc -> empty .)
    GORE            reduce using rule 154 (term_pc -> empty .)
    LORE            reduce using rule 154 (term_pc -> empty .)
    AND             reduce using rule 154 (term_pc -> empty .)
    OR              reduce using rule 154 (term_pc -> empty .)
    SEMICOLON       reduce using rule 154 (term_pc -> empty .)
    RPAREN          reduce using rule 154 (term_pc -> empty .)
    COMMA           reduce using rule 154 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 154 (term_pc -> empty .)
    TO              reduce using rule 154 (term_pc -> empty .)


state 235

    (155) term_pc_2 -> MULTIPLY .

    CTE_FLOAT       reduce using rule 155 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 155 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 155 (term_pc_2 -> MULTIPLY .)
    LPAREN          reduce using rule 155 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 155 (term_pc_2 -> MULTIPLY .)


state 236

    (156) term_pc_2 -> DIVIDE .

    CTE_FLOAT       reduce using rule 156 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 156 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 156 (term_pc_2 -> DIVIDE .)
    LPAREN          reduce using rule 156 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 156 (term_pc_2 -> DIVIDE .)


state 237

    (157) term_pc_2 -> MODULE .

    CTE_FLOAT       reduce using rule 157 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 157 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 157 (term_pc_2 -> MODULE .)
    LPAREN          reduce using rule 157 (term_pc_2 -> MODULE .)
    ID              reduce using rule 157 (term_pc_2 -> MODULE .)


state 238

    (158) sub_factor -> factor release_exp sub_factor_pc .

    MULTIPLY        reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    DIVIDE          reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    MODULE          reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    PLUS            reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    MINUS           reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    GTHAN           reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    EQUAL           reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    NOTEQUAL        reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    LTHAN           reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    GORE            reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    LORE            reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    AND             reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    OR              reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    SEMICOLON       reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    RPAREN          reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    COMMA           reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    RSQBRACKET      reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)
    TO              reduce using rule 158 (sub_factor -> factor release_exp sub_factor_pc .)


state 239

    (159) sub_factor_pc -> sub_factor_pc_2 . sub_factor
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    sub_factor                     shift and go to state 279
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 240

    (160) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 160 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 160 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 160 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 160 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 160 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 160 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 160 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 160 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 160 (sub_factor_pc -> empty .)
    GORE            reduce using rule 160 (sub_factor_pc -> empty .)
    LORE            reduce using rule 160 (sub_factor_pc -> empty .)
    AND             reduce using rule 160 (sub_factor_pc -> empty .)
    OR              reduce using rule 160 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 160 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 160 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 160 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 160 (sub_factor_pc -> empty .)
    TO              reduce using rule 160 (sub_factor_pc -> empty .)


state 241

    (161) sub_factor_pc_2 -> POWER . empty
    (4) empty -> .

    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 280

state 242

    (166) factor_exp -> false_button exp release_false_button .

    POWER           reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    MULTIPLY        reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    DIVIDE          reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    MODULE          reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    PLUS            reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    MINUS           reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    GTHAN           reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    EQUAL           reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    NOTEQUAL        reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    LTHAN           reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    GORE            reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    LORE            reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    AND             reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    OR              reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    SEMICOLON       reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    RPAREN          reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    COMMA           reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    RSQBRACKET      reduce using rule 166 (factor_exp -> false_button exp release_false_button .)
    TO              reduce using rule 166 (factor_exp -> false_button exp release_false_button .)


state 243

    (168) release_false_button -> RPAREN .

    POWER           reduce using rule 168 (release_false_button -> RPAREN .)
    MULTIPLY        reduce using rule 168 (release_false_button -> RPAREN .)
    DIVIDE          reduce using rule 168 (release_false_button -> RPAREN .)
    MODULE          reduce using rule 168 (release_false_button -> RPAREN .)
    PLUS            reduce using rule 168 (release_false_button -> RPAREN .)
    MINUS           reduce using rule 168 (release_false_button -> RPAREN .)
    GTHAN           reduce using rule 168 (release_false_button -> RPAREN .)
    EQUAL           reduce using rule 168 (release_false_button -> RPAREN .)
    NOTEQUAL        reduce using rule 168 (release_false_button -> RPAREN .)
    LTHAN           reduce using rule 168 (release_false_button -> RPAREN .)
    GORE            reduce using rule 168 (release_false_button -> RPAREN .)
    LORE            reduce using rule 168 (release_false_button -> RPAREN .)
    AND             reduce using rule 168 (release_false_button -> RPAREN .)
    OR              reduce using rule 168 (release_false_button -> RPAREN .)
    SEMICOLON       reduce using rule 168 (release_false_button -> RPAREN .)
    RPAREN          reduce using rule 168 (release_false_button -> RPAREN .)
    COMMA           reduce using rule 168 (release_false_button -> RPAREN .)
    RSQBRACKET      reduce using rule 168 (release_false_button -> RPAREN .)
    TO              reduce using rule 168 (release_false_button -> RPAREN .)


state 244

    (97) call_function -> function_saver function_flag call_params . check_not_void
    (98) check_not_void -> . RPAREN

    RPAREN          shift and go to state 282

    check_not_void                 shift and go to state 281

state 245

    (71) condition -> IF LPAREN exp RPAREN condition_GOTOF . body condition2 SEMICOLON end_condition
    (62) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 155

    body                           shift and go to state 283

state 246

    (74) condition_GOTOF -> empty .

    LBRACKET        reduce using rule 74 (condition_GOTOF -> empty .)


state 247

    (77) print -> PRINT LPAREN print_many RPAREN SEMICOLON . end_print_np
    (83) end_print_np -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    end_print_np                   shift and go to state 284
    empty                          shift and go to state 285

state 248

    (80) print_many2 -> COMMA print_many_np . print_many
    (79) print_many -> . print_type print_many2
    (78) print_type -> . exp
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    print_many                     shift and go to state 286
    print_type                     shift and go to state 143
    exp                            shift and go to state 144
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 249

    (82) print_many_np -> empty .

    CTE_FLOAT       reduce using rule 82 (print_many_np -> empty .)
    CTE_INT         reduce using rule 82 (print_many_np -> empty .)
    CTE_CHAR        reduce using rule 82 (print_many_np -> empty .)
    LPAREN          reduce using rule 82 (print_many_np -> empty .)
    ID              reduce using rule 82 (print_many_np -> empty .)


state 250

    (99) call_void_function -> function_saver function_flag call_params verify_params check_void .

    IF              reduce using rule 99 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    PRINT           reduce using rule 99 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    FOR             reduce using rule 99 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    DO              reduce using rule 99 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    ID              reduce using rule 99 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    RBRACKET        reduce using rule 99 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    RETURN          reduce using rule 99 (call_void_function -> function_saver function_flag call_params verify_params check_void .)


state 251

    (101) check_void -> SEMICOLON .

    IF              reduce using rule 101 (check_void -> SEMICOLON .)
    PRINT           reduce using rule 101 (check_void -> SEMICOLON .)
    FOR             reduce using rule 101 (check_void -> SEMICOLON .)
    DO              reduce using rule 101 (check_void -> SEMICOLON .)
    ID              reduce using rule 101 (check_void -> SEMICOLON .)
    RBRACKET        reduce using rule 101 (check_void -> SEMICOLON .)
    RETURN          reduce using rule 101 (check_void -> SEMICOLON .)


state 252

    (107) exp_many -> COMMA check_param . exp_many
    (107) exp_many -> . COMMA check_param exp_many
    (108) exp_many -> . empty
    (4) empty -> .

    COMMA           shift and go to state 190
    RPAREN          reduce using rule 4 (empty -> .)

    exp_many                       shift and go to state 287
    empty                          shift and go to state 191

state 253

    (36) variable_array -> save_var exp index_arr_mat variable_matrix .

    ASSIGN          reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    POWER           reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    MULTIPLY        reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    DIVIDE          reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    MODULE          reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    PLUS            reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    MINUS           reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    GTHAN           reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    EQUAL           reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    NOTEQUAL        reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    LTHAN           reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    GORE            reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    LORE            reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    AND             reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    OR              reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    SEMICOLON       reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    RPAREN          reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    COMMA           reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    RSQBRACKET      reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)
    TO              reduce using rule 36 (variable_array -> save_var exp index_arr_mat variable_matrix .)


state 254

    (39) variable_matrix -> LSQBRACKET . exp index_arr_mat
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    exp                            shift and go to state 288
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 255

    (40) variable_matrix -> empty .

    ASSIGN          reduce using rule 40 (variable_matrix -> empty .)
    POWER           reduce using rule 40 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 40 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 40 (variable_matrix -> empty .)
    MODULE          reduce using rule 40 (variable_matrix -> empty .)
    PLUS            reduce using rule 40 (variable_matrix -> empty .)
    MINUS           reduce using rule 40 (variable_matrix -> empty .)
    GTHAN           reduce using rule 40 (variable_matrix -> empty .)
    EQUAL           reduce using rule 40 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 40 (variable_matrix -> empty .)
    LTHAN           reduce using rule 40 (variable_matrix -> empty .)
    GORE            reduce using rule 40 (variable_matrix -> empty .)
    LORE            reduce using rule 40 (variable_matrix -> empty .)
    AND             reduce using rule 40 (variable_matrix -> empty .)
    OR              reduce using rule 40 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 40 (variable_matrix -> empty .)
    RPAREN          reduce using rule 40 (variable_matrix -> empty .)
    COMMA           reduce using rule 40 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 40 (variable_matrix -> empty .)
    TO              reduce using rule 40 (variable_matrix -> empty .)


state 256

    (92) for -> FOR LPAREN for_control keep_assign exp . for_np1 for_end body for_np2
    (94) for_np1 -> . TO

    TO              shift and go to state 290

    for_np1                        shift and go to state 289

state 257

    (89) while -> DO seed body WHILE LPAREN . exp RPAREN SEMICOLON gotoV
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    exp                            shift and go to state 291
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 258

    (62) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 62 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 62 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 62 (body -> LBRACKET inner_body RBRACKET .)


state 259

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET . program_vars inner_body return end_function program_function
    (12) program_vars -> . VAR var_type
    (13) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 7
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 292
    empty                          shift and go to state 8

state 260

    (50) param -> s_type id_saver add_params . param2
    (52) param2 -> . COMMA s_type id_saver add_params param2
    (53) param2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 294
    RPAREN          reduce using rule 4 (empty -> .)

    param2                         shift and go to state 293
    empty                          shift and go to state 295

state 261

    (54) add_params -> empty .

    COMMA           reduce using rule 54 (add_params -> empty .)
    RPAREN          reduce using rule 54 (add_params -> empty .)


state 262

    (25) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 25 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 263

    (131) exp_or -> exp_keep_or exp .

    SEMICOLON       reduce using rule 131 (exp_or -> exp_keep_or exp .)
    RPAREN          reduce using rule 131 (exp_or -> exp_keep_or exp .)
    COMMA           reduce using rule 131 (exp_or -> exp_keep_or exp .)
    RSQBRACKET      reduce using rule 131 (exp_or -> exp_keep_or exp .)
    TO              reduce using rule 131 (exp_or -> exp_keep_or exp .)


state 264

    (84) read -> READ LPAREN valid_exp_read read_np .

    SEMICOLON       reduce using rule 84 (read -> READ LPAREN valid_exp_read read_np .)


state 265

    (86) read_np -> RPAREN .

    SEMICOLON       reduce using rule 86 (read_np -> RPAREN .)


state 266

    (135) t_exp_and -> keep_and t_exp .

    OR              reduce using rule 135 (t_exp_and -> keep_and t_exp .)
    SEMICOLON       reduce using rule 135 (t_exp_and -> keep_and t_exp .)
    RPAREN          reduce using rule 135 (t_exp_and -> keep_and t_exp .)
    COMMA           reduce using rule 135 (t_exp_and -> keep_and t_exp .)
    RSQBRACKET      reduce using rule 135 (t_exp_and -> keep_and t_exp .)
    TO              reduce using rule 135 (t_exp_and -> keep_and t_exp .)


state 267

    (121) exploration -> EXPLORATION tag_sp variable explore_cte . np_check_size
    (123) np_check_size -> . RPAREN

    RPAREN          shift and go to state 273

    np_check_size                  shift and go to state 296

state 268

    (124) explore_cte -> sp_param . int_const_saver
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 298
    RPAREN          reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 297
    empty                          shift and go to state 299

state 269

    (122) sp_param -> COMMA .

    CTE_INT         reduce using rule 122 (sp_param -> COMMA .)
    RPAREN          reduce using rule 122 (sp_param -> COMMA .)
    ID              reduce using rule 122 (sp_param -> COMMA .)
    CTE_FLOAT       reduce using rule 122 (sp_param -> COMMA .)
    CTE_CHAR        reduce using rule 122 (sp_param -> COMMA .)
    LPAREN          reduce using rule 122 (sp_param -> COMMA .)


state 270

    (125) financial_state -> FINANCIAL_STATE tag_sp variable sp_param . variable sp_param exp sp_param exp np_check_size
    (33) variable -> . var_id_saver variable_array clear_dimension
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    variable                       shift and go to state 300
    var_id_saver                   shift and go to state 67
    id_saver                       shift and go to state 71

state 271

    (128) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param . exp np_check_size
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    variable                       shift and go to state 107
    exp                            shift and go to state 301
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 272

    (126) season_analysis -> SEASON_ANALYSIS tag_sp variable np_check_size .

    SEMICOLON       reduce using rule 126 (season_analysis -> SEASON_ANALYSIS tag_sp variable np_check_size .)


state 273

    (123) np_check_size -> RPAREN .

    SEMICOLON       reduce using rule 123 (np_check_size -> RPAREN .)


state 274

    (127) trend_prediction -> TREND_PREDICTION tag_sp variable np_check_size .

    SEMICOLON       reduce using rule 127 (trend_prediction -> TREND_PREDICTION tag_sp variable np_check_size .)


state 275

    (129) model_predict -> MODEL_PREDICT tag_sp variable np_check_size .

    SEMICOLON       reduce using rule 129 (model_predict -> MODEL_PREDICT tag_sp variable np_check_size .)


state 276

    (139) expression_comp -> expression_comp_2 m_exp . release_exp
    (8) release_exp -> . empty
    (4) empty -> .

    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 302
    empty                          shift and go to state 166

state 277

    (148) m_exp_sr -> m_exp_sr_2 m_exp .

    GTHAN           reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    EQUAL           reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GORE            reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LORE            reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)
    TO              reduce using rule 148 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 278

    (153) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 153 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 153 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 153 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 153 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 153 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 153 (term_pc -> term_pc_2 term .)
    GORE            reduce using rule 153 (term_pc -> term_pc_2 term .)
    LORE            reduce using rule 153 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 153 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 153 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 153 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 153 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 153 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 153 (term_pc -> term_pc_2 term .)
    TO              reduce using rule 153 (term_pc -> term_pc_2 term .)


state 279

    (159) sub_factor_pc -> sub_factor_pc_2 sub_factor .

    MULTIPLY        reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    DIVIDE          reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MODULE          reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    PLUS            reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MINUS           reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GTHAN           reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    EQUAL           reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    NOTEQUAL        reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LTHAN           reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GORE            reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LORE            reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    AND             reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    OR              reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    SEMICOLON       reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RPAREN          reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    COMMA           reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RSQBRACKET      reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    TO              reduce using rule 159 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)


state 280

    (161) sub_factor_pc_2 -> POWER empty .

    CTE_FLOAT       reduce using rule 161 (sub_factor_pc_2 -> POWER empty .)
    CTE_INT         reduce using rule 161 (sub_factor_pc_2 -> POWER empty .)
    CTE_CHAR        reduce using rule 161 (sub_factor_pc_2 -> POWER empty .)
    LPAREN          reduce using rule 161 (sub_factor_pc_2 -> POWER empty .)
    ID              reduce using rule 161 (sub_factor_pc_2 -> POWER empty .)


state 281

    (97) call_function -> function_saver function_flag call_params check_not_void .

    POWER           reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    MULTIPLY        reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    DIVIDE          reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    MODULE          reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    PLUS            reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    MINUS           reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    GTHAN           reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    EQUAL           reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    NOTEQUAL        reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    LTHAN           reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    GORE            reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    LORE            reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    AND             reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    OR              reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    SEMICOLON       reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    RPAREN          reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    COMMA           reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    RSQBRACKET      reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)
    TO              reduce using rule 97 (call_function -> function_saver function_flag call_params check_not_void .)


state 282

    (98) check_not_void -> RPAREN .

    POWER           reduce using rule 98 (check_not_void -> RPAREN .)
    MULTIPLY        reduce using rule 98 (check_not_void -> RPAREN .)
    DIVIDE          reduce using rule 98 (check_not_void -> RPAREN .)
    MODULE          reduce using rule 98 (check_not_void -> RPAREN .)
    PLUS            reduce using rule 98 (check_not_void -> RPAREN .)
    MINUS           reduce using rule 98 (check_not_void -> RPAREN .)
    GTHAN           reduce using rule 98 (check_not_void -> RPAREN .)
    EQUAL           reduce using rule 98 (check_not_void -> RPAREN .)
    NOTEQUAL        reduce using rule 98 (check_not_void -> RPAREN .)
    LTHAN           reduce using rule 98 (check_not_void -> RPAREN .)
    GORE            reduce using rule 98 (check_not_void -> RPAREN .)
    LORE            reduce using rule 98 (check_not_void -> RPAREN .)
    AND             reduce using rule 98 (check_not_void -> RPAREN .)
    OR              reduce using rule 98 (check_not_void -> RPAREN .)
    SEMICOLON       reduce using rule 98 (check_not_void -> RPAREN .)
    RPAREN          reduce using rule 98 (check_not_void -> RPAREN .)
    COMMA           reduce using rule 98 (check_not_void -> RPAREN .)
    RSQBRACKET      reduce using rule 98 (check_not_void -> RPAREN .)
    TO              reduce using rule 98 (check_not_void -> RPAREN .)


state 283

    (71) condition -> IF LPAREN exp RPAREN condition_GOTOF body . condition2 SEMICOLON end_condition
    (72) condition2 -> . ELSE condition_GOTO body
    (73) condition2 -> . empty
    (4) empty -> .

    ELSE            shift and go to state 304
    SEMICOLON       reduce using rule 4 (empty -> .)

    condition2                     shift and go to state 303
    empty                          shift and go to state 305

state 284

    (77) print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .

    IF              reduce using rule 77 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    PRINT           reduce using rule 77 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    FOR             reduce using rule 77 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    DO              reduce using rule 77 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    ID              reduce using rule 77 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RBRACKET        reduce using rule 77 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RETURN          reduce using rule 77 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)


state 285

    (83) end_print_np -> empty .

    IF              reduce using rule 83 (end_print_np -> empty .)
    PRINT           reduce using rule 83 (end_print_np -> empty .)
    FOR             reduce using rule 83 (end_print_np -> empty .)
    DO              reduce using rule 83 (end_print_np -> empty .)
    ID              reduce using rule 83 (end_print_np -> empty .)
    RBRACKET        reduce using rule 83 (end_print_np -> empty .)
    RETURN          reduce using rule 83 (end_print_np -> empty .)


state 286

    (80) print_many2 -> COMMA print_many_np print_many .

    RPAREN          reduce using rule 80 (print_many2 -> COMMA print_many_np print_many .)


state 287

    (107) exp_many -> COMMA check_param exp_many .

    RPAREN          reduce using rule 107 (exp_many -> COMMA check_param exp_many .)


state 288

    (39) variable_matrix -> LSQBRACKET exp . index_arr_mat
    (41) index_arr_mat -> . RSQBRACKET

    RSQBRACKET      shift and go to state 193

    index_arr_mat                  shift and go to state 306

state 289

    (92) for -> FOR LPAREN for_control keep_assign exp for_np1 . for_end body for_np2
    (95) for_end -> . int_const_saver RPAREN
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 298
    RPAREN          reduce using rule 4 (empty -> .)

    for_end                        shift and go to state 307
    int_const_saver                shift and go to state 308
    empty                          shift and go to state 299

state 290

    (94) for_np1 -> TO .

    CTE_INT         reduce using rule 94 (for_np1 -> TO .)
    RPAREN          reduce using rule 94 (for_np1 -> TO .)


state 291

    (89) while -> DO seed body WHILE LPAREN exp . RPAREN SEMICOLON gotoV

    RPAREN          shift and go to state 309


state 292

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars . inner_body return end_function program_function
    (63) inner_body -> . statement inner_body
    (64) inner_body -> . empty
    (109) statement -> . assign
    (110) statement -> . condition
    (111) statement -> . print
    (112) statement -> . cycle
    (113) statement -> . call_void_function
    (4) empty -> .
    (65) assign -> . variable keep_assign specialf_assign end_assign
    (71) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (77) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (87) cycle -> . for
    (88) cycle -> . while
    (99) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (33) variable -> . var_id_saver variable_array clear_dimension
    (92) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (89) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (102) function_saver -> . ID empty
    (35) var_id_saver -> . id_saver
    (5) id_saver -> . ID empty

    RETURN          reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 62
    PRINT           shift and go to state 63
    FOR             shift and go to state 68
    DO              shift and go to state 69
    ID              shift and go to state 70

    id_saver                       shift and go to state 71
    inner_body                     shift and go to state 310
    statement                      shift and go to state 54
    empty                          shift and go to state 55
    assign                         shift and go to state 56
    condition                      shift and go to state 57
    print                          shift and go to state 58
    cycle                          shift and go to state 59
    call_void_function             shift and go to state 60
    variable                       shift and go to state 61
    for                            shift and go to state 64
    while                          shift and go to state 65
    function_saver                 shift and go to state 66
    var_id_saver                   shift and go to state 67

state 293

    (50) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 50 (param -> s_type id_saver add_params param2 .)


state 294

    (52) param2 -> COMMA . s_type id_saver add_params param2
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    s_type                         shift and go to state 311

state 295

    (53) param2 -> empty .

    RPAREN          reduce using rule 53 (param2 -> empty .)


state 296

    (121) exploration -> EXPLORATION tag_sp variable explore_cte np_check_size .

    SEMICOLON       reduce using rule 121 (exploration -> EXPLORATION tag_sp variable explore_cte np_check_size .)


state 297

    (124) explore_cte -> sp_param int_const_saver .

    RPAREN          reduce using rule 124 (explore_cte -> sp_param int_const_saver .)


state 298

    (6) int_const_saver -> CTE_INT .

    RPAREN          reduce using rule 6 (int_const_saver -> CTE_INT .)


state 299

    (7) int_const_saver -> empty .

    RPAREN          reduce using rule 7 (int_const_saver -> empty .)


state 300

    (125) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable . sp_param exp sp_param exp np_check_size
    (122) sp_param -> . COMMA

    COMMA           shift and go to state 269

    sp_param                       shift and go to state 312

state 301

    (128) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param exp . np_check_size
    (123) np_check_size -> . RPAREN

    RPAREN          shift and go to state 273

    np_check_size                  shift and go to state 313

state 302

    (139) expression_comp -> expression_comp_2 m_exp release_exp .

    AND             reduce using rule 139 (expression_comp -> expression_comp_2 m_exp release_exp .)
    OR              reduce using rule 139 (expression_comp -> expression_comp_2 m_exp release_exp .)
    SEMICOLON       reduce using rule 139 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RPAREN          reduce using rule 139 (expression_comp -> expression_comp_2 m_exp release_exp .)
    COMMA           reduce using rule 139 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RSQBRACKET      reduce using rule 139 (expression_comp -> expression_comp_2 m_exp release_exp .)
    TO              reduce using rule 139 (expression_comp -> expression_comp_2 m_exp release_exp .)


state 303

    (71) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 . SEMICOLON end_condition

    SEMICOLON       shift and go to state 314


state 304

    (72) condition2 -> ELSE . condition_GOTO body
    (75) condition_GOTO -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    condition_GOTO                 shift and go to state 315
    empty                          shift and go to state 316

state 305

    (73) condition2 -> empty .

    SEMICOLON       reduce using rule 73 (condition2 -> empty .)


state 306

    (39) variable_matrix -> LSQBRACKET exp index_arr_mat .

    ASSIGN          reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    POWER           reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    MULTIPLY        reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    DIVIDE          reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    MODULE          reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    PLUS            reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    MINUS           reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    GTHAN           reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    EQUAL           reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    NOTEQUAL        reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    LTHAN           reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    GORE            reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    LORE            reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    AND             reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    OR              reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    SEMICOLON       reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    RPAREN          reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    COMMA           reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    RSQBRACKET      reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)
    TO              reduce using rule 39 (variable_matrix -> LSQBRACKET exp index_arr_mat .)


state 307

    (92) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end . body for_np2
    (62) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 155

    body                           shift and go to state 317

state 308

    (95) for_end -> int_const_saver . RPAREN

    RPAREN          shift and go to state 318


state 309

    (89) while -> DO seed body WHILE LPAREN exp RPAREN . SEMICOLON gotoV

    SEMICOLON       shift and go to state 319


state 310

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body . return end_function program_function
    (55) return -> . return_np exp return_quad SEMICOLON
    (56) return -> . empty_path_return
    (57) return_np -> . RETURN
    (59) empty_path_return -> . empty
    (4) empty -> .

    RETURN          shift and go to state 323
    RBRACKET        reduce using rule 4 (empty -> .)

    return                         shift and go to state 320
    return_np                      shift and go to state 321
    empty_path_return              shift and go to state 322
    empty                          shift and go to state 324

state 311

    (52) param2 -> COMMA s_type . id_saver add_params param2
    (5) id_saver -> . ID empty

    ID              shift and go to state 27

    id_saver                       shift and go to state 325

state 312

    (125) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param . exp sp_param exp np_check_size
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    variable                       shift and go to state 107
    exp                            shift and go to state 326
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 313

    (128) dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param exp np_check_size .

    SEMICOLON       reduce using rule 128 (dummi_regression -> DUMMI_REGRESSION tag_sp variable sp_param exp np_check_size .)


state 314

    (71) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON . end_condition
    (76) end_condition -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    end_condition                  shift and go to state 327
    empty                          shift and go to state 328

state 315

    (72) condition2 -> ELSE condition_GOTO . body
    (62) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 155

    body                           shift and go to state 329

state 316

    (75) condition_GOTO -> empty .

    LBRACKET        reduce using rule 75 (condition_GOTO -> empty .)


state 317

    (92) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body . for_np2
    (96) for_np2 -> . SEMICOLON

    SEMICOLON       shift and go to state 331

    for_np2                        shift and go to state 330

state 318

    (95) for_end -> int_const_saver RPAREN .

    LBRACKET        reduce using rule 95 (for_end -> int_const_saver RPAREN .)


state 319

    (89) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON . gotoV
    (91) gotoV -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    gotoV                          shift and go to state 332
    empty                          shift and go to state 333

state 320

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return . end_function program_function
    (49) end_function -> . RBRACKET

    RBRACKET        shift and go to state 335

    end_function                   shift and go to state 334

state 321

    (55) return -> return_np . exp return_quad SEMICOLON
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    exp                            shift and go to state 336
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    variable                       shift and go to state 107
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 322

    (56) return -> empty_path_return .

    RBRACKET        reduce using rule 56 (return -> empty_path_return .)


state 323

    (57) return_np -> RETURN .

    CTE_FLOAT       reduce using rule 57 (return_np -> RETURN .)
    CTE_INT         reduce using rule 57 (return_np -> RETURN .)
    CTE_CHAR        reduce using rule 57 (return_np -> RETURN .)
    LPAREN          reduce using rule 57 (return_np -> RETURN .)
    ID              reduce using rule 57 (return_np -> RETURN .)


state 324

    (59) empty_path_return -> empty .

    RBRACKET        reduce using rule 59 (empty_path_return -> empty .)


state 325

    (52) param2 -> COMMA s_type id_saver . add_params param2
    (54) add_params -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    add_params                     shift and go to state 337
    empty                          shift and go to state 261

state 326

    (125) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param exp . sp_param exp np_check_size
    (122) sp_param -> . COMMA

    COMMA           shift and go to state 269

    sp_param                       shift and go to state 338

state 327

    (71) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .

    IF              reduce using rule 71 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    PRINT           reduce using rule 71 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    FOR             reduce using rule 71 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    DO              reduce using rule 71 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    ID              reduce using rule 71 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RBRACKET        reduce using rule 71 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RETURN          reduce using rule 71 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)


state 328

    (76) end_condition -> empty .

    IF              reduce using rule 76 (end_condition -> empty .)
    PRINT           reduce using rule 76 (end_condition -> empty .)
    FOR             reduce using rule 76 (end_condition -> empty .)
    DO              reduce using rule 76 (end_condition -> empty .)
    ID              reduce using rule 76 (end_condition -> empty .)
    RBRACKET        reduce using rule 76 (end_condition -> empty .)
    RETURN          reduce using rule 76 (end_condition -> empty .)


state 329

    (72) condition2 -> ELSE condition_GOTO body .

    SEMICOLON       reduce using rule 72 (condition2 -> ELSE condition_GOTO body .)


state 330

    (92) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .

    IF              reduce using rule 92 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    PRINT           reduce using rule 92 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    FOR             reduce using rule 92 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    DO              reduce using rule 92 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    ID              reduce using rule 92 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    RBRACKET        reduce using rule 92 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    RETURN          reduce using rule 92 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)


state 331

    (96) for_np2 -> SEMICOLON .

    IF              reduce using rule 96 (for_np2 -> SEMICOLON .)
    PRINT           reduce using rule 96 (for_np2 -> SEMICOLON .)
    FOR             reduce using rule 96 (for_np2 -> SEMICOLON .)
    DO              reduce using rule 96 (for_np2 -> SEMICOLON .)
    ID              reduce using rule 96 (for_np2 -> SEMICOLON .)
    RBRACKET        reduce using rule 96 (for_np2 -> SEMICOLON .)
    RETURN          reduce using rule 96 (for_np2 -> SEMICOLON .)


state 332

    (89) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .

    IF              reduce using rule 89 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    PRINT           reduce using rule 89 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    FOR             reduce using rule 89 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    DO              reduce using rule 89 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    ID              reduce using rule 89 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RBRACKET        reduce using rule 89 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RETURN          reduce using rule 89 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)


state 333

    (91) gotoV -> empty .

    IF              reduce using rule 91 (gotoV -> empty .)
    PRINT           reduce using rule 91 (gotoV -> empty .)
    FOR             reduce using rule 91 (gotoV -> empty .)
    DO              reduce using rule 91 (gotoV -> empty .)
    ID              reduce using rule 91 (gotoV -> empty .)
    RBRACKET        reduce using rule 91 (gotoV -> empty .)
    RETURN          reduce using rule 91 (gotoV -> empty .)


state 334

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function . program_function
    (42) program_function -> . FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function
    (43) program_function -> . empty
    (4) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 4 (empty -> .)

    program_function               shift and go to state 339
    empty                          shift and go to state 11

state 335

    (49) end_function -> RBRACKET .

    FUNCTION        reduce using rule 49 (end_function -> RBRACKET .)
    MAIN            reduce using rule 49 (end_function -> RBRACKET .)


state 336

    (55) return -> return_np exp . return_quad SEMICOLON
    (58) return_quad -> . empty
    (4) empty -> .

    SEMICOLON       reduce using rule 4 (empty -> .)

    return_quad                    shift and go to state 340
    empty                          shift and go to state 341

state 337

    (52) param2 -> COMMA s_type id_saver add_params . param2
    (52) param2 -> . COMMA s_type id_saver add_params param2
    (53) param2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 294
    RPAREN          reduce using rule 4 (empty -> .)

    param2                         shift and go to state 342
    empty                          shift and go to state 295

state 338

    (125) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param exp sp_param . exp np_check_size
    (130) exp -> . t_exp release_exp exp_or
    (134) t_exp -> . expression release_exp t_exp_and
    (138) expression -> . m_exp release_exp expression_comp
    (147) m_exp -> . term release_exp m_exp_sr
    (152) term -> . sub_factor release_exp term_pc
    (158) sub_factor -> . factor release_exp sub_factor_pc
    (162) factor -> . factor_exp
    (163) factor -> . factor_cte
    (164) factor -> . variable
    (165) factor -> . call_function
    (166) factor_exp -> . false_button exp release_false_button
    (169) factor_cte -> . CTE_FLOAT
    (170) factor_cte -> . CTE_INT
    (171) factor_cte -> . CTE_CHAR
    (33) variable -> . var_id_saver variable_array clear_dimension
    (97) call_function -> . function_saver function_flag call_params check_not_void
    (167) false_button -> . LPAREN
    (35) var_id_saver -> . id_saver
    (102) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    CTE_FLOAT       shift and go to state 136
    CTE_INT         shift and go to state 137
    CTE_CHAR        shift and go to state 138
    LPAREN          shift and go to state 120
    ID              shift and go to state 70

    variable                       shift and go to state 107
    exp                            shift and go to state 343
    t_exp                          shift and go to state 112
    expression                     shift and go to state 121
    m_exp                          shift and go to state 128
    term                           shift and go to state 129
    sub_factor                     shift and go to state 130
    factor                         shift and go to state 131
    factor_exp                     shift and go to state 132
    factor_cte                     shift and go to state 133
    call_function                  shift and go to state 134
    false_button                   shift and go to state 135
    var_id_saver                   shift and go to state 67
    function_saver                 shift and go to state 139
    id_saver                       shift and go to state 71

state 339

    (42) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function .

    MAIN            reduce using rule 42 (program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return end_function program_function .)


state 340

    (55) return -> return_np exp return_quad . SEMICOLON

    SEMICOLON       shift and go to state 344


state 341

    (58) return_quad -> empty .

    SEMICOLON       reduce using rule 58 (return_quad -> empty .)


state 342

    (52) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 52 (param2 -> COMMA s_type id_saver add_params param2 .)


state 343

    (125) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param exp sp_param exp . np_check_size
    (123) np_check_size -> . RPAREN

    RPAREN          shift and go to state 273

    np_check_size                  shift and go to state 345

state 344

    (55) return -> return_np exp return_quad SEMICOLON .

    RBRACKET        reduce using rule 55 (return -> return_np exp return_quad SEMICOLON .)


state 345

    (125) financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param exp sp_param exp np_check_size .

    SEMICOLON       reduce using rule 125 (financial_state -> FINANCIAL_STATE tag_sp variable sp_param variable sp_param exp sp_param exp np_check_size .)

