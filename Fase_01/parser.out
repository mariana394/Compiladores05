Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main end
Rule 2     goto_main -> SEMICOLON
Rule 3     end -> END
Rule 4     empty -> <empty>
Rule 5     id_saver -> ID empty
Rule 6     int_const_saver -> CTE_INT
Rule 7     int_const_saver -> empty
Rule 8     release_exp -> empty
Rule 9     resources -> empty
Rule 10    program_libraries -> from_library import_library
Rule 11    program_libraries -> empty
Rule 12    from_library -> FROM ID
Rule 13    from_library -> empty
Rule 14    import_library -> IMPORT ID AS ID program_libraries
Rule 15    var_type -> var_c_type
Rule 16    var_type -> var_s_type
Rule 17    program_vars -> VAR var_type
Rule 18    program_vars -> empty
Rule 19    s_type -> INT
Rule 20    s_type -> FLOAT
Rule 21    s_type -> CHAR
Rule 22    c_type -> DATAFRAME
Rule 23    c_type -> DATE
Rule 24    var_multiple -> var_type
Rule 25    var_multiple -> empty
Rule 26    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 27    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 28    var_c_type2 -> empty
Rule 29    add_c_var -> empty
Rule 30    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 31    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 32    var_s_type2 -> empty
Rule 33    add_s_var -> empty
Rule 34    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 35    var_s_array -> empty
Rule 36    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 37    var_s_matrix -> empty
Rule 38    var_s_dimesions -> CTE_INT empty
Rule 39    variable -> id_saver variable_array
Rule 40    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 41    variable_array -> empty
Rule 42    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 43    variable_matrix -> empty
Rule 44    program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
Rule 45    program_function -> empty
Rule 46    f_type -> INT
Rule 47    f_type -> FLOAT
Rule 48    f_type -> CHAR
Rule 49    f_type -> VOID
Rule 50    func_creator -> empty
Rule 51    add_func_glob -> LBRACKET
Rule 52    end_function -> RBRACKET
Rule 53    param -> s_type id_saver add_params param2
Rule 54    param -> empty
Rule 55    param2 -> COMMA s_type id_saver add_params param2
Rule 56    param2 -> empty
Rule 57    add_params -> empty
Rule 58    return -> return_np exp return_quad SEMICOLON
Rule 59    return -> empty_path_return
Rule 60    return_np -> RETURN
Rule 61    return_quad -> empty
Rule 62    empty_path_return -> empty
Rule 63    program_main -> main_id LBRACKET program_vars inner_body RBRACKET
Rule 64    main_id -> MAIN resources
Rule 65    body -> LBRACKET inner_body RBRACKET
Rule 66    inner_body -> statement inner_body
Rule 67    inner_body -> empty
Rule 68    assign -> variable keep_assign specialf_assign end_assign
Rule 69    specialf_assign -> exp
Rule 70    specialf_assign -> special_function
Rule 71    specialf_assign -> read
Rule 72    keep_assign -> ASSIGN empty
Rule 73    end_assign -> SEMICOLON empty
Rule 74    condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
Rule 75    condition2 -> ELSE condition_GOTO body
Rule 76    condition2 -> empty
Rule 77    condition_GOTOF -> empty
Rule 78    condition_GOTO -> empty
Rule 79    end_condition -> empty
Rule 80    print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
Rule 81    print_type -> exp
Rule 82    print_many -> print_type print_many2
Rule 83    print_many2 -> COMMA print_many_np print_many
Rule 84    print_many2 -> empty
Rule 85    print_many_np -> empty
Rule 86    end_print_np -> empty
Rule 87    read -> np_read LPAREN valid_exp_read read_np
Rule 88    np_read -> READ
Rule 89    valid_exp_read -> exp
Rule 90    read_np -> RPAREN
Rule 91    cycle -> for
Rule 92    cycle -> while
Rule 93    while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
Rule 94    seed -> empty
Rule 95    gotoV -> empty
Rule 96    for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
Rule 97    for_control -> id_saver
Rule 98    for_np1 -> TO
Rule 99    for_end -> int_const_saver RPAREN
Rule 100   for_np2 -> SEMICOLON
Rule 101   call_function -> function_saver function_flag call_params check_not_void
Rule 102   check_not_void -> RPAREN
Rule 103   call_void_function -> function_saver function_flag call_params verify_params check_void
Rule 104   verify_params -> RPAREN
Rule 105   check_void -> SEMICOLON
Rule 106   function_saver -> ID empty
Rule 107   function_flag -> LPAREN
Rule 108   call_params -> check_param exp_many
Rule 109   call_params -> empty
Rule 110   check_param -> exp
Rule 111   exp_many -> COMMA check_param exp_many
Rule 112   exp_many -> empty
Rule 113   statement -> assign
Rule 114   statement -> condition
Rule 115   statement -> print
Rule 116   statement -> cycle
Rule 117   statement -> call_void_function
Rule 118   special_function -> exploration
Rule 119   special_function -> financial_state
Rule 120   special_function -> dummi_regression
Rule 121   special_function -> season_analysis
Rule 122   special_function -> trend_prediction
Rule 123   special_function -> model_predict
Rule 124   exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 125   explore_var -> COMMA variable
Rule 126   explore_var -> empty
Rule 127   explor_cte -> COMMA int_const_saver
Rule 128   explor_cte -> empty
Rule 129   financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 130   season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 131   trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
Rule 132   dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 133   dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 134   dr_array -> empty
Rule 135   dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 136   dr_array_mp -> empty
Rule 137   dr_int -> COMMA int_const_saver
Rule 138   dr_int -> empty
Rule 139   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 140   exp -> t_exp release_exp exp_or
Rule 141   exp_or -> exp_keep_or exp
Rule 142   exp_or -> empty
Rule 143   exp_keep_or -> OR
Rule 144   t_exp -> expression release_exp t_exp_and
Rule 145   t_exp_and -> keep_and t_exp
Rule 146   t_exp_and -> empty
Rule 147   keep_and -> AND
Rule 148   expression -> m_exp release_exp expression_comp
Rule 149   expression_comp -> expression_comp_2 m_exp release_exp
Rule 150   expression_comp -> empty
Rule 151   expression_comp_2 -> GTHAN
Rule 152   expression_comp_2 -> EQUAL
Rule 153   expression_comp_2 -> NOTEQUAL
Rule 154   expression_comp_2 -> LTHAN
Rule 155   expression_comp_2 -> GORE
Rule 156   expression_comp_2 -> LORE
Rule 157   m_exp -> term release_exp m_exp_sr
Rule 158   m_exp_sr -> m_exp_sr_2 m_exp
Rule 159   m_exp_sr -> empty
Rule 160   m_exp_sr_2 -> PLUS
Rule 161   m_exp_sr_2 -> MINUS
Rule 162   term -> sub_factor release_exp term_pc
Rule 163   term_pc -> term_pc_2 term
Rule 164   term_pc -> empty
Rule 165   term_pc_2 -> MULTIPLY
Rule 166   term_pc_2 -> DIVIDE
Rule 167   term_pc_2 -> MODULE
Rule 168   sub_factor -> factor release_exp sub_factor_pc
Rule 169   sub_factor_pc -> sub_factor_pc_2 sub_factor
Rule 170   sub_factor_pc -> empty
Rule 171   sub_factor_pc_2 -> POWER empty
Rule 172   factor -> factor_exp
Rule 173   factor -> factor_cte
Rule 174   factor -> variable
Rule 175   factor -> call_function
Rule 176   factor_exp -> false_button exp release_false_button
Rule 177   false_button -> LPAREN
Rule 178   release_false_button -> RPAREN
Rule 179   factor_cte -> CTE_FLOAT
Rule 180   factor_cte -> CTE_INT
Rule 181   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 147
AS                   : 14
ASSIGN               : 72
CHAR                 : 21 48
COLON                : 
COMMA                : 27 31 55 83 111 125 127 129 129 129 131 131 131 132 133 135 137 139 139
CTE_CHAR             : 133 135 181
CTE_FLOAT            : 179
CTE_INT              : 6 38 180
DATAFRAME            : 22
DATE                 : 23
DIVIDE               : 166
DO                   : 93
DUMMI_REGRESSION     : 132
ELSE                 : 75
END                  : 3
EQUAL                : 152
EXPLORATION          : 124
FINANCIAL_STATE      : 129
FLOAT                : 20 47
FOR                  : 96
FROM                 : 12
FUNCTION             : 44
GORE                 : 155
GTHAN                : 151
ID                   : 1 5 12 14 14 106
IF                   : 74
IMPORT               : 14
INT                  : 19 46
LBRACKET             : 51 63 65
LORE                 : 156
LPAREN               : 44 74 80 87 93 96 107 124 129 130 131 132 139 177
LSQBRACKET           : 34 36 40 42 133
LTHAN                : 154
MAIN                 : 64
MINUS                : 161
MODEL_PREDICT        : 139
MODULE               : 167
MULTIPLY             : 165
NOTEQUAL             : 153
OR                   : 143
PLUS                 : 160
POWER                : 171
PRINT                : 80
PROGRAM              : 1
RBRACKET             : 52 63 65
READ                 : 88
RETURN               : 60
RPAREN               : 44 74 80 90 93 99 102 104 124 129 130 131 132 139 178
RSQBRACKET           : 34 36 40 42 133
SEASON_ANALYSIS      : 130
SEMICOLON            : 2 26 30 58 73 74 80 93 100 105
TO                   : 98
TREND_PREDICTION     : 131
VAR                  : 17
VOID                 : 49
WHILE                : 93
error                : 

Nonterminals, with rules where they appear

add_c_var            : 26 27
add_func_glob        : 44
add_params           : 53 55
add_s_var            : 30 31
assign               : 113
body                 : 74 75 93 96
c_type               : 26
call_function        : 175
call_params          : 101 103
call_void_function   : 117
check_not_void       : 101
check_param          : 108 111
check_void           : 103
condition            : 114
condition2           : 74
condition_GOTO       : 75
condition_GOTOF      : 74
cycle                : 116
dr_array             : 132
dr_array_mp          : 133 135
dr_int               : 132
dummi_regression     : 120
empty                : 5 7 8 9 11 13 18 25 28 29 32 33 35 37 38 41 43 45 50 54 56 57 61 62 67 72 73 76 77 78 79 84 85 86 94 95 106 109 112 126 128 134 136 138 142 146 150 159 164 170 171
empty_path_return    : 59
end                  : 1
end_assign           : 68
end_condition        : 74
end_function         : 44
end_print_np         : 80
exp                  : 40 42 58 69 74 81 89 93 96 110 141 176
exp_keep_or          : 141
exp_many             : 108 111
exp_or               : 140
explor_cte           : 124
exploration          : 118
explore_var          : 124
expression           : 144
expression_comp      : 148
expression_comp_2    : 149
f_type               : 44
factor               : 168
factor_cte           : 173
factor_exp           : 172
false_button         : 176
financial_state      : 119
for                  : 91
for_control          : 96
for_end              : 96
for_np1              : 96
for_np2              : 96
from_library         : 10
func_creator         : 44
function_flag        : 101 103
function_saver       : 101 103
gotoV                : 93
goto_main            : 1
id_saver             : 26 27 30 31 39 44 53 55 97
import_library       : 10
inner_body           : 44 63 65 66
int_const_saver      : 99 127 131 131 131 137
keep_and             : 145
keep_assign          : 68 96
m_exp                : 148 149 158
m_exp_sr             : 157
m_exp_sr_2           : 158
main_id              : 63
model_predict        : 123
np_read              : 87
param                : 44
param2               : 53 55
print                : 115
print_many           : 80 83
print_many2          : 82
print_many_np        : 83
print_type           : 82
program              : 0
program_function     : 1 44
program_libraries    : 1 14
program_main         : 1
program_vars         : 1 44 63
read                 : 71
read_np              : 87
release_exp          : 140 144 148 149 157 162 168
release_false_button : 176
resources            : 44 64
return               : 44
return_np            : 58
return_quad          : 58
s_type               : 30 53 55
season_analysis      : 121
seed                 : 93
special_function     : 70
specialf_assign      : 68
statement            : 66
sub_factor           : 162 169
sub_factor_pc        : 168
sub_factor_pc_2      : 169
t_exp                : 140 145
t_exp_and            : 144
term                 : 157 163
term_pc              : 162
term_pc_2            : 163
trend_prediction     : 122
valid_exp_read       : 87
var_c_type           : 15
var_c_type2          : 26 27
var_multiple         : 26 30
var_s_array          : 30 31
var_s_dimesions      : 34 36
var_s_matrix         : 34
var_s_type           : 16
var_s_type2          : 30 31
var_type             : 17 24
variable             : 68 124 125 129 129 129 129 130 131 132 132 139 139 174
variable_array       : 39
variable_matrix      : 40
verify_params        : 103
while                : 92

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID goto_main program_libraries program_vars program_function program_main end

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID goto_main program_libraries program_vars program_function program_main end

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . goto_main program_libraries program_vars program_function program_main end
    (2) goto_main -> . SEMICOLON

    SEMICOLON       shift and go to state 5

    goto_main                      shift and go to state 4

state 4

    (1) program -> PROGRAM ID goto_main . program_libraries program_vars program_function program_main end
    (10) program_libraries -> . from_library import_library
    (11) program_libraries -> . empty
    (12) from_library -> . FROM ID
    (13) from_library -> . empty
    (4) empty -> .

    FROM            shift and go to state 9
    VAR             reduce using rule 4 (empty -> .)
    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IMPORT          reduce using rule 4 (empty -> .)

    program_libraries              shift and go to state 6
    from_library                   shift and go to state 7
    empty                          shift and go to state 8

state 5

    (2) goto_main -> SEMICOLON .

    FROM            reduce using rule 2 (goto_main -> SEMICOLON .)
    VAR             reduce using rule 2 (goto_main -> SEMICOLON .)
    FUNCTION        reduce using rule 2 (goto_main -> SEMICOLON .)
    MAIN            reduce using rule 2 (goto_main -> SEMICOLON .)
    IMPORT          reduce using rule 2 (goto_main -> SEMICOLON .)


state 6

    (1) program -> PROGRAM ID goto_main program_libraries . program_vars program_function program_main end
    (17) program_vars -> . VAR var_type
    (18) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 11
    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 10
    empty                          shift and go to state 12

state 7

    (10) program_libraries -> from_library . import_library
    (14) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 14

    import_library                 shift and go to state 13

state 8

    (11) program_libraries -> empty .
    (13) from_library -> empty .

    VAR             reduce using rule 11 (program_libraries -> empty .)
    FUNCTION        reduce using rule 11 (program_libraries -> empty .)
    MAIN            reduce using rule 11 (program_libraries -> empty .)
    IMPORT          reduce using rule 13 (from_library -> empty .)


state 9

    (12) from_library -> FROM . ID

    ID              shift and go to state 15


state 10

    (1) program -> PROGRAM ID goto_main program_libraries program_vars . program_function program_main end
    (44) program_function -> . FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (45) program_function -> . empty
    (4) empty -> .

    FUNCTION        shift and go to state 17
    MAIN            reduce using rule 4 (empty -> .)

    program_function               shift and go to state 16
    empty                          shift and go to state 18

state 11

    (17) program_vars -> VAR . var_type
    (15) var_type -> . var_c_type
    (16) var_type -> . var_s_type
    (26) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (30) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (22) c_type -> . DATAFRAME
    (23) c_type -> . DATE
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    DATAFRAME       shift and go to state 24
    DATE            shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    var_type                       shift and go to state 19
    var_c_type                     shift and go to state 20
    var_s_type                     shift and go to state 21
    c_type                         shift and go to state 22
    s_type                         shift and go to state 23

state 12

    (18) program_vars -> empty .

    FUNCTION        reduce using rule 18 (program_vars -> empty .)
    MAIN            reduce using rule 18 (program_vars -> empty .)
    IF              reduce using rule 18 (program_vars -> empty .)
    PRINT           reduce using rule 18 (program_vars -> empty .)
    FOR             reduce using rule 18 (program_vars -> empty .)
    DO              reduce using rule 18 (program_vars -> empty .)
    ID              reduce using rule 18 (program_vars -> empty .)
    RBRACKET        reduce using rule 18 (program_vars -> empty .)
    RETURN          reduce using rule 18 (program_vars -> empty .)


state 13

    (10) program_libraries -> from_library import_library .

    VAR             reduce using rule 10 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 10 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 10 (program_libraries -> from_library import_library .)


state 14

    (14) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 29


state 15

    (12) from_library -> FROM ID .

    IMPORT          reduce using rule 12 (from_library -> FROM ID .)


state 16

    (1) program -> PROGRAM ID goto_main program_libraries program_vars program_function . program_main end
    (63) program_main -> . main_id LBRACKET program_vars inner_body RBRACKET
    (64) main_id -> . MAIN resources

    MAIN            shift and go to state 32

    program_main                   shift and go to state 30
    main_id                        shift and go to state 31

state 17

    (44) program_function -> FUNCTION . resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (9) resources -> . empty
    (4) empty -> .

    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    CHAR            reduce using rule 4 (empty -> .)
    VOID            reduce using rule 4 (empty -> .)

    resources                      shift and go to state 33
    empty                          shift and go to state 34

state 18

    (45) program_function -> empty .

    MAIN            reduce using rule 45 (program_function -> empty .)


state 19

    (17) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 17 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 17 (program_vars -> VAR var_type .)
    IF              reduce using rule 17 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 17 (program_vars -> VAR var_type .)
    FOR             reduce using rule 17 (program_vars -> VAR var_type .)
    DO              reduce using rule 17 (program_vars -> VAR var_type .)
    ID              reduce using rule 17 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 17 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 17 (program_vars -> VAR var_type .)


state 20

    (15) var_type -> var_c_type .

    FUNCTION        reduce using rule 15 (var_type -> var_c_type .)
    MAIN            reduce using rule 15 (var_type -> var_c_type .)
    IF              reduce using rule 15 (var_type -> var_c_type .)
    PRINT           reduce using rule 15 (var_type -> var_c_type .)
    FOR             reduce using rule 15 (var_type -> var_c_type .)
    DO              reduce using rule 15 (var_type -> var_c_type .)
    ID              reduce using rule 15 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 15 (var_type -> var_c_type .)
    RETURN          reduce using rule 15 (var_type -> var_c_type .)


state 21

    (16) var_type -> var_s_type .

    FUNCTION        reduce using rule 16 (var_type -> var_s_type .)
    MAIN            reduce using rule 16 (var_type -> var_s_type .)
    IF              reduce using rule 16 (var_type -> var_s_type .)
    PRINT           reduce using rule 16 (var_type -> var_s_type .)
    FOR             reduce using rule 16 (var_type -> var_s_type .)
    DO              reduce using rule 16 (var_type -> var_s_type .)
    ID              reduce using rule 16 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 16 (var_type -> var_s_type .)
    RETURN          reduce using rule 16 (var_type -> var_s_type .)


state 22

    (26) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 35

state 23

    (30) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 37

state 24

    (22) c_type -> DATAFRAME .

    ID              reduce using rule 22 (c_type -> DATAFRAME .)


state 25

    (23) c_type -> DATE .

    ID              reduce using rule 23 (c_type -> DATE .)


state 26

    (19) s_type -> INT .

    ID              reduce using rule 19 (s_type -> INT .)


state 27

    (20) s_type -> FLOAT .

    ID              reduce using rule 20 (s_type -> FLOAT .)


state 28

    (21) s_type -> CHAR .

    ID              reduce using rule 21 (s_type -> CHAR .)


state 29

    (14) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 38


state 30

    (1) program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main . end
    (3) end -> . END

    END             shift and go to state 40

    end                            shift and go to state 39

state 31

    (63) program_main -> main_id . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 41


state 32

    (64) main_id -> MAIN . resources
    (9) resources -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    resources                      shift and go to state 42
    empty                          shift and go to state 34

state 33

    (44) program_function -> FUNCTION resources . f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (46) f_type -> . INT
    (47) f_type -> . FLOAT
    (48) f_type -> . CHAR
    (49) f_type -> . VOID

    INT             shift and go to state 44
    FLOAT           shift and go to state 45
    CHAR            shift and go to state 46
    VOID            shift and go to state 47

    f_type                         shift and go to state 43

state 34

    (9) resources -> empty .

    INT             reduce using rule 9 (resources -> empty .)
    FLOAT           reduce using rule 9 (resources -> empty .)
    CHAR            reduce using rule 9 (resources -> empty .)
    VOID            reduce using rule 9 (resources -> empty .)
    LBRACKET        reduce using rule 9 (resources -> empty .)


state 35

    (26) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (29) add_c_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_c_var                      shift and go to state 48
    empty                          shift and go to state 49

state 36

    (5) id_saver -> ID . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    LSQBRACKET      reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ASSIGN          reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 50

state 37

    (30) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (34) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (35) var_s_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 52
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_array                    shift and go to state 51
    empty                          shift and go to state 53

state 38

    (14) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 54


state 39

    (1) program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main end .

    $end            reduce using rule 1 (program -> PROGRAM ID goto_main program_libraries program_vars program_function program_main end .)


state 40

    (3) end -> END .

    $end            reduce using rule 3 (end -> END .)


state 41

    (63) program_main -> main_id LBRACKET . program_vars inner_body RBRACKET
    (17) program_vars -> . VAR var_type
    (18) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 11
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 55
    empty                          shift and go to state 12

state 42

    (64) main_id -> MAIN resources .

    LBRACKET        reduce using rule 64 (main_id -> MAIN resources .)


state 43

    (44) program_function -> FUNCTION resources f_type . id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 56

state 44

    (46) f_type -> INT .

    ID              reduce using rule 46 (f_type -> INT .)


state 45

    (47) f_type -> FLOAT .

    ID              reduce using rule 47 (f_type -> FLOAT .)


state 46

    (48) f_type -> CHAR .

    ID              reduce using rule 48 (f_type -> CHAR .)


state 47

    (49) f_type -> VOID .

    ID              reduce using rule 49 (f_type -> VOID .)


state 48

    (26) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (27) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (28) var_c_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 58
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_c_type2                    shift and go to state 57
    empty                          shift and go to state 59

state 49

    (29) add_c_var -> empty .

    COMMA           reduce using rule 29 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 29 (add_c_var -> empty .)


state 50

    (5) id_saver -> ID empty .

    COMMA           reduce using rule 5 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 5 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    LPAREN          reduce using rule 5 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 5 (id_saver -> ID empty .)
    RPAREN          reduce using rule 5 (id_saver -> ID empty .)


state 51

    (30) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (33) add_s_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_s_var                      shift and go to state 60
    empty                          shift and go to state 61

state 52

    (34) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (38) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 63

    var_s_dimesions                shift and go to state 62

state 53

    (35) var_s_array -> empty .

    COMMA           reduce using rule 35 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 35 (var_s_array -> empty .)


state 54

    (14) import_library -> IMPORT ID AS ID . program_libraries
    (10) program_libraries -> . from_library import_library
    (11) program_libraries -> . empty
    (12) from_library -> . FROM ID
    (13) from_library -> . empty
    (4) empty -> .

    FROM            shift and go to state 9
    VAR             reduce using rule 4 (empty -> .)
    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IMPORT          reduce using rule 4 (empty -> .)

    program_libraries              shift and go to state 64
    from_library                   shift and go to state 7
    empty                          shift and go to state 8

state 55

    (63) program_main -> main_id LBRACKET program_vars . inner_body RBRACKET
    (66) inner_body -> . statement inner_body
    (67) inner_body -> . empty
    (113) statement -> . assign
    (114) statement -> . condition
    (115) statement -> . print
    (116) statement -> . cycle
    (117) statement -> . call_void_function
    (4) empty -> .
    (68) assign -> . variable keep_assign specialf_assign end_assign
    (74) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (80) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (91) cycle -> . for
    (92) cycle -> . while
    (103) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . id_saver variable_array
    (96) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (93) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (106) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    inner_body                     shift and go to state 65
    statement                      shift and go to state 66
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78
    id_saver                       shift and go to state 79

state 56

    (44) program_function -> FUNCTION resources f_type id_saver . func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (50) func_creator -> . empty
    (4) empty -> .

    LPAREN          reduce using rule 4 (empty -> .)

    func_creator                   shift and go to state 83
    empty                          shift and go to state 84

state 57

    (26) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 85


state 58

    (27) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 86

state 59

    (28) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 28 (var_c_type2 -> empty .)


state 60

    (30) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (31) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (32) var_s_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 88
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_type2                    shift and go to state 87
    empty                          shift and go to state 89

state 61

    (33) add_s_var -> empty .

    COMMA           reduce using rule 33 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 33 (add_s_var -> empty .)


state 62

    (34) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 90


state 63

    (38) var_s_dimesions -> CTE_INT . empty
    (4) empty -> .

    RSQBRACKET      reduce using rule 4 (empty -> .)

    empty                          shift and go to state 91

state 64

    (14) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 14 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 14 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 14 (import_library -> IMPORT ID AS ID program_libraries .)


state 65

    (63) program_main -> main_id LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 92


state 66

    (66) inner_body -> statement . inner_body
    (66) inner_body -> . statement inner_body
    (67) inner_body -> . empty
    (113) statement -> . assign
    (114) statement -> . condition
    (115) statement -> . print
    (116) statement -> . cycle
    (117) statement -> . call_void_function
    (4) empty -> .
    (68) assign -> . variable keep_assign specialf_assign end_assign
    (74) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (80) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (91) cycle -> . for
    (92) cycle -> . while
    (103) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . id_saver variable_array
    (96) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (93) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (106) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    statement                      shift and go to state 66
    inner_body                     shift and go to state 93
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78
    id_saver                       shift and go to state 79

state 67

    (67) inner_body -> empty .

    RBRACKET        reduce using rule 67 (inner_body -> empty .)
    RETURN          reduce using rule 67 (inner_body -> empty .)


state 68

    (113) statement -> assign .

    IF              reduce using rule 113 (statement -> assign .)
    PRINT           reduce using rule 113 (statement -> assign .)
    FOR             reduce using rule 113 (statement -> assign .)
    DO              reduce using rule 113 (statement -> assign .)
    ID              reduce using rule 113 (statement -> assign .)
    RBRACKET        reduce using rule 113 (statement -> assign .)
    RETURN          reduce using rule 113 (statement -> assign .)


state 69

    (114) statement -> condition .

    IF              reduce using rule 114 (statement -> condition .)
    PRINT           reduce using rule 114 (statement -> condition .)
    FOR             reduce using rule 114 (statement -> condition .)
    DO              reduce using rule 114 (statement -> condition .)
    ID              reduce using rule 114 (statement -> condition .)
    RBRACKET        reduce using rule 114 (statement -> condition .)
    RETURN          reduce using rule 114 (statement -> condition .)


state 70

    (115) statement -> print .

    IF              reduce using rule 115 (statement -> print .)
    PRINT           reduce using rule 115 (statement -> print .)
    FOR             reduce using rule 115 (statement -> print .)
    DO              reduce using rule 115 (statement -> print .)
    ID              reduce using rule 115 (statement -> print .)
    RBRACKET        reduce using rule 115 (statement -> print .)
    RETURN          reduce using rule 115 (statement -> print .)


state 71

    (116) statement -> cycle .

    IF              reduce using rule 116 (statement -> cycle .)
    PRINT           reduce using rule 116 (statement -> cycle .)
    FOR             reduce using rule 116 (statement -> cycle .)
    DO              reduce using rule 116 (statement -> cycle .)
    ID              reduce using rule 116 (statement -> cycle .)
    RBRACKET        reduce using rule 116 (statement -> cycle .)
    RETURN          reduce using rule 116 (statement -> cycle .)


state 72

    (117) statement -> call_void_function .

    IF              reduce using rule 117 (statement -> call_void_function .)
    PRINT           reduce using rule 117 (statement -> call_void_function .)
    FOR             reduce using rule 117 (statement -> call_void_function .)
    DO              reduce using rule 117 (statement -> call_void_function .)
    ID              reduce using rule 117 (statement -> call_void_function .)
    RBRACKET        reduce using rule 117 (statement -> call_void_function .)
    RETURN          reduce using rule 117 (statement -> call_void_function .)


state 73

    (68) assign -> variable . keep_assign specialf_assign end_assign
    (72) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 95

    keep_assign                    shift and go to state 94

state 74

    (74) condition -> IF . LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    LPAREN          shift and go to state 96


state 75

    (80) print -> PRINT . LPAREN print_many RPAREN SEMICOLON end_print_np

    LPAREN          shift and go to state 97


state 76

    (91) cycle -> for .

    IF              reduce using rule 91 (cycle -> for .)
    PRINT           reduce using rule 91 (cycle -> for .)
    FOR             reduce using rule 91 (cycle -> for .)
    DO              reduce using rule 91 (cycle -> for .)
    ID              reduce using rule 91 (cycle -> for .)
    RBRACKET        reduce using rule 91 (cycle -> for .)
    RETURN          reduce using rule 91 (cycle -> for .)


state 77

    (92) cycle -> while .

    IF              reduce using rule 92 (cycle -> while .)
    PRINT           reduce using rule 92 (cycle -> while .)
    FOR             reduce using rule 92 (cycle -> while .)
    DO              reduce using rule 92 (cycle -> while .)
    ID              reduce using rule 92 (cycle -> while .)
    RBRACKET        reduce using rule 92 (cycle -> while .)
    RETURN          reduce using rule 92 (cycle -> while .)


state 78

    (103) call_void_function -> function_saver . function_flag call_params verify_params check_void
    (107) function_flag -> . LPAREN

    LPAREN          shift and go to state 99

    function_flag                  shift and go to state 98

state 79

    (39) variable -> id_saver . variable_array
    (40) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (41) variable_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 101
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    variable_array                 shift and go to state 100
    empty                          shift and go to state 102

state 80

    (96) for -> FOR . LPAREN for_control keep_assign exp for_np1 for_end body for_np2

    LPAREN          shift and go to state 103


state 81

    (93) while -> DO . seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (94) seed -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    seed                           shift and go to state 104
    empty                          shift and go to state 105

state 82

    (106) function_saver -> ID . empty
    (5) id_saver -> ID . empty
    (4) empty -> .

    LPAREN          reduce using rule 4 (empty -> .)
    LSQBRACKET      reduce using rule 4 (empty -> .)
    ASSIGN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 106

state 83

    (44) program_function -> FUNCTION resources f_type id_saver func_creator . LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function

    LPAREN          shift and go to state 107


state 84

    (50) func_creator -> empty .

    LPAREN          reduce using rule 50 (func_creator -> empty .)


state 85

    (26) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (24) var_multiple -> . var_type
    (25) var_multiple -> . empty
    (15) var_type -> . var_c_type
    (16) var_type -> . var_s_type
    (4) empty -> .
    (26) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (30) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (22) c_type -> . DATAFRAME
    (23) c_type -> . DATE
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    DATAFRAME       shift and go to state 24
    DATE            shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    c_type                         shift and go to state 22
    var_multiple                   shift and go to state 108
    var_type                       shift and go to state 109
    empty                          shift and go to state 110
    var_c_type                     shift and go to state 20
    var_s_type                     shift and go to state 21
    s_type                         shift and go to state 23

state 86

    (27) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (29) add_c_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_c_var                      shift and go to state 111
    empty                          shift and go to state 49

state 87

    (30) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 112


state 88

    (31) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 113

state 89

    (32) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 32 (var_s_type2 -> empty .)


state 90

    (34) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (36) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (37) var_s_matrix -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 114
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_matrix                   shift and go to state 115
    empty                          shift and go to state 116

state 91

    (38) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 38 (var_s_dimesions -> CTE_INT empty .)


state 92

    (63) program_main -> main_id LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 63 (program_main -> main_id LBRACKET program_vars inner_body RBRACKET .)


state 93

    (66) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 66 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 66 (inner_body -> statement inner_body .)


state 94

    (68) assign -> variable keep_assign . specialf_assign end_assign
    (69) specialf_assign -> . exp
    (70) specialf_assign -> . special_function
    (71) specialf_assign -> . read
    (140) exp -> . t_exp release_exp exp_or
    (118) special_function -> . exploration
    (119) special_function -> . financial_state
    (120) special_function -> . dummi_regression
    (121) special_function -> . season_analysis
    (122) special_function -> . trend_prediction
    (123) special_function -> . model_predict
    (87) read -> . np_read LPAREN valid_exp_read read_np
    (144) t_exp -> . expression release_exp t_exp_and
    (124) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (129) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (132) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (130) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (131) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (139) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (88) np_read -> . READ
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    EXPLORATION     shift and go to state 132
    FINANCIAL_STATE shift and go to state 133
    DUMMI_REGRESSION shift and go to state 134
    SEASON_ANALYSIS shift and go to state 135
    TREND_PREDICTION shift and go to state 136
    MODEL_PREDICT   shift and go to state 137
    READ            shift and go to state 138
    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    variable                       shift and go to state 117
    specialf_assign                shift and go to state 118
    exp                            shift and go to state 119
    special_function               shift and go to state 120
    read                           shift and go to state 121
    t_exp                          shift and go to state 122
    exploration                    shift and go to state 123
    financial_state                shift and go to state 124
    dummi_regression               shift and go to state 125
    season_analysis                shift and go to state 126
    trend_prediction               shift and go to state 127
    model_predict                  shift and go to state 128
    np_read                        shift and go to state 129
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 95

    (72) keep_assign -> ASSIGN . empty
    (4) empty -> .

    EXPLORATION     reduce using rule 4 (empty -> .)
    FINANCIAL_STATE reduce using rule 4 (empty -> .)
    DUMMI_REGRESSION reduce using rule 4 (empty -> .)
    SEASON_ANALYSIS reduce using rule 4 (empty -> .)
    TREND_PREDICTION reduce using rule 4 (empty -> .)
    MODEL_PREDICT   reduce using rule 4 (empty -> .)
    READ            reduce using rule 4 (empty -> .)
    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 152

state 96

    (74) condition -> IF LPAREN . exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    exp                            shift and go to state 153
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 97

    (80) print -> PRINT LPAREN . print_many RPAREN SEMICOLON end_print_np
    (82) print_many -> . print_type print_many2
    (81) print_type -> . exp
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    print_many                     shift and go to state 154
    print_type                     shift and go to state 155
    exp                            shift and go to state 156
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 98

    (103) call_void_function -> function_saver function_flag . call_params verify_params check_void
    (108) call_params -> . check_param exp_many
    (109) call_params -> . empty
    (110) check_param -> . exp
    (4) empty -> .
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    RPAREN          reduce using rule 4 (empty -> .)
    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    function_saver                 shift and go to state 150
    call_params                    shift and go to state 157
    check_param                    shift and go to state 158
    empty                          shift and go to state 159
    exp                            shift and go to state 160
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79

state 99

    (107) function_flag -> LPAREN .

    CTE_FLOAT       reduce using rule 107 (function_flag -> LPAREN .)
    CTE_INT         reduce using rule 107 (function_flag -> LPAREN .)
    CTE_CHAR        reduce using rule 107 (function_flag -> LPAREN .)
    LPAREN          reduce using rule 107 (function_flag -> LPAREN .)
    ID              reduce using rule 107 (function_flag -> LPAREN .)
    RPAREN          reduce using rule 107 (function_flag -> LPAREN .)


state 100

    (39) variable -> id_saver variable_array .

    ASSIGN          reduce using rule 39 (variable -> id_saver variable_array .)
    POWER           reduce using rule 39 (variable -> id_saver variable_array .)
    MULTIPLY        reduce using rule 39 (variable -> id_saver variable_array .)
    DIVIDE          reduce using rule 39 (variable -> id_saver variable_array .)
    MODULE          reduce using rule 39 (variable -> id_saver variable_array .)
    PLUS            reduce using rule 39 (variable -> id_saver variable_array .)
    MINUS           reduce using rule 39 (variable -> id_saver variable_array .)
    GTHAN           reduce using rule 39 (variable -> id_saver variable_array .)
    EQUAL           reduce using rule 39 (variable -> id_saver variable_array .)
    NOTEQUAL        reduce using rule 39 (variable -> id_saver variable_array .)
    LTHAN           reduce using rule 39 (variable -> id_saver variable_array .)
    GORE            reduce using rule 39 (variable -> id_saver variable_array .)
    LORE            reduce using rule 39 (variable -> id_saver variable_array .)
    AND             reduce using rule 39 (variable -> id_saver variable_array .)
    OR              reduce using rule 39 (variable -> id_saver variable_array .)
    SEMICOLON       reduce using rule 39 (variable -> id_saver variable_array .)
    RPAREN          reduce using rule 39 (variable -> id_saver variable_array .)
    COMMA           reduce using rule 39 (variable -> id_saver variable_array .)
    RSQBRACKET      reduce using rule 39 (variable -> id_saver variable_array .)
    TO              reduce using rule 39 (variable -> id_saver variable_array .)


state 101

    (40) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    exp                            shift and go to state 161
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 102

    (41) variable_array -> empty .

    ASSIGN          reduce using rule 41 (variable_array -> empty .)
    POWER           reduce using rule 41 (variable_array -> empty .)
    MULTIPLY        reduce using rule 41 (variable_array -> empty .)
    DIVIDE          reduce using rule 41 (variable_array -> empty .)
    MODULE          reduce using rule 41 (variable_array -> empty .)
    PLUS            reduce using rule 41 (variable_array -> empty .)
    MINUS           reduce using rule 41 (variable_array -> empty .)
    GTHAN           reduce using rule 41 (variable_array -> empty .)
    EQUAL           reduce using rule 41 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 41 (variable_array -> empty .)
    LTHAN           reduce using rule 41 (variable_array -> empty .)
    GORE            reduce using rule 41 (variable_array -> empty .)
    LORE            reduce using rule 41 (variable_array -> empty .)
    AND             reduce using rule 41 (variable_array -> empty .)
    OR              reduce using rule 41 (variable_array -> empty .)
    SEMICOLON       reduce using rule 41 (variable_array -> empty .)
    RPAREN          reduce using rule 41 (variable_array -> empty .)
    COMMA           reduce using rule 41 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 41 (variable_array -> empty .)
    TO              reduce using rule 41 (variable_array -> empty .)


state 103

    (96) for -> FOR LPAREN . for_control keep_assign exp for_np1 for_end body for_np2
    (97) for_control -> . id_saver
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    for_control                    shift and go to state 162
    id_saver                       shift and go to state 163

state 104

    (93) while -> DO seed . body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (65) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 164

state 105

    (94) seed -> empty .

    LBRACKET        reduce using rule 94 (seed -> empty .)


state 106

    (106) function_saver -> ID empty .
    (5) id_saver -> ID empty .

    LPAREN          reduce using rule 106 (function_saver -> ID empty .)
    LSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 5 (id_saver -> ID empty .)


state 107

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN . param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (53) param -> . s_type id_saver add_params param2
    (54) param -> . empty
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR
    (4) empty -> .

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28
    RPAREN          reduce using rule 4 (empty -> .)

    param                          shift and go to state 166
    s_type                         shift and go to state 167
    empty                          shift and go to state 168

state 108

    (26) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 26 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 109

    (24) var_multiple -> var_type .

    FUNCTION        reduce using rule 24 (var_multiple -> var_type .)
    MAIN            reduce using rule 24 (var_multiple -> var_type .)
    IF              reduce using rule 24 (var_multiple -> var_type .)
    PRINT           reduce using rule 24 (var_multiple -> var_type .)
    FOR             reduce using rule 24 (var_multiple -> var_type .)
    DO              reduce using rule 24 (var_multiple -> var_type .)
    ID              reduce using rule 24 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 24 (var_multiple -> var_type .)
    RETURN          reduce using rule 24 (var_multiple -> var_type .)


state 110

    (25) var_multiple -> empty .

    FUNCTION        reduce using rule 25 (var_multiple -> empty .)
    MAIN            reduce using rule 25 (var_multiple -> empty .)
    IF              reduce using rule 25 (var_multiple -> empty .)
    PRINT           reduce using rule 25 (var_multiple -> empty .)
    FOR             reduce using rule 25 (var_multiple -> empty .)
    DO              reduce using rule 25 (var_multiple -> empty .)
    ID              reduce using rule 25 (var_multiple -> empty .)
    RBRACKET        reduce using rule 25 (var_multiple -> empty .)
    RETURN          reduce using rule 25 (var_multiple -> empty .)


state 111

    (27) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (27) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (28) var_c_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 58
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_c_type2                    shift and go to state 169
    empty                          shift and go to state 59

state 112

    (30) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (24) var_multiple -> . var_type
    (25) var_multiple -> . empty
    (15) var_type -> . var_c_type
    (16) var_type -> . var_s_type
    (4) empty -> .
    (26) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (30) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (22) c_type -> . DATAFRAME
    (23) c_type -> . DATE
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    FUNCTION        reduce using rule 4 (empty -> .)
    MAIN            reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    DATAFRAME       shift and go to state 24
    DATE            shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    s_type                         shift and go to state 23
    var_multiple                   shift and go to state 170
    var_type                       shift and go to state 109
    empty                          shift and go to state 110
    var_c_type                     shift and go to state 20
    var_s_type                     shift and go to state 21
    c_type                         shift and go to state 22

state 113

    (31) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (34) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (35) var_s_array -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 52
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_array                    shift and go to state 171
    empty                          shift and go to state 53

state 114

    (36) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (38) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 63

    var_s_dimesions                shift and go to state 172

state 115

    (34) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 34 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 34 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 116

    (37) var_s_matrix -> empty .

    COMMA           reduce using rule 37 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 37 (var_s_matrix -> empty .)


state 117

    (174) factor -> variable .

    POWER           reduce using rule 174 (factor -> variable .)
    MULTIPLY        reduce using rule 174 (factor -> variable .)
    DIVIDE          reduce using rule 174 (factor -> variable .)
    MODULE          reduce using rule 174 (factor -> variable .)
    PLUS            reduce using rule 174 (factor -> variable .)
    MINUS           reduce using rule 174 (factor -> variable .)
    GTHAN           reduce using rule 174 (factor -> variable .)
    EQUAL           reduce using rule 174 (factor -> variable .)
    NOTEQUAL        reduce using rule 174 (factor -> variable .)
    LTHAN           reduce using rule 174 (factor -> variable .)
    GORE            reduce using rule 174 (factor -> variable .)
    LORE            reduce using rule 174 (factor -> variable .)
    AND             reduce using rule 174 (factor -> variable .)
    OR              reduce using rule 174 (factor -> variable .)
    SEMICOLON       reduce using rule 174 (factor -> variable .)
    RPAREN          reduce using rule 174 (factor -> variable .)
    COMMA           reduce using rule 174 (factor -> variable .)
    RSQBRACKET      reduce using rule 174 (factor -> variable .)
    TO              reduce using rule 174 (factor -> variable .)


state 118

    (68) assign -> variable keep_assign specialf_assign . end_assign
    (73) end_assign -> . SEMICOLON empty

    SEMICOLON       shift and go to state 174

    end_assign                     shift and go to state 173

state 119

    (69) specialf_assign -> exp .

    SEMICOLON       reduce using rule 69 (specialf_assign -> exp .)


state 120

    (70) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 70 (specialf_assign -> special_function .)


state 121

    (71) specialf_assign -> read .

    SEMICOLON       reduce using rule 71 (specialf_assign -> read .)


state 122

    (140) exp -> t_exp . release_exp exp_or
    (8) release_exp -> . empty
    (4) empty -> .

    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 175
    empty                          shift and go to state 176

state 123

    (118) special_function -> exploration .

    SEMICOLON       reduce using rule 118 (special_function -> exploration .)


state 124

    (119) special_function -> financial_state .

    SEMICOLON       reduce using rule 119 (special_function -> financial_state .)


state 125

    (120) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 120 (special_function -> dummi_regression .)


state 126

    (121) special_function -> season_analysis .

    SEMICOLON       reduce using rule 121 (special_function -> season_analysis .)


state 127

    (122) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 122 (special_function -> trend_prediction .)


state 128

    (123) special_function -> model_predict .

    SEMICOLON       reduce using rule 123 (special_function -> model_predict .)


state 129

    (87) read -> np_read . LPAREN valid_exp_read read_np

    LPAREN          shift and go to state 177


state 130

    (177) false_button -> LPAREN .

    CTE_FLOAT       reduce using rule 177 (false_button -> LPAREN .)
    CTE_INT         reduce using rule 177 (false_button -> LPAREN .)
    CTE_CHAR        reduce using rule 177 (false_button -> LPAREN .)
    LPAREN          reduce using rule 177 (false_button -> LPAREN .)
    ID              reduce using rule 177 (false_button -> LPAREN .)


state 131

    (144) t_exp -> expression . release_exp t_exp_and
    (8) release_exp -> . empty
    (4) empty -> .

    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 178
    empty                          shift and go to state 176

state 132

    (124) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 179


state 133

    (129) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 180


state 134

    (132) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 181


state 135

    (130) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 182


state 136

    (131) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    LPAREN          shift and go to state 183


state 137

    (139) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 184


state 138

    (88) np_read -> READ .

    LPAREN          reduce using rule 88 (np_read -> READ .)


state 139

    (148) expression -> m_exp . release_exp expression_comp
    (8) release_exp -> . empty
    (4) empty -> .

    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 185
    empty                          shift and go to state 176

state 140

    (157) m_exp -> term . release_exp m_exp_sr
    (8) release_exp -> . empty
    (4) empty -> .

    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 186
    empty                          shift and go to state 176

state 141

    (162) term -> sub_factor . release_exp term_pc
    (8) release_exp -> . empty
    (4) empty -> .

    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 187
    empty                          shift and go to state 176

state 142

    (168) sub_factor -> factor . release_exp sub_factor_pc
    (8) release_exp -> . empty
    (4) empty -> .

    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 188
    empty                          shift and go to state 176

state 143

    (172) factor -> factor_exp .

    POWER           reduce using rule 172 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 172 (factor -> factor_exp .)
    DIVIDE          reduce using rule 172 (factor -> factor_exp .)
    MODULE          reduce using rule 172 (factor -> factor_exp .)
    PLUS            reduce using rule 172 (factor -> factor_exp .)
    MINUS           reduce using rule 172 (factor -> factor_exp .)
    GTHAN           reduce using rule 172 (factor -> factor_exp .)
    EQUAL           reduce using rule 172 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 172 (factor -> factor_exp .)
    LTHAN           reduce using rule 172 (factor -> factor_exp .)
    GORE            reduce using rule 172 (factor -> factor_exp .)
    LORE            reduce using rule 172 (factor -> factor_exp .)
    AND             reduce using rule 172 (factor -> factor_exp .)
    OR              reduce using rule 172 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 172 (factor -> factor_exp .)
    RPAREN          reduce using rule 172 (factor -> factor_exp .)
    COMMA           reduce using rule 172 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 172 (factor -> factor_exp .)
    TO              reduce using rule 172 (factor -> factor_exp .)


state 144

    (173) factor -> factor_cte .

    POWER           reduce using rule 173 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 173 (factor -> factor_cte .)
    DIVIDE          reduce using rule 173 (factor -> factor_cte .)
    MODULE          reduce using rule 173 (factor -> factor_cte .)
    PLUS            reduce using rule 173 (factor -> factor_cte .)
    MINUS           reduce using rule 173 (factor -> factor_cte .)
    GTHAN           reduce using rule 173 (factor -> factor_cte .)
    EQUAL           reduce using rule 173 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 173 (factor -> factor_cte .)
    LTHAN           reduce using rule 173 (factor -> factor_cte .)
    GORE            reduce using rule 173 (factor -> factor_cte .)
    LORE            reduce using rule 173 (factor -> factor_cte .)
    AND             reduce using rule 173 (factor -> factor_cte .)
    OR              reduce using rule 173 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 173 (factor -> factor_cte .)
    RPAREN          reduce using rule 173 (factor -> factor_cte .)
    COMMA           reduce using rule 173 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 173 (factor -> factor_cte .)
    TO              reduce using rule 173 (factor -> factor_cte .)


state 145

    (175) factor -> call_function .

    POWER           reduce using rule 175 (factor -> call_function .)
    MULTIPLY        reduce using rule 175 (factor -> call_function .)
    DIVIDE          reduce using rule 175 (factor -> call_function .)
    MODULE          reduce using rule 175 (factor -> call_function .)
    PLUS            reduce using rule 175 (factor -> call_function .)
    MINUS           reduce using rule 175 (factor -> call_function .)
    GTHAN           reduce using rule 175 (factor -> call_function .)
    EQUAL           reduce using rule 175 (factor -> call_function .)
    NOTEQUAL        reduce using rule 175 (factor -> call_function .)
    LTHAN           reduce using rule 175 (factor -> call_function .)
    GORE            reduce using rule 175 (factor -> call_function .)
    LORE            reduce using rule 175 (factor -> call_function .)
    AND             reduce using rule 175 (factor -> call_function .)
    OR              reduce using rule 175 (factor -> call_function .)
    SEMICOLON       reduce using rule 175 (factor -> call_function .)
    RPAREN          reduce using rule 175 (factor -> call_function .)
    COMMA           reduce using rule 175 (factor -> call_function .)
    RSQBRACKET      reduce using rule 175 (factor -> call_function .)
    TO              reduce using rule 175 (factor -> call_function .)


state 146

    (176) factor_exp -> false_button . exp release_false_button
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    false_button                   shift and go to state 146
    exp                            shift and go to state 189
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 147

    (179) factor_cte -> CTE_FLOAT .

    POWER           reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    MODULE          reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    GORE            reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    LORE            reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 179 (factor_cte -> CTE_FLOAT .)
    TO              reduce using rule 179 (factor_cte -> CTE_FLOAT .)


state 148

    (180) factor_cte -> CTE_INT .

    POWER           reduce using rule 180 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 180 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 180 (factor_cte -> CTE_INT .)
    MODULE          reduce using rule 180 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 180 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 180 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 180 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 180 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 180 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 180 (factor_cte -> CTE_INT .)
    GORE            reduce using rule 180 (factor_cte -> CTE_INT .)
    LORE            reduce using rule 180 (factor_cte -> CTE_INT .)
    AND             reduce using rule 180 (factor_cte -> CTE_INT .)
    OR              reduce using rule 180 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 180 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 180 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 180 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 180 (factor_cte -> CTE_INT .)
    TO              reduce using rule 180 (factor_cte -> CTE_INT .)


state 149

    (181) factor_cte -> CTE_CHAR .

    POWER           reduce using rule 181 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 181 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 181 (factor_cte -> CTE_CHAR .)
    MODULE          reduce using rule 181 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 181 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 181 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 181 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 181 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 181 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 181 (factor_cte -> CTE_CHAR .)
    GORE            reduce using rule 181 (factor_cte -> CTE_CHAR .)
    LORE            reduce using rule 181 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 181 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 181 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 181 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 181 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 181 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 181 (factor_cte -> CTE_CHAR .)
    TO              reduce using rule 181 (factor_cte -> CTE_CHAR .)


state 150

    (101) call_function -> function_saver . function_flag call_params check_not_void
    (107) function_flag -> . LPAREN

    LPAREN          shift and go to state 99

    function_flag                  shift and go to state 190

state 151

    (5) id_saver -> ID . empty
    (106) function_saver -> ID . empty
    (4) empty -> .

    LSQBRACKET      reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 191

state 152

    (72) keep_assign -> ASSIGN empty .

    EXPLORATION     reduce using rule 72 (keep_assign -> ASSIGN empty .)
    FINANCIAL_STATE reduce using rule 72 (keep_assign -> ASSIGN empty .)
    DUMMI_REGRESSION reduce using rule 72 (keep_assign -> ASSIGN empty .)
    SEASON_ANALYSIS reduce using rule 72 (keep_assign -> ASSIGN empty .)
    TREND_PREDICTION reduce using rule 72 (keep_assign -> ASSIGN empty .)
    MODEL_PREDICT   reduce using rule 72 (keep_assign -> ASSIGN empty .)
    READ            reduce using rule 72 (keep_assign -> ASSIGN empty .)
    CTE_FLOAT       reduce using rule 72 (keep_assign -> ASSIGN empty .)
    CTE_INT         reduce using rule 72 (keep_assign -> ASSIGN empty .)
    CTE_CHAR        reduce using rule 72 (keep_assign -> ASSIGN empty .)
    LPAREN          reduce using rule 72 (keep_assign -> ASSIGN empty .)
    ID              reduce using rule 72 (keep_assign -> ASSIGN empty .)


state 153

    (74) condition -> IF LPAREN exp . RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    RPAREN          shift and go to state 192


state 154

    (80) print -> PRINT LPAREN print_many . RPAREN SEMICOLON end_print_np

    RPAREN          shift and go to state 193


state 155

    (82) print_many -> print_type . print_many2
    (83) print_many2 -> . COMMA print_many_np print_many
    (84) print_many2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 4 (empty -> .)

    print_many2                    shift and go to state 194
    empty                          shift and go to state 196

state 156

    (81) print_type -> exp .

    COMMA           reduce using rule 81 (print_type -> exp .)
    RPAREN          reduce using rule 81 (print_type -> exp .)


state 157

    (103) call_void_function -> function_saver function_flag call_params . verify_params check_void
    (104) verify_params -> . RPAREN

    RPAREN          shift and go to state 198

    verify_params                  shift and go to state 197

state 158

    (108) call_params -> check_param . exp_many
    (111) exp_many -> . COMMA check_param exp_many
    (112) exp_many -> . empty
    (4) empty -> .

    COMMA           shift and go to state 200
    RPAREN          reduce using rule 4 (empty -> .)

    exp_many                       shift and go to state 199
    empty                          shift and go to state 201

state 159

    (109) call_params -> empty .

    RPAREN          reduce using rule 109 (call_params -> empty .)


state 160

    (110) check_param -> exp .

    COMMA           reduce using rule 110 (check_param -> exp .)
    RPAREN          reduce using rule 110 (check_param -> exp .)


state 161

    (40) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 202


state 162

    (96) for -> FOR LPAREN for_control . keep_assign exp for_np1 for_end body for_np2
    (72) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 95

    keep_assign                    shift and go to state 203

state 163

    (97) for_control -> id_saver .

    ASSIGN          reduce using rule 97 (for_control -> id_saver .)


state 164

    (93) while -> DO seed body . WHILE LPAREN exp RPAREN SEMICOLON gotoV

    WHILE           shift and go to state 204


state 165

    (65) body -> LBRACKET . inner_body RBRACKET
    (66) inner_body -> . statement inner_body
    (67) inner_body -> . empty
    (113) statement -> . assign
    (114) statement -> . condition
    (115) statement -> . print
    (116) statement -> . cycle
    (117) statement -> . call_void_function
    (4) empty -> .
    (68) assign -> . variable keep_assign specialf_assign end_assign
    (74) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (80) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (91) cycle -> . for
    (92) cycle -> . while
    (103) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . id_saver variable_array
    (96) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (93) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (106) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    inner_body                     shift and go to state 205
    statement                      shift and go to state 66
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78
    id_saver                       shift and go to state 79

state 166

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param . RPAREN add_func_glob program_vars inner_body return end_function program_function

    RPAREN          shift and go to state 206


state 167

    (53) param -> s_type . id_saver add_params param2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 207

state 168

    (54) param -> empty .

    RPAREN          reduce using rule 54 (param -> empty .)


state 169

    (27) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 27 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 170

    (30) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 30 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 171

    (31) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (33) add_s_var -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)

    add_s_var                      shift and go to state 208
    empty                          shift and go to state 61

state 172

    (36) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 209


state 173

    (68) assign -> variable keep_assign specialf_assign end_assign .

    IF              reduce using rule 68 (assign -> variable keep_assign specialf_assign end_assign .)
    PRINT           reduce using rule 68 (assign -> variable keep_assign specialf_assign end_assign .)
    FOR             reduce using rule 68 (assign -> variable keep_assign specialf_assign end_assign .)
    DO              reduce using rule 68 (assign -> variable keep_assign specialf_assign end_assign .)
    ID              reduce using rule 68 (assign -> variable keep_assign specialf_assign end_assign .)
    RBRACKET        reduce using rule 68 (assign -> variable keep_assign specialf_assign end_assign .)
    RETURN          reduce using rule 68 (assign -> variable keep_assign specialf_assign end_assign .)


state 174

    (73) end_assign -> SEMICOLON . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 210

state 175

    (140) exp -> t_exp release_exp . exp_or
    (141) exp_or -> . exp_keep_or exp
    (142) exp_or -> . empty
    (143) exp_keep_or -> . OR
    (4) empty -> .

    OR              shift and go to state 214
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    exp_or                         shift and go to state 211
    exp_keep_or                    shift and go to state 212
    empty                          shift and go to state 213

state 176

    (8) release_exp -> empty .

    OR              reduce using rule 8 (release_exp -> empty .)
    SEMICOLON       reduce using rule 8 (release_exp -> empty .)
    RPAREN          reduce using rule 8 (release_exp -> empty .)
    COMMA           reduce using rule 8 (release_exp -> empty .)
    RSQBRACKET      reduce using rule 8 (release_exp -> empty .)
    TO              reduce using rule 8 (release_exp -> empty .)
    AND             reduce using rule 8 (release_exp -> empty .)
    GTHAN           reduce using rule 8 (release_exp -> empty .)
    EQUAL           reduce using rule 8 (release_exp -> empty .)
    NOTEQUAL        reduce using rule 8 (release_exp -> empty .)
    LTHAN           reduce using rule 8 (release_exp -> empty .)
    GORE            reduce using rule 8 (release_exp -> empty .)
    LORE            reduce using rule 8 (release_exp -> empty .)
    PLUS            reduce using rule 8 (release_exp -> empty .)
    MINUS           reduce using rule 8 (release_exp -> empty .)
    MULTIPLY        reduce using rule 8 (release_exp -> empty .)
    DIVIDE          reduce using rule 8 (release_exp -> empty .)
    MODULE          reduce using rule 8 (release_exp -> empty .)
    POWER           reduce using rule 8 (release_exp -> empty .)


state 177

    (87) read -> np_read LPAREN . valid_exp_read read_np
    (89) valid_exp_read -> . exp
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    valid_exp_read                 shift and go to state 215
    exp                            shift and go to state 216
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 178

    (144) t_exp -> expression release_exp . t_exp_and
    (145) t_exp_and -> . keep_and t_exp
    (146) t_exp_and -> . empty
    (147) keep_and -> . AND
    (4) empty -> .

    AND             shift and go to state 220
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    t_exp_and                      shift and go to state 217
    keep_and                       shift and go to state 218
    empty                          shift and go to state 219

state 179

    (124) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 221
    id_saver                       shift and go to state 79

state 180

    (129) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 222
    id_saver                       shift and go to state 79

state 181

    (132) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 223
    id_saver                       shift and go to state 79

state 182

    (130) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 224
    id_saver                       shift and go to state 79

state 183

    (131) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 225
    id_saver                       shift and go to state 79

state 184

    (139) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 226
    id_saver                       shift and go to state 79

state 185

    (148) expression -> m_exp release_exp . expression_comp
    (149) expression_comp -> . expression_comp_2 m_exp release_exp
    (150) expression_comp -> . empty
    (151) expression_comp_2 -> . GTHAN
    (152) expression_comp_2 -> . EQUAL
    (153) expression_comp_2 -> . NOTEQUAL
    (154) expression_comp_2 -> . LTHAN
    (155) expression_comp_2 -> . GORE
    (156) expression_comp_2 -> . LORE
    (4) empty -> .

    GTHAN           shift and go to state 230
    EQUAL           shift and go to state 231
    NOTEQUAL        shift and go to state 232
    LTHAN           shift and go to state 233
    GORE            shift and go to state 234
    LORE            shift and go to state 235
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    expression_comp                shift and go to state 227
    expression_comp_2              shift and go to state 228
    empty                          shift and go to state 229

state 186

    (157) m_exp -> term release_exp . m_exp_sr
    (158) m_exp_sr -> . m_exp_sr_2 m_exp
    (159) m_exp_sr -> . empty
    (160) m_exp_sr_2 -> . PLUS
    (161) m_exp_sr_2 -> . MINUS
    (4) empty -> .

    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    m_exp_sr                       shift and go to state 236
    m_exp_sr_2                     shift and go to state 237
    empty                          shift and go to state 238

state 187

    (162) term -> sub_factor release_exp . term_pc
    (163) term_pc -> . term_pc_2 term
    (164) term_pc -> . empty
    (165) term_pc_2 -> . MULTIPLY
    (166) term_pc_2 -> . DIVIDE
    (167) term_pc_2 -> . MODULE
    (4) empty -> .

    MULTIPLY        shift and go to state 244
    DIVIDE          shift and go to state 245
    MODULE          shift and go to state 246
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    term_pc                        shift and go to state 241
    term_pc_2                      shift and go to state 242
    empty                          shift and go to state 243

state 188

    (168) sub_factor -> factor release_exp . sub_factor_pc
    (169) sub_factor_pc -> . sub_factor_pc_2 sub_factor
    (170) sub_factor_pc -> . empty
    (171) sub_factor_pc_2 -> . POWER empty
    (4) empty -> .

    POWER           shift and go to state 250
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    sub_factor_pc                  shift and go to state 247
    sub_factor_pc_2                shift and go to state 248
    empty                          shift and go to state 249

state 189

    (176) factor_exp -> false_button exp . release_false_button
    (178) release_false_button -> . RPAREN

    RPAREN          shift and go to state 252

    release_false_button           shift and go to state 251

state 190

    (101) call_function -> function_saver function_flag . call_params check_not_void
    (108) call_params -> . check_param exp_many
    (109) call_params -> . empty
    (110) check_param -> . exp
    (4) empty -> .
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    RPAREN          reduce using rule 4 (empty -> .)
    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    function_saver                 shift and go to state 150
    call_params                    shift and go to state 253
    check_param                    shift and go to state 158
    empty                          shift and go to state 159
    exp                            shift and go to state 160
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79

state 191

    (5) id_saver -> ID empty .
    (106) function_saver -> ID empty .

    LSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    POWER           reduce using rule 5 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 5 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 5 (id_saver -> ID empty .)
    MODULE          reduce using rule 5 (id_saver -> ID empty .)
    PLUS            reduce using rule 5 (id_saver -> ID empty .)
    MINUS           reduce using rule 5 (id_saver -> ID empty .)
    GTHAN           reduce using rule 5 (id_saver -> ID empty .)
    EQUAL           reduce using rule 5 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 5 (id_saver -> ID empty .)
    LTHAN           reduce using rule 5 (id_saver -> ID empty .)
    GORE            reduce using rule 5 (id_saver -> ID empty .)
    LORE            reduce using rule 5 (id_saver -> ID empty .)
    AND             reduce using rule 5 (id_saver -> ID empty .)
    OR              reduce using rule 5 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 5 (id_saver -> ID empty .)
    RPAREN          reduce using rule 5 (id_saver -> ID empty .)
    COMMA           reduce using rule 5 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 5 (id_saver -> ID empty .)
    TO              reduce using rule 5 (id_saver -> ID empty .)
    LPAREN          reduce using rule 106 (function_saver -> ID empty .)


state 192

    (74) condition -> IF LPAREN exp RPAREN . condition_GOTOF body condition2 SEMICOLON end_condition
    (77) condition_GOTOF -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    condition_GOTOF                shift and go to state 254
    empty                          shift and go to state 255

state 193

    (80) print -> PRINT LPAREN print_many RPAREN . SEMICOLON end_print_np

    SEMICOLON       shift and go to state 256


state 194

    (82) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 82 (print_many -> print_type print_many2 .)


state 195

    (83) print_many2 -> COMMA . print_many_np print_many
    (85) print_many_np -> . empty
    (4) empty -> .

    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    print_many_np                  shift and go to state 257
    empty                          shift and go to state 258

state 196

    (84) print_many2 -> empty .

    RPAREN          reduce using rule 84 (print_many2 -> empty .)


state 197

    (103) call_void_function -> function_saver function_flag call_params verify_params . check_void
    (105) check_void -> . SEMICOLON

    SEMICOLON       shift and go to state 260

    check_void                     shift and go to state 259

state 198

    (104) verify_params -> RPAREN .

    SEMICOLON       reduce using rule 104 (verify_params -> RPAREN .)


state 199

    (108) call_params -> check_param exp_many .

    RPAREN          reduce using rule 108 (call_params -> check_param exp_many .)


state 200

    (111) exp_many -> COMMA . check_param exp_many
    (110) check_param -> . exp
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    check_param                    shift and go to state 261
    exp                            shift and go to state 160
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 201

    (112) exp_many -> empty .

    RPAREN          reduce using rule 112 (exp_many -> empty .)


state 202

    (40) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (42) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (43) variable_matrix -> . empty
    (4) empty -> .

    LSQBRACKET      shift and go to state 262
    ASSIGN          reduce using rule 4 (empty -> .)
    POWER           reduce using rule 4 (empty -> .)
    MULTIPLY        reduce using rule 4 (empty -> .)
    DIVIDE          reduce using rule 4 (empty -> .)
    MODULE          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GTHAN           reduce using rule 4 (empty -> .)
    EQUAL           reduce using rule 4 (empty -> .)
    NOTEQUAL        reduce using rule 4 (empty -> .)
    LTHAN           reduce using rule 4 (empty -> .)
    GORE            reduce using rule 4 (empty -> .)
    LORE            reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    variable_matrix                shift and go to state 263
    empty                          shift and go to state 264

state 203

    (96) for -> FOR LPAREN for_control keep_assign . exp for_np1 for_end body for_np2
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    exp                            shift and go to state 265
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 204

    (93) while -> DO seed body WHILE . LPAREN exp RPAREN SEMICOLON gotoV

    LPAREN          shift and go to state 266


state 205

    (65) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 267


state 206

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN . add_func_glob program_vars inner_body return end_function program_function
    (51) add_func_glob -> . LBRACKET

    LBRACKET        shift and go to state 269

    add_func_glob                  shift and go to state 268

state 207

    (53) param -> s_type id_saver . add_params param2
    (57) add_params -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    add_params                     shift and go to state 270
    empty                          shift and go to state 271

state 208

    (31) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (31) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (32) var_s_type2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 88
    SEMICOLON       reduce using rule 4 (empty -> .)

    var_s_type2                    shift and go to state 272
    empty                          shift and go to state 89

state 209

    (36) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 36 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 36 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 210

    (73) end_assign -> SEMICOLON empty .

    IF              reduce using rule 73 (end_assign -> SEMICOLON empty .)
    PRINT           reduce using rule 73 (end_assign -> SEMICOLON empty .)
    FOR             reduce using rule 73 (end_assign -> SEMICOLON empty .)
    DO              reduce using rule 73 (end_assign -> SEMICOLON empty .)
    ID              reduce using rule 73 (end_assign -> SEMICOLON empty .)
    RBRACKET        reduce using rule 73 (end_assign -> SEMICOLON empty .)
    RETURN          reduce using rule 73 (end_assign -> SEMICOLON empty .)


state 211

    (140) exp -> t_exp release_exp exp_or .

    SEMICOLON       reduce using rule 140 (exp -> t_exp release_exp exp_or .)
    RPAREN          reduce using rule 140 (exp -> t_exp release_exp exp_or .)
    COMMA           reduce using rule 140 (exp -> t_exp release_exp exp_or .)
    RSQBRACKET      reduce using rule 140 (exp -> t_exp release_exp exp_or .)
    TO              reduce using rule 140 (exp -> t_exp release_exp exp_or .)


state 212

    (141) exp_or -> exp_keep_or . exp
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    exp                            shift and go to state 273
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 213

    (142) exp_or -> empty .

    SEMICOLON       reduce using rule 142 (exp_or -> empty .)
    RPAREN          reduce using rule 142 (exp_or -> empty .)
    COMMA           reduce using rule 142 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 142 (exp_or -> empty .)
    TO              reduce using rule 142 (exp_or -> empty .)


state 214

    (143) exp_keep_or -> OR .

    CTE_FLOAT       reduce using rule 143 (exp_keep_or -> OR .)
    CTE_INT         reduce using rule 143 (exp_keep_or -> OR .)
    CTE_CHAR        reduce using rule 143 (exp_keep_or -> OR .)
    LPAREN          reduce using rule 143 (exp_keep_or -> OR .)
    ID              reduce using rule 143 (exp_keep_or -> OR .)


state 215

    (87) read -> np_read LPAREN valid_exp_read . read_np
    (90) read_np -> . RPAREN

    RPAREN          shift and go to state 275

    read_np                        shift and go to state 274

state 216

    (89) valid_exp_read -> exp .

    RPAREN          reduce using rule 89 (valid_exp_read -> exp .)


state 217

    (144) t_exp -> expression release_exp t_exp_and .

    OR              reduce using rule 144 (t_exp -> expression release_exp t_exp_and .)
    SEMICOLON       reduce using rule 144 (t_exp -> expression release_exp t_exp_and .)
    RPAREN          reduce using rule 144 (t_exp -> expression release_exp t_exp_and .)
    COMMA           reduce using rule 144 (t_exp -> expression release_exp t_exp_and .)
    RSQBRACKET      reduce using rule 144 (t_exp -> expression release_exp t_exp_and .)
    TO              reduce using rule 144 (t_exp -> expression release_exp t_exp_and .)


state 218

    (145) t_exp_and -> keep_and . t_exp
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    t_exp                          shift and go to state 276
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 219

    (146) t_exp_and -> empty .

    OR              reduce using rule 146 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 146 (t_exp_and -> empty .)
    RPAREN          reduce using rule 146 (t_exp_and -> empty .)
    COMMA           reduce using rule 146 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 146 (t_exp_and -> empty .)
    TO              reduce using rule 146 (t_exp_and -> empty .)


state 220

    (147) keep_and -> AND .

    CTE_FLOAT       reduce using rule 147 (keep_and -> AND .)
    CTE_INT         reduce using rule 147 (keep_and -> AND .)
    CTE_CHAR        reduce using rule 147 (keep_and -> AND .)
    LPAREN          reduce using rule 147 (keep_and -> AND .)
    ID              reduce using rule 147 (keep_and -> AND .)


state 221

    (124) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (125) explore_var -> . COMMA variable
    (126) explore_var -> . empty
    (4) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 278
    RPAREN          reduce using rule 4 (empty -> .)

  ! COMMA           [ reduce using rule 4 (empty -> .) ]

    explore_var                    shift and go to state 277
    empty                          shift and go to state 279

state 222

    (129) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 280


state 223

    (132) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 281


state 224

    (130) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 282


state 225

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 283


state 226

    (139) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 284


state 227

    (148) expression -> m_exp release_exp expression_comp .

    AND             reduce using rule 148 (expression -> m_exp release_exp expression_comp .)
    OR              reduce using rule 148 (expression -> m_exp release_exp expression_comp .)
    SEMICOLON       reduce using rule 148 (expression -> m_exp release_exp expression_comp .)
    RPAREN          reduce using rule 148 (expression -> m_exp release_exp expression_comp .)
    COMMA           reduce using rule 148 (expression -> m_exp release_exp expression_comp .)
    RSQBRACKET      reduce using rule 148 (expression -> m_exp release_exp expression_comp .)
    TO              reduce using rule 148 (expression -> m_exp release_exp expression_comp .)


state 228

    (149) expression_comp -> expression_comp_2 . m_exp release_exp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    m_exp                          shift and go to state 285
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 229

    (150) expression_comp -> empty .

    AND             reduce using rule 150 (expression_comp -> empty .)
    OR              reduce using rule 150 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 150 (expression_comp -> empty .)
    RPAREN          reduce using rule 150 (expression_comp -> empty .)
    COMMA           reduce using rule 150 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 150 (expression_comp -> empty .)
    TO              reduce using rule 150 (expression_comp -> empty .)


state 230

    (151) expression_comp_2 -> GTHAN .

    CTE_FLOAT       reduce using rule 151 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 151 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 151 (expression_comp_2 -> GTHAN .)
    LPAREN          reduce using rule 151 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 151 (expression_comp_2 -> GTHAN .)


state 231

    (152) expression_comp_2 -> EQUAL .

    CTE_FLOAT       reduce using rule 152 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 152 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 152 (expression_comp_2 -> EQUAL .)
    LPAREN          reduce using rule 152 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 152 (expression_comp_2 -> EQUAL .)


state 232

    (153) expression_comp_2 -> NOTEQUAL .

    CTE_FLOAT       reduce using rule 153 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 153 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 153 (expression_comp_2 -> NOTEQUAL .)
    LPAREN          reduce using rule 153 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 153 (expression_comp_2 -> NOTEQUAL .)


state 233

    (154) expression_comp_2 -> LTHAN .

    CTE_FLOAT       reduce using rule 154 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 154 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 154 (expression_comp_2 -> LTHAN .)
    LPAREN          reduce using rule 154 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 154 (expression_comp_2 -> LTHAN .)


state 234

    (155) expression_comp_2 -> GORE .

    CTE_FLOAT       reduce using rule 155 (expression_comp_2 -> GORE .)
    CTE_INT         reduce using rule 155 (expression_comp_2 -> GORE .)
    CTE_CHAR        reduce using rule 155 (expression_comp_2 -> GORE .)
    LPAREN          reduce using rule 155 (expression_comp_2 -> GORE .)
    ID              reduce using rule 155 (expression_comp_2 -> GORE .)


state 235

    (156) expression_comp_2 -> LORE .

    CTE_FLOAT       reduce using rule 156 (expression_comp_2 -> LORE .)
    CTE_INT         reduce using rule 156 (expression_comp_2 -> LORE .)
    CTE_CHAR        reduce using rule 156 (expression_comp_2 -> LORE .)
    LPAREN          reduce using rule 156 (expression_comp_2 -> LORE .)
    ID              reduce using rule 156 (expression_comp_2 -> LORE .)


state 236

    (157) m_exp -> term release_exp m_exp_sr .

    GTHAN           reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    EQUAL           reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    NOTEQUAL        reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    LTHAN           reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    GORE            reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    LORE            reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    AND             reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    OR              reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    SEMICOLON       reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    RPAREN          reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    COMMA           reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    RSQBRACKET      reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)
    TO              reduce using rule 157 (m_exp -> term release_exp m_exp_sr .)


state 237

    (158) m_exp_sr -> m_exp_sr_2 . m_exp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    m_exp                          shift and go to state 286
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 238

    (159) m_exp_sr -> empty .

    GTHAN           reduce using rule 159 (m_exp_sr -> empty .)
    EQUAL           reduce using rule 159 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 159 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 159 (m_exp_sr -> empty .)
    GORE            reduce using rule 159 (m_exp_sr -> empty .)
    LORE            reduce using rule 159 (m_exp_sr -> empty .)
    AND             reduce using rule 159 (m_exp_sr -> empty .)
    OR              reduce using rule 159 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 159 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 159 (m_exp_sr -> empty .)
    COMMA           reduce using rule 159 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 159 (m_exp_sr -> empty .)
    TO              reduce using rule 159 (m_exp_sr -> empty .)


state 239

    (160) m_exp_sr_2 -> PLUS .

    CTE_FLOAT       reduce using rule 160 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 160 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 160 (m_exp_sr_2 -> PLUS .)
    LPAREN          reduce using rule 160 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 160 (m_exp_sr_2 -> PLUS .)


state 240

    (161) m_exp_sr_2 -> MINUS .

    CTE_FLOAT       reduce using rule 161 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 161 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 161 (m_exp_sr_2 -> MINUS .)
    LPAREN          reduce using rule 161 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 161 (m_exp_sr_2 -> MINUS .)


state 241

    (162) term -> sub_factor release_exp term_pc .

    PLUS            reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    MINUS           reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    GTHAN           reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    EQUAL           reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    NOTEQUAL        reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    LTHAN           reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    GORE            reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    LORE            reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    AND             reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    OR              reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    SEMICOLON       reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    RPAREN          reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    COMMA           reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    RSQBRACKET      reduce using rule 162 (term -> sub_factor release_exp term_pc .)
    TO              reduce using rule 162 (term -> sub_factor release_exp term_pc .)


state 242

    (163) term_pc -> term_pc_2 . term
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    term                           shift and go to state 287
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 243

    (164) term_pc -> empty .

    PLUS            reduce using rule 164 (term_pc -> empty .)
    MINUS           reduce using rule 164 (term_pc -> empty .)
    GTHAN           reduce using rule 164 (term_pc -> empty .)
    EQUAL           reduce using rule 164 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 164 (term_pc -> empty .)
    LTHAN           reduce using rule 164 (term_pc -> empty .)
    GORE            reduce using rule 164 (term_pc -> empty .)
    LORE            reduce using rule 164 (term_pc -> empty .)
    AND             reduce using rule 164 (term_pc -> empty .)
    OR              reduce using rule 164 (term_pc -> empty .)
    SEMICOLON       reduce using rule 164 (term_pc -> empty .)
    RPAREN          reduce using rule 164 (term_pc -> empty .)
    COMMA           reduce using rule 164 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 164 (term_pc -> empty .)
    TO              reduce using rule 164 (term_pc -> empty .)


state 244

    (165) term_pc_2 -> MULTIPLY .

    CTE_FLOAT       reduce using rule 165 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 165 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 165 (term_pc_2 -> MULTIPLY .)
    LPAREN          reduce using rule 165 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 165 (term_pc_2 -> MULTIPLY .)


state 245

    (166) term_pc_2 -> DIVIDE .

    CTE_FLOAT       reduce using rule 166 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 166 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 166 (term_pc_2 -> DIVIDE .)
    LPAREN          reduce using rule 166 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 166 (term_pc_2 -> DIVIDE .)


state 246

    (167) term_pc_2 -> MODULE .

    CTE_FLOAT       reduce using rule 167 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 167 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 167 (term_pc_2 -> MODULE .)
    LPAREN          reduce using rule 167 (term_pc_2 -> MODULE .)
    ID              reduce using rule 167 (term_pc_2 -> MODULE .)


state 247

    (168) sub_factor -> factor release_exp sub_factor_pc .

    MULTIPLY        reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    DIVIDE          reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    MODULE          reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    PLUS            reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    MINUS           reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    GTHAN           reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    EQUAL           reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    NOTEQUAL        reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    LTHAN           reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    GORE            reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    LORE            reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    AND             reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    OR              reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    SEMICOLON       reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    RPAREN          reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    COMMA           reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    RSQBRACKET      reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)
    TO              reduce using rule 168 (sub_factor -> factor release_exp sub_factor_pc .)


state 248

    (169) sub_factor_pc -> sub_factor_pc_2 . sub_factor
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    sub_factor                     shift and go to state 288
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 249

    (170) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 170 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 170 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 170 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 170 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 170 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 170 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 170 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 170 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 170 (sub_factor_pc -> empty .)
    GORE            reduce using rule 170 (sub_factor_pc -> empty .)
    LORE            reduce using rule 170 (sub_factor_pc -> empty .)
    AND             reduce using rule 170 (sub_factor_pc -> empty .)
    OR              reduce using rule 170 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 170 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 170 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 170 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 170 (sub_factor_pc -> empty .)
    TO              reduce using rule 170 (sub_factor_pc -> empty .)


state 250

    (171) sub_factor_pc_2 -> POWER . empty
    (4) empty -> .

    CTE_FLOAT       reduce using rule 4 (empty -> .)
    CTE_INT         reduce using rule 4 (empty -> .)
    CTE_CHAR        reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)

    empty                          shift and go to state 289

state 251

    (176) factor_exp -> false_button exp release_false_button .

    POWER           reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    MULTIPLY        reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    DIVIDE          reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    MODULE          reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    PLUS            reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    MINUS           reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    GTHAN           reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    EQUAL           reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    NOTEQUAL        reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    LTHAN           reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    GORE            reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    LORE            reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    AND             reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    OR              reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    SEMICOLON       reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    RPAREN          reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    COMMA           reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    RSQBRACKET      reduce using rule 176 (factor_exp -> false_button exp release_false_button .)
    TO              reduce using rule 176 (factor_exp -> false_button exp release_false_button .)


state 252

    (178) release_false_button -> RPAREN .

    POWER           reduce using rule 178 (release_false_button -> RPAREN .)
    MULTIPLY        reduce using rule 178 (release_false_button -> RPAREN .)
    DIVIDE          reduce using rule 178 (release_false_button -> RPAREN .)
    MODULE          reduce using rule 178 (release_false_button -> RPAREN .)
    PLUS            reduce using rule 178 (release_false_button -> RPAREN .)
    MINUS           reduce using rule 178 (release_false_button -> RPAREN .)
    GTHAN           reduce using rule 178 (release_false_button -> RPAREN .)
    EQUAL           reduce using rule 178 (release_false_button -> RPAREN .)
    NOTEQUAL        reduce using rule 178 (release_false_button -> RPAREN .)
    LTHAN           reduce using rule 178 (release_false_button -> RPAREN .)
    GORE            reduce using rule 178 (release_false_button -> RPAREN .)
    LORE            reduce using rule 178 (release_false_button -> RPAREN .)
    AND             reduce using rule 178 (release_false_button -> RPAREN .)
    OR              reduce using rule 178 (release_false_button -> RPAREN .)
    SEMICOLON       reduce using rule 178 (release_false_button -> RPAREN .)
    RPAREN          reduce using rule 178 (release_false_button -> RPAREN .)
    COMMA           reduce using rule 178 (release_false_button -> RPAREN .)
    RSQBRACKET      reduce using rule 178 (release_false_button -> RPAREN .)
    TO              reduce using rule 178 (release_false_button -> RPAREN .)


state 253

    (101) call_function -> function_saver function_flag call_params . check_not_void
    (102) check_not_void -> . RPAREN

    RPAREN          shift and go to state 291

    check_not_void                 shift and go to state 290

state 254

    (74) condition -> IF LPAREN exp RPAREN condition_GOTOF . body condition2 SEMICOLON end_condition
    (65) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 292

state 255

    (77) condition_GOTOF -> empty .

    LBRACKET        reduce using rule 77 (condition_GOTOF -> empty .)


state 256

    (80) print -> PRINT LPAREN print_many RPAREN SEMICOLON . end_print_np
    (86) end_print_np -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    end_print_np                   shift and go to state 293
    empty                          shift and go to state 294

state 257

    (83) print_many2 -> COMMA print_many_np . print_many
    (82) print_many -> . print_type print_many2
    (81) print_type -> . exp
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    print_many                     shift and go to state 295
    print_type                     shift and go to state 155
    exp                            shift and go to state 156
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 258

    (85) print_many_np -> empty .

    CTE_FLOAT       reduce using rule 85 (print_many_np -> empty .)
    CTE_INT         reduce using rule 85 (print_many_np -> empty .)
    CTE_CHAR        reduce using rule 85 (print_many_np -> empty .)
    LPAREN          reduce using rule 85 (print_many_np -> empty .)
    ID              reduce using rule 85 (print_many_np -> empty .)


state 259

    (103) call_void_function -> function_saver function_flag call_params verify_params check_void .

    IF              reduce using rule 103 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    PRINT           reduce using rule 103 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    FOR             reduce using rule 103 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    DO              reduce using rule 103 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    ID              reduce using rule 103 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    RBRACKET        reduce using rule 103 (call_void_function -> function_saver function_flag call_params verify_params check_void .)
    RETURN          reduce using rule 103 (call_void_function -> function_saver function_flag call_params verify_params check_void .)


state 260

    (105) check_void -> SEMICOLON .

    IF              reduce using rule 105 (check_void -> SEMICOLON .)
    PRINT           reduce using rule 105 (check_void -> SEMICOLON .)
    FOR             reduce using rule 105 (check_void -> SEMICOLON .)
    DO              reduce using rule 105 (check_void -> SEMICOLON .)
    ID              reduce using rule 105 (check_void -> SEMICOLON .)
    RBRACKET        reduce using rule 105 (check_void -> SEMICOLON .)
    RETURN          reduce using rule 105 (check_void -> SEMICOLON .)


state 261

    (111) exp_many -> COMMA check_param . exp_many
    (111) exp_many -> . COMMA check_param exp_many
    (112) exp_many -> . empty
    (4) empty -> .

    COMMA           shift and go to state 200
    RPAREN          reduce using rule 4 (empty -> .)

    exp_many                       shift and go to state 296
    empty                          shift and go to state 201

state 262

    (42) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    exp                            shift and go to state 297
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 263

    (40) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    POWER           reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GORE            reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LORE            reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    TO              reduce using rule 40 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 264

    (43) variable_matrix -> empty .

    ASSIGN          reduce using rule 43 (variable_matrix -> empty .)
    POWER           reduce using rule 43 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 43 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 43 (variable_matrix -> empty .)
    MODULE          reduce using rule 43 (variable_matrix -> empty .)
    PLUS            reduce using rule 43 (variable_matrix -> empty .)
    MINUS           reduce using rule 43 (variable_matrix -> empty .)
    GTHAN           reduce using rule 43 (variable_matrix -> empty .)
    EQUAL           reduce using rule 43 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 43 (variable_matrix -> empty .)
    LTHAN           reduce using rule 43 (variable_matrix -> empty .)
    GORE            reduce using rule 43 (variable_matrix -> empty .)
    LORE            reduce using rule 43 (variable_matrix -> empty .)
    AND             reduce using rule 43 (variable_matrix -> empty .)
    OR              reduce using rule 43 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 43 (variable_matrix -> empty .)
    RPAREN          reduce using rule 43 (variable_matrix -> empty .)
    COMMA           reduce using rule 43 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 43 (variable_matrix -> empty .)
    TO              reduce using rule 43 (variable_matrix -> empty .)


state 265

    (96) for -> FOR LPAREN for_control keep_assign exp . for_np1 for_end body for_np2
    (98) for_np1 -> . TO

    TO              shift and go to state 299

    for_np1                        shift and go to state 298

state 266

    (93) while -> DO seed body WHILE LPAREN . exp RPAREN SEMICOLON gotoV
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    exp                            shift and go to state 300
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 267

    (65) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 65 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 65 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 65 (body -> LBRACKET inner_body RBRACKET .)


state 268

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob . program_vars inner_body return end_function program_function
    (17) program_vars -> . VAR var_type
    (18) program_vars -> . empty
    (4) empty -> .

    VAR             shift and go to state 11
    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)

    program_vars                   shift and go to state 301
    empty                          shift and go to state 12

state 269

    (51) add_func_glob -> LBRACKET .

    VAR             reduce using rule 51 (add_func_glob -> LBRACKET .)
    IF              reduce using rule 51 (add_func_glob -> LBRACKET .)
    PRINT           reduce using rule 51 (add_func_glob -> LBRACKET .)
    FOR             reduce using rule 51 (add_func_glob -> LBRACKET .)
    DO              reduce using rule 51 (add_func_glob -> LBRACKET .)
    ID              reduce using rule 51 (add_func_glob -> LBRACKET .)
    RETURN          reduce using rule 51 (add_func_glob -> LBRACKET .)
    RBRACKET        reduce using rule 51 (add_func_glob -> LBRACKET .)


state 270

    (53) param -> s_type id_saver add_params . param2
    (55) param2 -> . COMMA s_type id_saver add_params param2
    (56) param2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 303
    RPAREN          reduce using rule 4 (empty -> .)

    param2                         shift and go to state 302
    empty                          shift and go to state 304

state 271

    (57) add_params -> empty .

    COMMA           reduce using rule 57 (add_params -> empty .)
    RPAREN          reduce using rule 57 (add_params -> empty .)


state 272

    (31) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 31 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 273

    (141) exp_or -> exp_keep_or exp .

    SEMICOLON       reduce using rule 141 (exp_or -> exp_keep_or exp .)
    RPAREN          reduce using rule 141 (exp_or -> exp_keep_or exp .)
    COMMA           reduce using rule 141 (exp_or -> exp_keep_or exp .)
    RSQBRACKET      reduce using rule 141 (exp_or -> exp_keep_or exp .)
    TO              reduce using rule 141 (exp_or -> exp_keep_or exp .)


state 274

    (87) read -> np_read LPAREN valid_exp_read read_np .

    SEMICOLON       reduce using rule 87 (read -> np_read LPAREN valid_exp_read read_np .)


state 275

    (90) read_np -> RPAREN .

    SEMICOLON       reduce using rule 90 (read_np -> RPAREN .)


state 276

    (145) t_exp_and -> keep_and t_exp .

    OR              reduce using rule 145 (t_exp_and -> keep_and t_exp .)
    SEMICOLON       reduce using rule 145 (t_exp_and -> keep_and t_exp .)
    RPAREN          reduce using rule 145 (t_exp_and -> keep_and t_exp .)
    COMMA           reduce using rule 145 (t_exp_and -> keep_and t_exp .)
    RSQBRACKET      reduce using rule 145 (t_exp_and -> keep_and t_exp .)
    TO              reduce using rule 145 (t_exp_and -> keep_and t_exp .)


state 277

    (124) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (127) explor_cte -> . COMMA int_const_saver
    (128) explor_cte -> . empty
    (4) empty -> .

    COMMA           shift and go to state 306
    RPAREN          reduce using rule 4 (empty -> .)

    explor_cte                     shift and go to state 305
    empty                          shift and go to state 307

state 278

    (125) explore_var -> COMMA . variable
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 308
    id_saver                       shift and go to state 79

state 279

    (126) explore_var -> empty .

    COMMA           reduce using rule 126 (explore_var -> empty .)
    RPAREN          reduce using rule 126 (explore_var -> empty .)


state 280

    (129) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 309
    id_saver                       shift and go to state 79

state 281

    (132) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 310
    id_saver                       shift and go to state 79

state 282

    (130) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 130 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 283

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 312
    COMMA           reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 311
    empty                          shift and go to state 313

state 284

    (139) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 314
    id_saver                       shift and go to state 79

state 285

    (149) expression_comp -> expression_comp_2 m_exp . release_exp
    (8) release_exp -> . empty
    (4) empty -> .

    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQBRACKET      reduce using rule 4 (empty -> .)
    TO              reduce using rule 4 (empty -> .)

    release_exp                    shift and go to state 315
    empty                          shift and go to state 176

state 286

    (158) m_exp_sr -> m_exp_sr_2 m_exp .

    GTHAN           reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    EQUAL           reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GORE            reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LORE            reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)
    TO              reduce using rule 158 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 287

    (163) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 163 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 163 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 163 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 163 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 163 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 163 (term_pc -> term_pc_2 term .)
    GORE            reduce using rule 163 (term_pc -> term_pc_2 term .)
    LORE            reduce using rule 163 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 163 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 163 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 163 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 163 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 163 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 163 (term_pc -> term_pc_2 term .)
    TO              reduce using rule 163 (term_pc -> term_pc_2 term .)


state 288

    (169) sub_factor_pc -> sub_factor_pc_2 sub_factor .

    MULTIPLY        reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    DIVIDE          reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MODULE          reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    PLUS            reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MINUS           reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GTHAN           reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    EQUAL           reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    NOTEQUAL        reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LTHAN           reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GORE            reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LORE            reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    AND             reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    OR              reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    SEMICOLON       reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RPAREN          reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    COMMA           reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RSQBRACKET      reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    TO              reduce using rule 169 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)


state 289

    (171) sub_factor_pc_2 -> POWER empty .

    CTE_FLOAT       reduce using rule 171 (sub_factor_pc_2 -> POWER empty .)
    CTE_INT         reduce using rule 171 (sub_factor_pc_2 -> POWER empty .)
    CTE_CHAR        reduce using rule 171 (sub_factor_pc_2 -> POWER empty .)
    LPAREN          reduce using rule 171 (sub_factor_pc_2 -> POWER empty .)
    ID              reduce using rule 171 (sub_factor_pc_2 -> POWER empty .)


state 290

    (101) call_function -> function_saver function_flag call_params check_not_void .

    POWER           reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    MULTIPLY        reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    DIVIDE          reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    MODULE          reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    PLUS            reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    MINUS           reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    GTHAN           reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    EQUAL           reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    NOTEQUAL        reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    LTHAN           reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    GORE            reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    LORE            reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    AND             reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    OR              reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    SEMICOLON       reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    RPAREN          reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    COMMA           reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    RSQBRACKET      reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)
    TO              reduce using rule 101 (call_function -> function_saver function_flag call_params check_not_void .)


state 291

    (102) check_not_void -> RPAREN .

    POWER           reduce using rule 102 (check_not_void -> RPAREN .)
    MULTIPLY        reduce using rule 102 (check_not_void -> RPAREN .)
    DIVIDE          reduce using rule 102 (check_not_void -> RPAREN .)
    MODULE          reduce using rule 102 (check_not_void -> RPAREN .)
    PLUS            reduce using rule 102 (check_not_void -> RPAREN .)
    MINUS           reduce using rule 102 (check_not_void -> RPAREN .)
    GTHAN           reduce using rule 102 (check_not_void -> RPAREN .)
    EQUAL           reduce using rule 102 (check_not_void -> RPAREN .)
    NOTEQUAL        reduce using rule 102 (check_not_void -> RPAREN .)
    LTHAN           reduce using rule 102 (check_not_void -> RPAREN .)
    GORE            reduce using rule 102 (check_not_void -> RPAREN .)
    LORE            reduce using rule 102 (check_not_void -> RPAREN .)
    AND             reduce using rule 102 (check_not_void -> RPAREN .)
    OR              reduce using rule 102 (check_not_void -> RPAREN .)
    SEMICOLON       reduce using rule 102 (check_not_void -> RPAREN .)
    RPAREN          reduce using rule 102 (check_not_void -> RPAREN .)
    COMMA           reduce using rule 102 (check_not_void -> RPAREN .)
    RSQBRACKET      reduce using rule 102 (check_not_void -> RPAREN .)
    TO              reduce using rule 102 (check_not_void -> RPAREN .)


state 292

    (74) condition -> IF LPAREN exp RPAREN condition_GOTOF body . condition2 SEMICOLON end_condition
    (75) condition2 -> . ELSE condition_GOTO body
    (76) condition2 -> . empty
    (4) empty -> .

    ELSE            shift and go to state 317
    SEMICOLON       reduce using rule 4 (empty -> .)

    condition2                     shift and go to state 316
    empty                          shift and go to state 318

state 293

    (80) print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .

    IF              reduce using rule 80 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    PRINT           reduce using rule 80 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    FOR             reduce using rule 80 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    DO              reduce using rule 80 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    ID              reduce using rule 80 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RBRACKET        reduce using rule 80 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RETURN          reduce using rule 80 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)


state 294

    (86) end_print_np -> empty .

    IF              reduce using rule 86 (end_print_np -> empty .)
    PRINT           reduce using rule 86 (end_print_np -> empty .)
    FOR             reduce using rule 86 (end_print_np -> empty .)
    DO              reduce using rule 86 (end_print_np -> empty .)
    ID              reduce using rule 86 (end_print_np -> empty .)
    RBRACKET        reduce using rule 86 (end_print_np -> empty .)
    RETURN          reduce using rule 86 (end_print_np -> empty .)


state 295

    (83) print_many2 -> COMMA print_many_np print_many .

    RPAREN          reduce using rule 83 (print_many2 -> COMMA print_many_np print_many .)


state 296

    (111) exp_many -> COMMA check_param exp_many .

    RPAREN          reduce using rule 111 (exp_many -> COMMA check_param exp_many .)


state 297

    (42) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 319


state 298

    (96) for -> FOR LPAREN for_control keep_assign exp for_np1 . for_end body for_np2
    (99) for_end -> . int_const_saver RPAREN
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 312
    RPAREN          reduce using rule 4 (empty -> .)

    for_end                        shift and go to state 320
    int_const_saver                shift and go to state 321
    empty                          shift and go to state 313

state 299

    (98) for_np1 -> TO .

    CTE_INT         reduce using rule 98 (for_np1 -> TO .)
    RPAREN          reduce using rule 98 (for_np1 -> TO .)


state 300

    (93) while -> DO seed body WHILE LPAREN exp . RPAREN SEMICOLON gotoV

    RPAREN          shift and go to state 322


state 301

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars . inner_body return end_function program_function
    (66) inner_body -> . statement inner_body
    (67) inner_body -> . empty
    (113) statement -> . assign
    (114) statement -> . condition
    (115) statement -> . print
    (116) statement -> . cycle
    (117) statement -> . call_void_function
    (4) empty -> .
    (68) assign -> . variable keep_assign specialf_assign end_assign
    (74) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (80) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (91) cycle -> . for
    (92) cycle -> . while
    (103) call_void_function -> . function_saver function_flag call_params verify_params check_void
    (39) variable -> . id_saver variable_array
    (96) for -> . FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2
    (93) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (106) function_saver -> . ID empty
    (5) id_saver -> . ID empty

    RETURN          reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    IF              shift and go to state 74
    PRINT           shift and go to state 75
    FOR             shift and go to state 80
    DO              shift and go to state 81
    ID              shift and go to state 82

    id_saver                       shift and go to state 79
    inner_body                     shift and go to state 323
    statement                      shift and go to state 66
    empty                          shift and go to state 67
    assign                         shift and go to state 68
    condition                      shift and go to state 69
    print                          shift and go to state 70
    cycle                          shift and go to state 71
    call_void_function             shift and go to state 72
    variable                       shift and go to state 73
    for                            shift and go to state 76
    while                          shift and go to state 77
    function_saver                 shift and go to state 78

state 302

    (53) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 53 (param -> s_type id_saver add_params param2 .)


state 303

    (55) param2 -> COMMA . s_type id_saver add_params param2
    (19) s_type -> . INT
    (20) s_type -> . FLOAT
    (21) s_type -> . CHAR

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28

    s_type                         shift and go to state 324

state 304

    (56) param2 -> empty .

    RPAREN          reduce using rule 56 (param2 -> empty .)


state 305

    (124) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 325


state 306

    (127) explor_cte -> COMMA . int_const_saver
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 312
    RPAREN          reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 326
    empty                          shift and go to state 313

state 307

    (128) explor_cte -> empty .

    RPAREN          reduce using rule 128 (explor_cte -> empty .)


state 308

    (125) explore_var -> COMMA variable .

    COMMA           reduce using rule 125 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 125 (explore_var -> COMMA variable .)


state 309

    (129) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 327


state 310

    (132) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (133) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (134) dr_array -> . empty
    (4) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 328
    RPAREN          reduce using rule 4 (empty -> .)

  ! COMMA           [ reduce using rule 4 (empty -> .) ]

    dr_array                       shift and go to state 329
    empty                          shift and go to state 330

state 311

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver . COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 331


state 312

    (6) int_const_saver -> CTE_INT .

    COMMA           reduce using rule 6 (int_const_saver -> CTE_INT .)
    RPAREN          reduce using rule 6 (int_const_saver -> CTE_INT .)


state 313

    (7) int_const_saver -> empty .

    COMMA           reduce using rule 7 (int_const_saver -> empty .)
    RPAREN          reduce using rule 7 (int_const_saver -> empty .)


state 314

    (139) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 332


state 315

    (149) expression_comp -> expression_comp_2 m_exp release_exp .

    AND             reduce using rule 149 (expression_comp -> expression_comp_2 m_exp release_exp .)
    OR              reduce using rule 149 (expression_comp -> expression_comp_2 m_exp release_exp .)
    SEMICOLON       reduce using rule 149 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RPAREN          reduce using rule 149 (expression_comp -> expression_comp_2 m_exp release_exp .)
    COMMA           reduce using rule 149 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RSQBRACKET      reduce using rule 149 (expression_comp -> expression_comp_2 m_exp release_exp .)
    TO              reduce using rule 149 (expression_comp -> expression_comp_2 m_exp release_exp .)


state 316

    (74) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 . SEMICOLON end_condition

    SEMICOLON       shift and go to state 333


state 317

    (75) condition2 -> ELSE . condition_GOTO body
    (78) condition_GOTO -> . empty
    (4) empty -> .

    LBRACKET        reduce using rule 4 (empty -> .)

    condition_GOTO                 shift and go to state 334
    empty                          shift and go to state 335

state 318

    (76) condition2 -> empty .

    SEMICOLON       reduce using rule 76 (condition2 -> empty .)


state 319

    (42) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    POWER           reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MODULE          reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GORE            reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LORE            reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    TO              reduce using rule 42 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 320

    (96) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end . body for_np2
    (65) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 336

state 321

    (99) for_end -> int_const_saver . RPAREN

    RPAREN          shift and go to state 337


state 322

    (93) while -> DO seed body WHILE LPAREN exp RPAREN . SEMICOLON gotoV

    SEMICOLON       shift and go to state 338


state 323

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body . return end_function program_function
    (58) return -> . return_np exp return_quad SEMICOLON
    (59) return -> . empty_path_return
    (60) return_np -> . RETURN
    (62) empty_path_return -> . empty
    (4) empty -> .

    RETURN          shift and go to state 342
    RBRACKET        reduce using rule 4 (empty -> .)

    return                         shift and go to state 339
    return_np                      shift and go to state 340
    empty_path_return              shift and go to state 341
    empty                          shift and go to state 343

state 324

    (55) param2 -> COMMA s_type . id_saver add_params param2
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    id_saver                       shift and go to state 344

state 325

    (124) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 124 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 326

    (127) explor_cte -> COMMA int_const_saver .

    RPAREN          reduce using rule 127 (explor_cte -> COMMA int_const_saver .)


state 327

    (129) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 345
    id_saver                       shift and go to state 79

state 328

    (133) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 346


state 329

    (132) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (137) dr_int -> . COMMA int_const_saver
    (138) dr_int -> . empty
    (4) empty -> .

    COMMA           shift and go to state 347
    RPAREN          reduce using rule 4 (empty -> .)

    dr_int                         shift and go to state 348
    empty                          shift and go to state 349

state 330

    (134) dr_array -> empty .

    COMMA           reduce using rule 134 (dr_array -> empty .)
    RPAREN          reduce using rule 134 (dr_array -> empty .)


state 331

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA . int_const_saver COMMA int_const_saver RPAREN
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 312
    COMMA           reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 350
    empty                          shift and go to state 313

state 332

    (139) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 351


state 333

    (74) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON . end_condition
    (79) end_condition -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    end_condition                  shift and go to state 352
    empty                          shift and go to state 353

state 334

    (75) condition2 -> ELSE condition_GOTO . body
    (65) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 354

state 335

    (78) condition_GOTO -> empty .

    LBRACKET        reduce using rule 78 (condition_GOTO -> empty .)


state 336

    (96) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body . for_np2
    (100) for_np2 -> . SEMICOLON

    SEMICOLON       shift and go to state 356

    for_np2                        shift and go to state 355

state 337

    (99) for_end -> int_const_saver RPAREN .

    LBRACKET        reduce using rule 99 (for_end -> int_const_saver RPAREN .)


state 338

    (93) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON . gotoV
    (95) gotoV -> . empty
    (4) empty -> .

    IF              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    RBRACKET        reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)

    gotoV                          shift and go to state 357
    empty                          shift and go to state 358

state 339

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return . end_function program_function
    (52) end_function -> . RBRACKET

    RBRACKET        shift and go to state 360

    end_function                   shift and go to state 359

state 340

    (58) return -> return_np . exp return_quad SEMICOLON
    (140) exp -> . t_exp release_exp exp_or
    (144) t_exp -> . expression release_exp t_exp_and
    (148) expression -> . m_exp release_exp expression_comp
    (157) m_exp -> . term release_exp m_exp_sr
    (162) term -> . sub_factor release_exp term_pc
    (168) sub_factor -> . factor release_exp sub_factor_pc
    (172) factor -> . factor_exp
    (173) factor -> . factor_cte
    (174) factor -> . variable
    (175) factor -> . call_function
    (176) factor_exp -> . false_button exp release_false_button
    (179) factor_cte -> . CTE_FLOAT
    (180) factor_cte -> . CTE_INT
    (181) factor_cte -> . CTE_CHAR
    (39) variable -> . id_saver variable_array
    (101) call_function -> . function_saver function_flag call_params check_not_void
    (177) false_button -> . LPAREN
    (5) id_saver -> . ID empty
    (106) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 147
    CTE_INT         shift and go to state 148
    CTE_CHAR        shift and go to state 149
    LPAREN          shift and go to state 130
    ID              shift and go to state 151

    exp                            shift and go to state 361
    t_exp                          shift and go to state 122
    expression                     shift and go to state 131
    m_exp                          shift and go to state 139
    term                           shift and go to state 140
    sub_factor                     shift and go to state 141
    factor                         shift and go to state 142
    factor_exp                     shift and go to state 143
    factor_cte                     shift and go to state 144
    variable                       shift and go to state 117
    call_function                  shift and go to state 145
    false_button                   shift and go to state 146
    id_saver                       shift and go to state 79
    function_saver                 shift and go to state 150

state 341

    (59) return -> empty_path_return .

    RBRACKET        reduce using rule 59 (return -> empty_path_return .)


state 342

    (60) return_np -> RETURN .

    CTE_FLOAT       reduce using rule 60 (return_np -> RETURN .)
    CTE_INT         reduce using rule 60 (return_np -> RETURN .)
    CTE_CHAR        reduce using rule 60 (return_np -> RETURN .)
    LPAREN          reduce using rule 60 (return_np -> RETURN .)
    ID              reduce using rule 60 (return_np -> RETURN .)


state 343

    (62) empty_path_return -> empty .

    RBRACKET        reduce using rule 62 (empty_path_return -> empty .)


state 344

    (55) param2 -> COMMA s_type id_saver . add_params param2
    (57) add_params -> . empty
    (4) empty -> .

    COMMA           reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)

    add_params                     shift and go to state 362
    empty                          shift and go to state 271

state 345

    (129) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 363


state 346

    (133) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 364


state 347

    (137) dr_int -> COMMA . int_const_saver
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 312
    RPAREN          reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 365
    empty                          shift and go to state 313

state 348

    (132) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 366


state 349

    (138) dr_int -> empty .

    RPAREN          reduce using rule 138 (dr_int -> empty .)


state 350

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver . COMMA int_const_saver RPAREN

    COMMA           shift and go to state 367


state 351

    (139) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 139 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 352

    (74) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .

    IF              reduce using rule 74 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    PRINT           reduce using rule 74 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    FOR             reduce using rule 74 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    DO              reduce using rule 74 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    ID              reduce using rule 74 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RBRACKET        reduce using rule 74 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RETURN          reduce using rule 74 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)


state 353

    (79) end_condition -> empty .

    IF              reduce using rule 79 (end_condition -> empty .)
    PRINT           reduce using rule 79 (end_condition -> empty .)
    FOR             reduce using rule 79 (end_condition -> empty .)
    DO              reduce using rule 79 (end_condition -> empty .)
    ID              reduce using rule 79 (end_condition -> empty .)
    RBRACKET        reduce using rule 79 (end_condition -> empty .)
    RETURN          reduce using rule 79 (end_condition -> empty .)


state 354

    (75) condition2 -> ELSE condition_GOTO body .

    SEMICOLON       reduce using rule 75 (condition2 -> ELSE condition_GOTO body .)


state 355

    (96) for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .

    IF              reduce using rule 96 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    PRINT           reduce using rule 96 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    FOR             reduce using rule 96 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    DO              reduce using rule 96 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    ID              reduce using rule 96 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    RBRACKET        reduce using rule 96 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)
    RETURN          reduce using rule 96 (for -> FOR LPAREN for_control keep_assign exp for_np1 for_end body for_np2 .)


state 356

    (100) for_np2 -> SEMICOLON .

    IF              reduce using rule 100 (for_np2 -> SEMICOLON .)
    PRINT           reduce using rule 100 (for_np2 -> SEMICOLON .)
    FOR             reduce using rule 100 (for_np2 -> SEMICOLON .)
    DO              reduce using rule 100 (for_np2 -> SEMICOLON .)
    ID              reduce using rule 100 (for_np2 -> SEMICOLON .)
    RBRACKET        reduce using rule 100 (for_np2 -> SEMICOLON .)
    RETURN          reduce using rule 100 (for_np2 -> SEMICOLON .)


state 357

    (93) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .

    IF              reduce using rule 93 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    PRINT           reduce using rule 93 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    FOR             reduce using rule 93 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    DO              reduce using rule 93 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    ID              reduce using rule 93 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RBRACKET        reduce using rule 93 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RETURN          reduce using rule 93 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)


state 358

    (95) gotoV -> empty .

    IF              reduce using rule 95 (gotoV -> empty .)
    PRINT           reduce using rule 95 (gotoV -> empty .)
    FOR             reduce using rule 95 (gotoV -> empty .)
    DO              reduce using rule 95 (gotoV -> empty .)
    ID              reduce using rule 95 (gotoV -> empty .)
    RBRACKET        reduce using rule 95 (gotoV -> empty .)
    RETURN          reduce using rule 95 (gotoV -> empty .)


state 359

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function . program_function
    (44) program_function -> . FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function
    (45) program_function -> . empty
    (4) empty -> .

    FUNCTION        shift and go to state 17
    MAIN            reduce using rule 4 (empty -> .)

    program_function               shift and go to state 368
    empty                          shift and go to state 18

state 360

    (52) end_function -> RBRACKET .

    FUNCTION        reduce using rule 52 (end_function -> RBRACKET .)
    MAIN            reduce using rule 52 (end_function -> RBRACKET .)


state 361

    (58) return -> return_np exp . return_quad SEMICOLON
    (61) return_quad -> . empty
    (4) empty -> .

    SEMICOLON       reduce using rule 4 (empty -> .)

    return_quad                    shift and go to state 369
    empty                          shift and go to state 370

state 362

    (55) param2 -> COMMA s_type id_saver add_params . param2
    (55) param2 -> . COMMA s_type id_saver add_params param2
    (56) param2 -> . empty
    (4) empty -> .

    COMMA           shift and go to state 303
    RPAREN          reduce using rule 4 (empty -> .)

    param2                         shift and go to state 371
    empty                          shift and go to state 304

state 363

    (129) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (39) variable -> . id_saver variable_array
    (5) id_saver -> . ID empty

    ID              shift and go to state 36

    variable                       shift and go to state 372
    id_saver                       shift and go to state 79

state 364

    (133) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (135) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (136) dr_array_mp -> . empty
    (4) empty -> .

    COMMA           shift and go to state 373
    RSQBRACKET      reduce using rule 4 (empty -> .)

    dr_array_mp                    shift and go to state 374
    empty                          shift and go to state 375

state 365

    (137) dr_int -> COMMA int_const_saver .

    RPAREN          reduce using rule 137 (dr_int -> COMMA int_const_saver .)


state 366

    (132) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 132 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 367

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA . int_const_saver RPAREN
    (6) int_const_saver -> . CTE_INT
    (7) int_const_saver -> . empty
    (4) empty -> .

    CTE_INT         shift and go to state 312
    RPAREN          reduce using rule 4 (empty -> .)

    int_const_saver                shift and go to state 376
    empty                          shift and go to state 313

state 368

    (44) program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function .

    MAIN            reduce using rule 44 (program_function -> FUNCTION resources f_type id_saver func_creator LPAREN param RPAREN add_func_glob program_vars inner_body return end_function program_function .)


state 369

    (58) return -> return_np exp return_quad . SEMICOLON

    SEMICOLON       shift and go to state 377


state 370

    (61) return_quad -> empty .

    SEMICOLON       reduce using rule 61 (return_quad -> empty .)


state 371

    (55) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 55 (param2 -> COMMA s_type id_saver add_params param2 .)


state 372

    (129) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 378


state 373

    (135) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 379


state 374

    (133) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 380


state 375

    (136) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 136 (dr_array_mp -> empty .)


state 376

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver . RPAREN

    RPAREN          shift and go to state 381


state 377

    (58) return -> return_np exp return_quad SEMICOLON .

    RBRACKET        reduce using rule 58 (return -> return_np exp return_quad SEMICOLON .)


state 378

    (129) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 129 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 379

    (135) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (135) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (136) dr_array_mp -> . empty
    (4) empty -> .

    COMMA           shift and go to state 373
    RSQBRACKET      reduce using rule 4 (empty -> .)

    dr_array_mp                    shift and go to state 382
    empty                          shift and go to state 375

state 380

    (133) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 133 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 133 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 381

    (131) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .

    SEMICOLON       reduce using rule 131 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .)


state 382

    (135) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 135 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 221 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 310 resolved as shift
