Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END
Rule 2     empty -> <empty>
Rule 3     id_saver -> ID empty
Rule 4     int_const_saver -> CTE_INT empty
Rule 5     program_libraries -> from_library import_library
Rule 6     program_libraries -> empty
Rule 7     from_library -> FROM ID
Rule 8     from_library -> empty
Rule 9     import_library -> IMPORT ID AS ID program_libraries
Rule 10    var_type -> var_c_type
Rule 11    var_type -> var_s_type
Rule 12    program_vars -> VAR var_type
Rule 13    program_vars -> empty
Rule 14    s_type -> INT
Rule 15    s_type -> FLOAT
Rule 16    s_type -> CHAR
Rule 17    c_type -> DATAFRAME
Rule 18    c_type -> DATE
Rule 19    var_multiple -> var_type
Rule 20    var_multiple -> empty
Rule 21    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 22    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 23    var_c_type2 -> empty
Rule 24    add_c_var -> empty
Rule 25    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 26    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 27    var_s_type2 -> empty
Rule 28    add_s_var -> empty
Rule 29    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 30    var_s_array -> empty
Rule 31    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 32    var_s_matrix -> empty
Rule 33    var_s_dimesions -> CTE_INT empty
Rule 34    variable -> id_saver variable_array
Rule 35    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 36    variable_array -> empty
Rule 37    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 38    variable_matrix -> empty
Rule 39    program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
Rule 40    program_function -> empty
Rule 41    f_type -> INT
Rule 42    f_type -> FLOAT
Rule 43    f_type -> CHAR
Rule 44    f_type -> VOID
Rule 45    func_creator -> empty
Rule 46    param -> s_type id_saver add_params param2
Rule 47    param2 -> COMMA s_type id_saver add_params param2
Rule 48    param2 -> empty
Rule 49    add_params -> empty
Rule 50    return -> RETURN exp SEMICOLON
Rule 51    return -> empty
Rule 52    program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET
Rule 53    main_id -> empty
Rule 54    body -> LBRACKET inner_body RBRACKET
Rule 55    inner_body -> statement inner_body
Rule 56    inner_body -> empty
Rule 57    assign -> variable keep_assign specialf_assign SEMICOLON
Rule 58    specialf_assign -> exp
Rule 59    specialf_assign -> special_function
Rule 60    specialf_assign -> read
Rule 61    keep_assign -> ASSIGN empty
Rule 62    condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON
Rule 63    condition2 -> ELSE body
Rule 64    condition2 -> empty
Rule 65    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 66    print_type -> exp
Rule 67    print_many -> print_type print_many2
Rule 68    print_many2 -> COMMA print_type print_many2
Rule 69    print_many2 -> empty
Rule 70    read -> READ LPAREN variable RPAREN
Rule 71    cycle -> for
Rule 72    cycle -> while
Rule 73    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 74    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 75    for_end -> int_const_saver
Rule 76    for_end -> ID
Rule 77    call_function -> test LPAREN exp exp_many RPAREN
Rule 78    test -> ID empty
Rule 79    exp_many -> COMMA exp exp_many
Rule 80    exp_many -> empty
Rule 81    statement -> assign
Rule 82    statement -> condition
Rule 83    statement -> print
Rule 84    statement -> cycle
Rule 85    statement -> call_function
Rule 86    special_function -> exploration
Rule 87    special_function -> financial_state
Rule 88    special_function -> dummi_regression
Rule 89    special_function -> season_analysis
Rule 90    special_function -> trend_prediction
Rule 91    special_function -> model_predict
Rule 92    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 93    explore_var -> COMMA variable
Rule 94    explore_var -> empty
Rule 95    explor_cte -> COMMA int_const_saver
Rule 96    explor_cte -> empty
Rule 97    financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 98    season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 99    trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
Rule 100   dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 101   dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 102   dr_array -> empty
Rule 103   dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 104   dr_array_mp -> empty
Rule 105   dr_int -> COMMA int_const_saver
Rule 106   dr_int -> empty
Rule 107   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 108   exp -> t_exp exp_or
Rule 109   exp_or -> OR exp
Rule 110   exp_or -> empty
Rule 111   t_exp -> expression t_exp_and
Rule 112   t_exp_and -> AND t_exp
Rule 113   t_exp_and -> empty
Rule 114   expression -> m_exp expression_comp
Rule 115   expression_comp -> expression_comp_2 m_exp
Rule 116   expression_comp -> empty
Rule 117   expression_comp_2 -> EQUAL
Rule 118   expression_comp_2 -> NOTEQUAL
Rule 119   expression_comp_2 -> LTHAN
Rule 120   expression_comp_2 -> GTHAN
Rule 121   m_exp -> term m_exp_sr
Rule 122   m_exp_sr -> m_exp_sr_2 m_exp
Rule 123   m_exp_sr -> empty
Rule 124   m_exp_sr_2 -> PLUS
Rule 125   m_exp_sr_2 -> MINUS
Rule 126   term -> sub_factor term_pc
Rule 127   term_pc -> term_pc_2 term
Rule 128   term_pc -> empty
Rule 129   term_pc_2 -> MULTIPLY
Rule 130   term_pc_2 -> DIVIDE
Rule 131   term_pc_2 -> MODULE
Rule 132   sub_factor -> factor sub_factor_pc
Rule 133   sub_factor_pc -> sub_factor_pc_2 sub_factor
Rule 134   sub_factor_pc -> empty
Rule 135   sub_factor_pc_2 -> POWER empty
Rule 136   factor -> factor_exp
Rule 137   factor -> factor_cte
Rule 138   factor -> variable
Rule 139   factor -> call_function
Rule 140   factor_exp -> LPAREN exp RPAREN
Rule 141   factor_cte -> CTE_FLOAT
Rule 142   factor_cte -> CTE_INT
Rule 143   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 112
AS                   : 9
ASSIGN               : 61
CHAR                 : 16 43
COLON                : 
COMMA                : 22 26 47 68 79 93 95 97 97 97 99 99 99 100 101 103 105 107 107
CTE_CHAR             : 101 103 143
CTE_FLOAT            : 141
CTE_INT              : 4 33 142
DATAFRAME            : 17
DATE                 : 18
DIVIDE               : 130
DO                   : 73
DUMMI_REGRESSION     : 100
ELSE                 : 63
END                  : 1
EQUAL                : 117
EXPLORATION          : 92
FINANCIAL_STATE      : 97
FLOAT                : 15 42
FOR                  : 74
FROM                 : 7
FUNCTION             : 39
GTHAN                : 120
ID                   : 1 3 7 9 9 74 76 78
IF                   : 62
IMPORT               : 9
INT                  : 14 41
LBRACKET             : 39 52 54
LPAREN               : 39 62 65 70 73 74 77 92 97 98 99 100 107 140
LSQBRACKET           : 29 31 35 37 101
LTHAN                : 119
MAIN                 : 52
MINUS                : 125
MODEL_PREDICT        : 107
MODULE               : 131
MULTIPLY             : 129
NOTEQUAL             : 118
OR                   : 109
PLUS                 : 124
POWER                : 135
PRINT                : 65
PROGRAM              : 1
RBRACKET             : 39 52 54
READ                 : 70
RETURN               : 50
RPAREN               : 39 62 65 70 73 74 77 92 97 98 99 100 107 140
RSQBRACKET           : 29 31 35 37 101
SEASON_ANALYSIS      : 98
SEMICOLON            : 1 21 25 50 57 62 65 73 74
TO                   : 74
TREND_PREDICTION     : 99
VAR                  : 12
VOID                 : 44
WHILE                : 73
error                : 

Nonterminals, with rules where they appear

add_c_var            : 21 22
add_params           : 46 47
add_s_var            : 25 26
assign               : 81
body                 : 62 63 73 74
c_type               : 21
call_function        : 85 139
condition            : 82
condition2           : 62
cycle                : 84
dr_array             : 100
dr_array_mp          : 101 103
dr_int               : 100
dummi_regression     : 88
empty                : 3 4 6 8 13 20 23 24 27 28 30 32 33 36 38 40 45 48 49 51 53 56 61 64 69 78 80 94 96 102 104 106 110 113 116 123 128 134 135
exp                  : 35 37 50 58 62 66 73 77 79 109 140
exp_many             : 77 79
exp_or               : 108
explor_cte           : 92
exploration          : 86
explore_var          : 92
expression           : 111
expression_comp      : 114
expression_comp_2    : 115
f_type               : 39
factor               : 132
factor_cte           : 137
factor_exp           : 136
financial_state      : 87
for                  : 71
for_end              : 74
from_library         : 5
func_creator         : 39
id_saver             : 21 22 25 26 34 39 46 47
import_library       : 5
inner_body           : 39 52 54 55
int_const_saver      : 75 95 99 99 99 105
keep_assign          : 57
m_exp                : 114 115 122
m_exp_sr             : 121
m_exp_sr_2           : 122
main_id              : 52
model_predict        : 91
param                : 39
param2               : 46 47
print                : 83
print_many           : 65
print_many2          : 67 68
print_type           : 67 68
program              : 0
program_function     : 1 39
program_libraries    : 1 9
program_main         : 1
program_vars         : 1 39 52
read                 : 60
return               : 39
s_type               : 25 46 47
season_analysis      : 89
special_function     : 59
specialf_assign      : 57
statement            : 55
sub_factor           : 126 133
sub_factor_pc        : 132
sub_factor_pc_2      : 133
t_exp                : 108 112
t_exp_and            : 111
term                 : 121 127
term_pc              : 126
term_pc_2            : 127
test                 : 77
trend_prediction     : 90
var_c_type           : 10
var_c_type2          : 21 22
var_multiple         : 21 25
var_s_array          : 25 26
var_s_dimesions      : 29 31
var_s_matrix         : 29
var_s_type           : 11
var_s_type2          : 25 26
var_type             : 12 19
variable             : 57 70 92 93 97 97 97 97 98 99 100 100 107 107 138
variable_array       : 34
variable_matrix      : 35
while                : 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main END
    (5) program_libraries -> . from_library import_library
    (6) program_libraries -> . empty
    (7) from_library -> . FROM ID
    (8) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main END
    (12) program_vars -> . VAR var_type
    (13) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (5) program_libraries -> from_library . import_library
    (9) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (6) program_libraries -> empty .
    (8) from_library -> empty .

    VAR             reduce using rule 6 (program_libraries -> empty .)
    FUNCTION        reduce using rule 6 (program_libraries -> empty .)
    MAIN            reduce using rule 6 (program_libraries -> empty .)
    IMPORT          reduce using rule 8 (from_library -> empty .)


state 8

    (7) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main END
    (39) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (40) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 15
    empty                          shift and go to state 17

state 10

    (12) program_vars -> VAR . var_type
    (10) var_type -> . var_c_type
    (11) var_type -> . var_s_type
    (21) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (25) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (17) c_type -> . DATAFRAME
    (18) c_type -> . DATE
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    var_type                       shift and go to state 18
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21
    s_type                         shift and go to state 22

state 11

    (13) program_vars -> empty .

    FUNCTION        reduce using rule 13 (program_vars -> empty .)
    MAIN            reduce using rule 13 (program_vars -> empty .)
    IF              reduce using rule 13 (program_vars -> empty .)
    PRINT           reduce using rule 13 (program_vars -> empty .)
    FOR             reduce using rule 13 (program_vars -> empty .)
    DO              reduce using rule 13 (program_vars -> empty .)
    ID              reduce using rule 13 (program_vars -> empty .)
    RBRACKET        reduce using rule 13 (program_vars -> empty .)
    RETURN          reduce using rule 13 (program_vars -> empty .)


state 12

    (5) program_libraries -> from_library import_library .

    VAR             reduce using rule 5 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 5 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 5 (program_libraries -> from_library import_library .)


state 13

    (9) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 28


state 14

    (7) from_library -> FROM ID .

    IMPORT          reduce using rule 7 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main END
    (52) program_main -> . MAIN main_id LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 30

    program_main                   shift and go to state 29

state 16

    (39) program_function -> FUNCTION . f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (41) f_type -> . INT
    (42) f_type -> . FLOAT
    (43) f_type -> . CHAR
    (44) f_type -> . VOID

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    f_type                         shift and go to state 31

state 17

    (40) program_function -> empty .

    MAIN            reduce using rule 40 (program_function -> empty .)


state 18

    (12) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 12 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 12 (program_vars -> VAR var_type .)
    IF              reduce using rule 12 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 12 (program_vars -> VAR var_type .)
    FOR             reduce using rule 12 (program_vars -> VAR var_type .)
    DO              reduce using rule 12 (program_vars -> VAR var_type .)
    ID              reduce using rule 12 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 12 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 12 (program_vars -> VAR var_type .)


state 19

    (10) var_type -> var_c_type .

    FUNCTION        reduce using rule 10 (var_type -> var_c_type .)
    MAIN            reduce using rule 10 (var_type -> var_c_type .)
    IF              reduce using rule 10 (var_type -> var_c_type .)
    PRINT           reduce using rule 10 (var_type -> var_c_type .)
    FOR             reduce using rule 10 (var_type -> var_c_type .)
    DO              reduce using rule 10 (var_type -> var_c_type .)
    ID              reduce using rule 10 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 10 (var_type -> var_c_type .)
    RETURN          reduce using rule 10 (var_type -> var_c_type .)


state 20

    (11) var_type -> var_s_type .

    FUNCTION        reduce using rule 11 (var_type -> var_s_type .)
    MAIN            reduce using rule 11 (var_type -> var_s_type .)
    IF              reduce using rule 11 (var_type -> var_s_type .)
    PRINT           reduce using rule 11 (var_type -> var_s_type .)
    FOR             reduce using rule 11 (var_type -> var_s_type .)
    DO              reduce using rule 11 (var_type -> var_s_type .)
    ID              reduce using rule 11 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 11 (var_type -> var_s_type .)
    RETURN          reduce using rule 11 (var_type -> var_s_type .)


state 21

    (21) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 36

state 22

    (25) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 38

state 23

    (17) c_type -> DATAFRAME .

    ID              reduce using rule 17 (c_type -> DATAFRAME .)


state 24

    (18) c_type -> DATE .

    ID              reduce using rule 18 (c_type -> DATE .)


state 25

    (14) s_type -> INT .

    ID              reduce using rule 14 (s_type -> INT .)


state 26

    (15) s_type -> FLOAT .

    ID              reduce using rule 15 (s_type -> FLOAT .)


state 27

    (16) s_type -> CHAR .

    ID              reduce using rule 16 (s_type -> CHAR .)


state 28

    (9) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 39


state 29

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . END

    END             shift and go to state 40


state 30

    (52) program_main -> MAIN . main_id LBRACKET program_vars inner_body RBRACKET
    (53) main_id -> . empty
    (2) empty -> .

    LBRACKET        reduce using rule 2 (empty -> .)

    main_id                        shift and go to state 41
    empty                          shift and go to state 42

state 31

    (39) program_function -> FUNCTION f_type . id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 43

state 32

    (41) f_type -> INT .

    ID              reduce using rule 41 (f_type -> INT .)


state 33

    (42) f_type -> FLOAT .

    ID              reduce using rule 42 (f_type -> FLOAT .)


state 34

    (43) f_type -> CHAR .

    ID              reduce using rule 43 (f_type -> CHAR .)


state 35

    (44) f_type -> VOID .

    ID              reduce using rule 44 (f_type -> VOID .)


state 36

    (21) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (24) add_c_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_c_var                      shift and go to state 44
    empty                          shift and go to state 45

state 37

    (3) id_saver -> ID . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    LSQBRACKET      reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    empty                          shift and go to state 46

state 38

    (25) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (29) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (30) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 48
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 47
    empty                          shift and go to state 49

state 39

    (9) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 50


state 40

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .)


state 41

    (52) program_main -> MAIN main_id . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 51


state 42

    (53) main_id -> empty .

    LBRACKET        reduce using rule 53 (main_id -> empty .)


state 43

    (39) program_function -> FUNCTION f_type id_saver . func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (45) func_creator -> . empty
    (2) empty -> .

    LPAREN          reduce using rule 2 (empty -> .)

    func_creator                   shift and go to state 52
    empty                          shift and go to state 53

state 44

    (21) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (22) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (23) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 55
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 54
    empty                          shift and go to state 56

state 45

    (24) add_c_var -> empty .

    COMMA           reduce using rule 24 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 24 (add_c_var -> empty .)


state 46

    (3) id_saver -> ID empty .

    COMMA           reduce using rule 3 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 3 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 3 (id_saver -> ID empty .)
    LPAREN          reduce using rule 3 (id_saver -> ID empty .)
    RPAREN          reduce using rule 3 (id_saver -> ID empty .)


state 47

    (25) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (28) add_s_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_s_var                      shift and go to state 57
    empty                          shift and go to state 58

state 48

    (29) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (33) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 60

    var_s_dimesions                shift and go to state 59

state 49

    (30) var_s_array -> empty .

    COMMA           reduce using rule 30 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 30 (var_s_array -> empty .)


state 50

    (9) import_library -> IMPORT ID AS ID . program_libraries
    (5) program_libraries -> . from_library import_library
    (6) program_libraries -> . empty
    (7) from_library -> . FROM ID
    (8) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 61
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 51

    (52) program_main -> MAIN main_id LBRACKET . program_vars inner_body RBRACKET
    (12) program_vars -> . VAR var_type
    (13) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 62
    empty                          shift and go to state 11

state 52

    (39) program_function -> FUNCTION f_type id_saver func_creator . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    LPAREN          shift and go to state 63


state 53

    (45) func_creator -> empty .

    LPAREN          reduce using rule 45 (func_creator -> empty .)


state 54

    (21) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 64


state 55

    (22) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 65

state 56

    (23) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 23 (var_c_type2 -> empty .)


state 57

    (25) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (26) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (27) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 67
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 66
    empty                          shift and go to state 68

state 58

    (28) add_s_var -> empty .

    COMMA           reduce using rule 28 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 28 (add_s_var -> empty .)


state 59

    (29) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 69


state 60

    (33) var_s_dimesions -> CTE_INT . empty
    (2) empty -> .

    RSQBRACKET      reduce using rule 2 (empty -> .)

    empty                          shift and go to state 70

state 61

    (9) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 9 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 9 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 9 (import_library -> IMPORT ID AS ID program_libraries .)


state 62

    (52) program_main -> MAIN main_id LBRACKET program_vars . inner_body RBRACKET
    (55) inner_body -> . statement inner_body
    (56) inner_body -> . empty
    (81) statement -> . assign
    (82) statement -> . condition
    (83) statement -> . print
    (84) statement -> . cycle
    (85) statement -> . call_function
    (2) empty -> .
    (57) assign -> . variable keep_assign specialf_assign SEMICOLON
    (62) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (65) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (71) cycle -> . for
    (72) cycle -> . while
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (34) variable -> . id_saver variable_array
    (74) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (73) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (78) test -> . ID empty
    (3) id_saver -> . ID empty

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 86
    DO              shift and go to state 88
    ID              shift and go to state 87

    inner_body                     shift and go to state 71
    statement                      shift and go to state 72
    empty                          shift and go to state 73
    assign                         shift and go to state 74
    condition                      shift and go to state 75
    print                          shift and go to state 76
    cycle                          shift and go to state 77
    call_function                  shift and go to state 78
    variable                       shift and go to state 79
    for                            shift and go to state 82
    while                          shift and go to state 83
    test                           shift and go to state 84
    id_saver                       shift and go to state 85

state 63

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (46) param -> . s_type id_saver add_params param2
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    param                          shift and go to state 89
    s_type                         shift and go to state 90

state 64

    (21) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (19) var_multiple -> . var_type
    (20) var_multiple -> . empty
    (10) var_type -> . var_c_type
    (11) var_type -> . var_s_type
    (2) empty -> .
    (21) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (25) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (17) c_type -> . DATAFRAME
    (18) c_type -> . DATE
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    c_type                         shift and go to state 21
    var_multiple                   shift and go to state 91
    var_type                       shift and go to state 92
    empty                          shift and go to state 93
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    s_type                         shift and go to state 22

state 65

    (22) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (24) add_c_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_c_var                      shift and go to state 94
    empty                          shift and go to state 45

state 66

    (25) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 95


state 67

    (26) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 96

state 68

    (27) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 27 (var_s_type2 -> empty .)


state 69

    (29) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (31) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (32) var_s_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 97
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_matrix                   shift and go to state 98
    empty                          shift and go to state 99

state 70

    (33) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 33 (var_s_dimesions -> CTE_INT empty .)


state 71

    (52) program_main -> MAIN main_id LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 100


state 72

    (55) inner_body -> statement . inner_body
    (55) inner_body -> . statement inner_body
    (56) inner_body -> . empty
    (81) statement -> . assign
    (82) statement -> . condition
    (83) statement -> . print
    (84) statement -> . cycle
    (85) statement -> . call_function
    (2) empty -> .
    (57) assign -> . variable keep_assign specialf_assign SEMICOLON
    (62) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (65) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (71) cycle -> . for
    (72) cycle -> . while
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (34) variable -> . id_saver variable_array
    (74) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (73) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (78) test -> . ID empty
    (3) id_saver -> . ID empty

    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 86
    DO              shift and go to state 88
    ID              shift and go to state 87

    statement                      shift and go to state 72
    inner_body                     shift and go to state 101
    empty                          shift and go to state 73
    assign                         shift and go to state 74
    condition                      shift and go to state 75
    print                          shift and go to state 76
    cycle                          shift and go to state 77
    call_function                  shift and go to state 78
    variable                       shift and go to state 79
    for                            shift and go to state 82
    while                          shift and go to state 83
    test                           shift and go to state 84
    id_saver                       shift and go to state 85

state 73

    (56) inner_body -> empty .

    RBRACKET        reduce using rule 56 (inner_body -> empty .)
    RETURN          reduce using rule 56 (inner_body -> empty .)


state 74

    (81) statement -> assign .

    IF              reduce using rule 81 (statement -> assign .)
    PRINT           reduce using rule 81 (statement -> assign .)
    FOR             reduce using rule 81 (statement -> assign .)
    DO              reduce using rule 81 (statement -> assign .)
    ID              reduce using rule 81 (statement -> assign .)
    RBRACKET        reduce using rule 81 (statement -> assign .)
    RETURN          reduce using rule 81 (statement -> assign .)


state 75

    (82) statement -> condition .

    IF              reduce using rule 82 (statement -> condition .)
    PRINT           reduce using rule 82 (statement -> condition .)
    FOR             reduce using rule 82 (statement -> condition .)
    DO              reduce using rule 82 (statement -> condition .)
    ID              reduce using rule 82 (statement -> condition .)
    RBRACKET        reduce using rule 82 (statement -> condition .)
    RETURN          reduce using rule 82 (statement -> condition .)


state 76

    (83) statement -> print .

    IF              reduce using rule 83 (statement -> print .)
    PRINT           reduce using rule 83 (statement -> print .)
    FOR             reduce using rule 83 (statement -> print .)
    DO              reduce using rule 83 (statement -> print .)
    ID              reduce using rule 83 (statement -> print .)
    RBRACKET        reduce using rule 83 (statement -> print .)
    RETURN          reduce using rule 83 (statement -> print .)


state 77

    (84) statement -> cycle .

    IF              reduce using rule 84 (statement -> cycle .)
    PRINT           reduce using rule 84 (statement -> cycle .)
    FOR             reduce using rule 84 (statement -> cycle .)
    DO              reduce using rule 84 (statement -> cycle .)
    ID              reduce using rule 84 (statement -> cycle .)
    RBRACKET        reduce using rule 84 (statement -> cycle .)
    RETURN          reduce using rule 84 (statement -> cycle .)


state 78

    (85) statement -> call_function .

    IF              reduce using rule 85 (statement -> call_function .)
    PRINT           reduce using rule 85 (statement -> call_function .)
    FOR             reduce using rule 85 (statement -> call_function .)
    DO              reduce using rule 85 (statement -> call_function .)
    ID              reduce using rule 85 (statement -> call_function .)
    RBRACKET        reduce using rule 85 (statement -> call_function .)
    RETURN          reduce using rule 85 (statement -> call_function .)


state 79

    (57) assign -> variable . keep_assign specialf_assign SEMICOLON
    (61) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 103

    keep_assign                    shift and go to state 102

state 80

    (62) condition -> IF . LPAREN exp RPAREN body condition2 SEMICOLON

    LPAREN          shift and go to state 104


state 81

    (65) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 82

    (71) cycle -> for .

    IF              reduce using rule 71 (cycle -> for .)
    PRINT           reduce using rule 71 (cycle -> for .)
    FOR             reduce using rule 71 (cycle -> for .)
    DO              reduce using rule 71 (cycle -> for .)
    ID              reduce using rule 71 (cycle -> for .)
    RBRACKET        reduce using rule 71 (cycle -> for .)
    RETURN          reduce using rule 71 (cycle -> for .)


state 83

    (72) cycle -> while .

    IF              reduce using rule 72 (cycle -> while .)
    PRINT           reduce using rule 72 (cycle -> while .)
    FOR             reduce using rule 72 (cycle -> while .)
    DO              reduce using rule 72 (cycle -> while .)
    ID              reduce using rule 72 (cycle -> while .)
    RBRACKET        reduce using rule 72 (cycle -> while .)
    RETURN          reduce using rule 72 (cycle -> while .)


state 84

    (77) call_function -> test . LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 106


state 85

    (34) variable -> id_saver . variable_array
    (35) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (36) variable_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 108
    ASSIGN          reduce using rule 2 (empty -> .)
    POWER           reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 107
    empty                          shift and go to state 109

state 86

    (74) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 110


state 87

    (78) test -> ID . empty
    (3) id_saver -> ID . empty
    (2) empty -> .

    LPAREN          reduce using rule 2 (empty -> .)
    LSQBRACKET      reduce using rule 2 (empty -> .)
    ASSIGN          reduce using rule 2 (empty -> .)

    empty                          shift and go to state 111

state 88

    (73) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (54) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 113

    body                           shift and go to state 112

state 89

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    RPAREN          shift and go to state 114


state 90

    (46) param -> s_type . id_saver add_params param2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 115

state 91

    (21) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 21 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 92

    (19) var_multiple -> var_type .

    FUNCTION        reduce using rule 19 (var_multiple -> var_type .)
    MAIN            reduce using rule 19 (var_multiple -> var_type .)
    IF              reduce using rule 19 (var_multiple -> var_type .)
    PRINT           reduce using rule 19 (var_multiple -> var_type .)
    FOR             reduce using rule 19 (var_multiple -> var_type .)
    DO              reduce using rule 19 (var_multiple -> var_type .)
    ID              reduce using rule 19 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 19 (var_multiple -> var_type .)
    RETURN          reduce using rule 19 (var_multiple -> var_type .)


state 93

    (20) var_multiple -> empty .

    FUNCTION        reduce using rule 20 (var_multiple -> empty .)
    MAIN            reduce using rule 20 (var_multiple -> empty .)
    IF              reduce using rule 20 (var_multiple -> empty .)
    PRINT           reduce using rule 20 (var_multiple -> empty .)
    FOR             reduce using rule 20 (var_multiple -> empty .)
    DO              reduce using rule 20 (var_multiple -> empty .)
    ID              reduce using rule 20 (var_multiple -> empty .)
    RBRACKET        reduce using rule 20 (var_multiple -> empty .)
    RETURN          reduce using rule 20 (var_multiple -> empty .)


state 94

    (22) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (22) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (23) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 55
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 116
    empty                          shift and go to state 56

state 95

    (25) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (19) var_multiple -> . var_type
    (20) var_multiple -> . empty
    (10) var_type -> . var_c_type
    (11) var_type -> . var_s_type
    (2) empty -> .
    (21) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (25) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (17) c_type -> . DATAFRAME
    (18) c_type -> . DATE
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    MAIN            reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 22
    var_multiple                   shift and go to state 117
    var_type                       shift and go to state 92
    empty                          shift and go to state 93
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21

state 96

    (26) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (29) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (30) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 48
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 118
    empty                          shift and go to state 49

state 97

    (31) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (33) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 60

    var_s_dimesions                shift and go to state 119

state 98

    (29) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 29 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 29 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 99

    (32) var_s_matrix -> empty .

    COMMA           reduce using rule 32 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 32 (var_s_matrix -> empty .)


state 100

    (52) program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 52 (program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .)


state 101

    (55) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 55 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 55 (inner_body -> statement inner_body .)


state 102

    (57) assign -> variable keep_assign . specialf_assign SEMICOLON
    (58) specialf_assign -> . exp
    (59) specialf_assign -> . special_function
    (60) specialf_assign -> . read
    (108) exp -> . t_exp exp_or
    (86) special_function -> . exploration
    (87) special_function -> . financial_state
    (88) special_function -> . dummi_regression
    (89) special_function -> . season_analysis
    (90) special_function -> . trend_prediction
    (91) special_function -> . model_predict
    (70) read -> . READ LPAREN variable RPAREN
    (111) t_exp -> . expression t_exp_and
    (92) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (97) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (100) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (98) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (99) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (107) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    READ            shift and go to state 132
    EXPLORATION     shift and go to state 135
    FINANCIAL_STATE shift and go to state 136
    DUMMI_REGRESSION shift and go to state 137
    SEASON_ANALYSIS shift and go to state 138
    TREND_PREDICTION shift and go to state 139
    MODEL_PREDICT   shift and go to state 140
    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    variable                       shift and go to state 120
    specialf_assign                shift and go to state 121
    exp                            shift and go to state 122
    special_function               shift and go to state 123
    read                           shift and go to state 124
    t_exp                          shift and go to state 125
    exploration                    shift and go to state 126
    financial_state                shift and go to state 127
    dummi_regression               shift and go to state 128
    season_analysis                shift and go to state 129
    trend_prediction               shift and go to state 130
    model_predict                  shift and go to state 131
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 103

    (61) keep_assign -> ASSIGN . empty
    (2) empty -> .

    READ            reduce using rule 2 (empty -> .)
    EXPLORATION     reduce using rule 2 (empty -> .)
    FINANCIAL_STATE reduce using rule 2 (empty -> .)
    DUMMI_REGRESSION reduce using rule 2 (empty -> .)
    SEASON_ANALYSIS reduce using rule 2 (empty -> .)
    TREND_PREDICTION reduce using rule 2 (empty -> .)
    MODEL_PREDICT   reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    CTE_FLOAT       reduce using rule 2 (empty -> .)
    CTE_INT         reduce using rule 2 (empty -> .)
    CTE_CHAR        reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    empty                          shift and go to state 152

state 104

    (62) condition -> IF LPAREN . exp RPAREN body condition2 SEMICOLON
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 153
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 105

    (65) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (67) print_many -> . print_type print_many2
    (66) print_type -> . exp
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    print_many                     shift and go to state 154
    print_type                     shift and go to state 155
    exp                            shift and go to state 156
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 106

    (77) call_function -> test LPAREN . exp exp_many RPAREN
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    test                           shift and go to state 84
    exp                            shift and go to state 157
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85

state 107

    (34) variable -> id_saver variable_array .

    ASSIGN          reduce using rule 34 (variable -> id_saver variable_array .)
    POWER           reduce using rule 34 (variable -> id_saver variable_array .)
    MULTIPLY        reduce using rule 34 (variable -> id_saver variable_array .)
    DIVIDE          reduce using rule 34 (variable -> id_saver variable_array .)
    MODULE          reduce using rule 34 (variable -> id_saver variable_array .)
    PLUS            reduce using rule 34 (variable -> id_saver variable_array .)
    MINUS           reduce using rule 34 (variable -> id_saver variable_array .)
    EQUAL           reduce using rule 34 (variable -> id_saver variable_array .)
    NOTEQUAL        reduce using rule 34 (variable -> id_saver variable_array .)
    LTHAN           reduce using rule 34 (variable -> id_saver variable_array .)
    GTHAN           reduce using rule 34 (variable -> id_saver variable_array .)
    AND             reduce using rule 34 (variable -> id_saver variable_array .)
    OR              reduce using rule 34 (variable -> id_saver variable_array .)
    SEMICOLON       reduce using rule 34 (variable -> id_saver variable_array .)
    RPAREN          reduce using rule 34 (variable -> id_saver variable_array .)
    COMMA           reduce using rule 34 (variable -> id_saver variable_array .)
    RSQBRACKET      reduce using rule 34 (variable -> id_saver variable_array .)


state 108

    (35) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 158
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 109

    (36) variable_array -> empty .

    ASSIGN          reduce using rule 36 (variable_array -> empty .)
    POWER           reduce using rule 36 (variable_array -> empty .)
    MULTIPLY        reduce using rule 36 (variable_array -> empty .)
    DIVIDE          reduce using rule 36 (variable_array -> empty .)
    MODULE          reduce using rule 36 (variable_array -> empty .)
    PLUS            reduce using rule 36 (variable_array -> empty .)
    MINUS           reduce using rule 36 (variable_array -> empty .)
    EQUAL           reduce using rule 36 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 36 (variable_array -> empty .)
    LTHAN           reduce using rule 36 (variable_array -> empty .)
    GTHAN           reduce using rule 36 (variable_array -> empty .)
    AND             reduce using rule 36 (variable_array -> empty .)
    OR              reduce using rule 36 (variable_array -> empty .)
    SEMICOLON       reduce using rule 36 (variable_array -> empty .)
    RPAREN          reduce using rule 36 (variable_array -> empty .)
    COMMA           reduce using rule 36 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 36 (variable_array -> empty .)


state 110

    (74) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 159


state 111

    (78) test -> ID empty .
    (3) id_saver -> ID empty .

    LPAREN          reduce using rule 78 (test -> ID empty .)
    LSQBRACKET      reduce using rule 3 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 3 (id_saver -> ID empty .)


state 112

    (73) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 160


state 113

    (54) body -> LBRACKET . inner_body RBRACKET
    (55) inner_body -> . statement inner_body
    (56) inner_body -> . empty
    (81) statement -> . assign
    (82) statement -> . condition
    (83) statement -> . print
    (84) statement -> . cycle
    (85) statement -> . call_function
    (2) empty -> .
    (57) assign -> . variable keep_assign specialf_assign SEMICOLON
    (62) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (65) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (71) cycle -> . for
    (72) cycle -> . while
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (34) variable -> . id_saver variable_array
    (74) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (73) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (78) test -> . ID empty
    (3) id_saver -> . ID empty

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 86
    DO              shift and go to state 88
    ID              shift and go to state 87

    inner_body                     shift and go to state 161
    statement                      shift and go to state 72
    empty                          shift and go to state 73
    assign                         shift and go to state 74
    condition                      shift and go to state 75
    print                          shift and go to state 76
    cycle                          shift and go to state 77
    call_function                  shift and go to state 78
    variable                       shift and go to state 79
    for                            shift and go to state 82
    while                          shift and go to state 83
    test                           shift and go to state 84
    id_saver                       shift and go to state 85

state 114

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET program_function

    LBRACKET        shift and go to state 162


state 115

    (46) param -> s_type id_saver . add_params param2
    (49) add_params -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    add_params                     shift and go to state 163
    empty                          shift and go to state 164

state 116

    (22) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 22 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 117

    (25) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 25 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 118

    (26) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (28) add_s_var -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    add_s_var                      shift and go to state 165
    empty                          shift and go to state 58

state 119

    (31) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 166


state 120

    (138) factor -> variable .

    POWER           reduce using rule 138 (factor -> variable .)
    MULTIPLY        reduce using rule 138 (factor -> variable .)
    DIVIDE          reduce using rule 138 (factor -> variable .)
    MODULE          reduce using rule 138 (factor -> variable .)
    PLUS            reduce using rule 138 (factor -> variable .)
    MINUS           reduce using rule 138 (factor -> variable .)
    EQUAL           reduce using rule 138 (factor -> variable .)
    NOTEQUAL        reduce using rule 138 (factor -> variable .)
    LTHAN           reduce using rule 138 (factor -> variable .)
    GTHAN           reduce using rule 138 (factor -> variable .)
    AND             reduce using rule 138 (factor -> variable .)
    OR              reduce using rule 138 (factor -> variable .)
    SEMICOLON       reduce using rule 138 (factor -> variable .)
    RPAREN          reduce using rule 138 (factor -> variable .)
    COMMA           reduce using rule 138 (factor -> variable .)
    RSQBRACKET      reduce using rule 138 (factor -> variable .)


state 121

    (57) assign -> variable keep_assign specialf_assign . SEMICOLON

    SEMICOLON       shift and go to state 167


state 122

    (58) specialf_assign -> exp .

    SEMICOLON       reduce using rule 58 (specialf_assign -> exp .)


state 123

    (59) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 59 (specialf_assign -> special_function .)


state 124

    (60) specialf_assign -> read .

    SEMICOLON       reduce using rule 60 (specialf_assign -> read .)


state 125

    (108) exp -> t_exp . exp_or
    (109) exp_or -> . OR exp
    (110) exp_or -> . empty
    (2) empty -> .

    OR              shift and go to state 169
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp_or                         shift and go to state 168
    empty                          shift and go to state 170

state 126

    (86) special_function -> exploration .

    SEMICOLON       reduce using rule 86 (special_function -> exploration .)


state 127

    (87) special_function -> financial_state .

    SEMICOLON       reduce using rule 87 (special_function -> financial_state .)


state 128

    (88) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 88 (special_function -> dummi_regression .)


state 129

    (89) special_function -> season_analysis .

    SEMICOLON       reduce using rule 89 (special_function -> season_analysis .)


state 130

    (90) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 90 (special_function -> trend_prediction .)


state 131

    (91) special_function -> model_predict .

    SEMICOLON       reduce using rule 91 (special_function -> model_predict .)


state 132

    (70) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 171


state 133

    (140) factor_exp -> LPAREN . exp RPAREN
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 172
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 134

    (111) t_exp -> expression . t_exp_and
    (112) t_exp_and -> . AND t_exp
    (113) t_exp_and -> . empty
    (2) empty -> .

    AND             shift and go to state 174
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    t_exp_and                      shift and go to state 173
    empty                          shift and go to state 175

state 135

    (92) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 176


state 136

    (97) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 177


state 137

    (100) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 178


state 138

    (98) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 179


state 139

    (99) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    LPAREN          shift and go to state 180


state 140

    (107) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 181


state 141

    (114) expression -> m_exp . expression_comp
    (115) expression_comp -> . expression_comp_2 m_exp
    (116) expression_comp -> . empty
    (117) expression_comp_2 -> . EQUAL
    (118) expression_comp_2 -> . NOTEQUAL
    (119) expression_comp_2 -> . LTHAN
    (120) expression_comp_2 -> . GTHAN
    (2) empty -> .

    EQUAL           shift and go to state 185
    NOTEQUAL        shift and go to state 186
    LTHAN           shift and go to state 187
    GTHAN           shift and go to state 188
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    expression_comp                shift and go to state 182
    expression_comp_2              shift and go to state 183
    empty                          shift and go to state 184

state 142

    (121) m_exp -> term . m_exp_sr
    (122) m_exp_sr -> . m_exp_sr_2 m_exp
    (123) m_exp_sr -> . empty
    (124) m_exp_sr_2 -> . PLUS
    (125) m_exp_sr_2 -> . MINUS
    (2) empty -> .

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp_sr                       shift and go to state 189
    m_exp_sr_2                     shift and go to state 190
    empty                          shift and go to state 191

state 143

    (126) term -> sub_factor . term_pc
    (127) term_pc -> . term_pc_2 term
    (128) term_pc -> . empty
    (129) term_pc_2 -> . MULTIPLY
    (130) term_pc_2 -> . DIVIDE
    (131) term_pc_2 -> . MODULE
    (2) empty -> .

    MULTIPLY        shift and go to state 197
    DIVIDE          shift and go to state 198
    MODULE          shift and go to state 199
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    term_pc                        shift and go to state 194
    term_pc_2                      shift and go to state 195
    empty                          shift and go to state 196

state 144

    (132) sub_factor -> factor . sub_factor_pc
    (133) sub_factor_pc -> . sub_factor_pc_2 sub_factor
    (134) sub_factor_pc -> . empty
    (135) sub_factor_pc_2 -> . POWER empty
    (2) empty -> .

    POWER           shift and go to state 203
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    sub_factor_pc                  shift and go to state 200
    sub_factor_pc_2                shift and go to state 201
    empty                          shift and go to state 202

state 145

    (136) factor -> factor_exp .

    POWER           reduce using rule 136 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 136 (factor -> factor_exp .)
    DIVIDE          reduce using rule 136 (factor -> factor_exp .)
    MODULE          reduce using rule 136 (factor -> factor_exp .)
    PLUS            reduce using rule 136 (factor -> factor_exp .)
    MINUS           reduce using rule 136 (factor -> factor_exp .)
    EQUAL           reduce using rule 136 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 136 (factor -> factor_exp .)
    LTHAN           reduce using rule 136 (factor -> factor_exp .)
    GTHAN           reduce using rule 136 (factor -> factor_exp .)
    AND             reduce using rule 136 (factor -> factor_exp .)
    OR              reduce using rule 136 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 136 (factor -> factor_exp .)
    RPAREN          reduce using rule 136 (factor -> factor_exp .)
    COMMA           reduce using rule 136 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 136 (factor -> factor_exp .)


state 146

    (137) factor -> factor_cte .

    POWER           reduce using rule 137 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 137 (factor -> factor_cte .)
    DIVIDE          reduce using rule 137 (factor -> factor_cte .)
    MODULE          reduce using rule 137 (factor -> factor_cte .)
    PLUS            reduce using rule 137 (factor -> factor_cte .)
    MINUS           reduce using rule 137 (factor -> factor_cte .)
    EQUAL           reduce using rule 137 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 137 (factor -> factor_cte .)
    LTHAN           reduce using rule 137 (factor -> factor_cte .)
    GTHAN           reduce using rule 137 (factor -> factor_cte .)
    AND             reduce using rule 137 (factor -> factor_cte .)
    OR              reduce using rule 137 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 137 (factor -> factor_cte .)
    RPAREN          reduce using rule 137 (factor -> factor_cte .)
    COMMA           reduce using rule 137 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 137 (factor -> factor_cte .)


state 147

    (139) factor -> call_function .

    POWER           reduce using rule 139 (factor -> call_function .)
    MULTIPLY        reduce using rule 139 (factor -> call_function .)
    DIVIDE          reduce using rule 139 (factor -> call_function .)
    MODULE          reduce using rule 139 (factor -> call_function .)
    PLUS            reduce using rule 139 (factor -> call_function .)
    MINUS           reduce using rule 139 (factor -> call_function .)
    EQUAL           reduce using rule 139 (factor -> call_function .)
    NOTEQUAL        reduce using rule 139 (factor -> call_function .)
    LTHAN           reduce using rule 139 (factor -> call_function .)
    GTHAN           reduce using rule 139 (factor -> call_function .)
    AND             reduce using rule 139 (factor -> call_function .)
    OR              reduce using rule 139 (factor -> call_function .)
    SEMICOLON       reduce using rule 139 (factor -> call_function .)
    RPAREN          reduce using rule 139 (factor -> call_function .)
    COMMA           reduce using rule 139 (factor -> call_function .)
    RSQBRACKET      reduce using rule 139 (factor -> call_function .)


state 148

    (141) factor_cte -> CTE_FLOAT .

    POWER           reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    MODULE          reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 141 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 141 (factor_cte -> CTE_FLOAT .)


state 149

    (142) factor_cte -> CTE_INT .

    POWER           reduce using rule 142 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 142 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 142 (factor_cte -> CTE_INT .)
    MODULE          reduce using rule 142 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 142 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 142 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 142 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 142 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 142 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 142 (factor_cte -> CTE_INT .)
    AND             reduce using rule 142 (factor_cte -> CTE_INT .)
    OR              reduce using rule 142 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 142 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 142 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 142 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 142 (factor_cte -> CTE_INT .)


state 150

    (143) factor_cte -> CTE_CHAR .

    POWER           reduce using rule 143 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 143 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 143 (factor_cte -> CTE_CHAR .)
    MODULE          reduce using rule 143 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 143 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 143 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 143 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 143 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 143 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 143 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 143 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 143 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 143 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 143 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 143 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 143 (factor_cte -> CTE_CHAR .)


state 151

    (3) id_saver -> ID . empty
    (78) test -> ID . empty
    (2) empty -> .

    LSQBRACKET      reduce using rule 2 (empty -> .)
    POWER           reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    empty                          shift and go to state 204

state 152

    (61) keep_assign -> ASSIGN empty .

    READ            reduce using rule 61 (keep_assign -> ASSIGN empty .)
    EXPLORATION     reduce using rule 61 (keep_assign -> ASSIGN empty .)
    FINANCIAL_STATE reduce using rule 61 (keep_assign -> ASSIGN empty .)
    DUMMI_REGRESSION reduce using rule 61 (keep_assign -> ASSIGN empty .)
    SEASON_ANALYSIS reduce using rule 61 (keep_assign -> ASSIGN empty .)
    TREND_PREDICTION reduce using rule 61 (keep_assign -> ASSIGN empty .)
    MODEL_PREDICT   reduce using rule 61 (keep_assign -> ASSIGN empty .)
    LPAREN          reduce using rule 61 (keep_assign -> ASSIGN empty .)
    CTE_FLOAT       reduce using rule 61 (keep_assign -> ASSIGN empty .)
    CTE_INT         reduce using rule 61 (keep_assign -> ASSIGN empty .)
    CTE_CHAR        reduce using rule 61 (keep_assign -> ASSIGN empty .)
    ID              reduce using rule 61 (keep_assign -> ASSIGN empty .)


state 153

    (62) condition -> IF LPAREN exp . RPAREN body condition2 SEMICOLON

    RPAREN          shift and go to state 205


state 154

    (65) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 206


state 155

    (67) print_many -> print_type . print_many2
    (68) print_many2 -> . COMMA print_type print_many2
    (69) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 208
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 207
    empty                          shift and go to state 209

state 156

    (66) print_type -> exp .

    COMMA           reduce using rule 66 (print_type -> exp .)
    RPAREN          reduce using rule 66 (print_type -> exp .)


state 157

    (77) call_function -> test LPAREN exp . exp_many RPAREN
    (79) exp_many -> . COMMA exp exp_many
    (80) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 211
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 210
    empty                          shift and go to state 212

state 158

    (35) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 213


state 159

    (74) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 214


state 160

    (73) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 215


state 161

    (54) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 216


state 162

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET program_function
    (12) program_vars -> . VAR var_type
    (13) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 217
    empty                          shift and go to state 11

state 163

    (46) param -> s_type id_saver add_params . param2
    (47) param2 -> . COMMA s_type id_saver add_params param2
    (48) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 219
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 218
    empty                          shift and go to state 220

state 164

    (49) add_params -> empty .

    COMMA           reduce using rule 49 (add_params -> empty .)
    RPAREN          reduce using rule 49 (add_params -> empty .)


state 165

    (26) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (26) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (27) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 67
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 221
    empty                          shift and go to state 68

state 166

    (31) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 31 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 31 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 167

    (57) assign -> variable keep_assign specialf_assign SEMICOLON .

    IF              reduce using rule 57 (assign -> variable keep_assign specialf_assign SEMICOLON .)
    PRINT           reduce using rule 57 (assign -> variable keep_assign specialf_assign SEMICOLON .)
    FOR             reduce using rule 57 (assign -> variable keep_assign specialf_assign SEMICOLON .)
    DO              reduce using rule 57 (assign -> variable keep_assign specialf_assign SEMICOLON .)
    ID              reduce using rule 57 (assign -> variable keep_assign specialf_assign SEMICOLON .)
    RBRACKET        reduce using rule 57 (assign -> variable keep_assign specialf_assign SEMICOLON .)
    RETURN          reduce using rule 57 (assign -> variable keep_assign specialf_assign SEMICOLON .)


state 168

    (108) exp -> t_exp exp_or .

    SEMICOLON       reduce using rule 108 (exp -> t_exp exp_or .)
    RPAREN          reduce using rule 108 (exp -> t_exp exp_or .)
    COMMA           reduce using rule 108 (exp -> t_exp exp_or .)
    RSQBRACKET      reduce using rule 108 (exp -> t_exp exp_or .)


state 169

    (109) exp_or -> OR . exp
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 222
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 170

    (110) exp_or -> empty .

    SEMICOLON       reduce using rule 110 (exp_or -> empty .)
    RPAREN          reduce using rule 110 (exp_or -> empty .)
    COMMA           reduce using rule 110 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 110 (exp_or -> empty .)


state 171

    (70) read -> READ LPAREN . variable RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 223
    id_saver                       shift and go to state 85

state 172

    (140) factor_exp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 224


state 173

    (111) t_exp -> expression t_exp_and .

    OR              reduce using rule 111 (t_exp -> expression t_exp_and .)
    SEMICOLON       reduce using rule 111 (t_exp -> expression t_exp_and .)
    RPAREN          reduce using rule 111 (t_exp -> expression t_exp_and .)
    COMMA           reduce using rule 111 (t_exp -> expression t_exp_and .)
    RSQBRACKET      reduce using rule 111 (t_exp -> expression t_exp_and .)


state 174

    (112) t_exp_and -> AND . t_exp
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    t_exp                          shift and go to state 225
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 175

    (113) t_exp_and -> empty .

    OR              reduce using rule 113 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 113 (t_exp_and -> empty .)
    RPAREN          reduce using rule 113 (t_exp_and -> empty .)
    COMMA           reduce using rule 113 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 113 (t_exp_and -> empty .)


state 176

    (92) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 226
    id_saver                       shift and go to state 85

state 177

    (97) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 227
    id_saver                       shift and go to state 85

state 178

    (100) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 228
    id_saver                       shift and go to state 85

state 179

    (98) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 229
    id_saver                       shift and go to state 85

state 180

    (99) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 230
    id_saver                       shift and go to state 85

state 181

    (107) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 231
    id_saver                       shift and go to state 85

state 182

    (114) expression -> m_exp expression_comp .

    AND             reduce using rule 114 (expression -> m_exp expression_comp .)
    OR              reduce using rule 114 (expression -> m_exp expression_comp .)
    SEMICOLON       reduce using rule 114 (expression -> m_exp expression_comp .)
    RPAREN          reduce using rule 114 (expression -> m_exp expression_comp .)
    COMMA           reduce using rule 114 (expression -> m_exp expression_comp .)
    RSQBRACKET      reduce using rule 114 (expression -> m_exp expression_comp .)


state 183

    (115) expression_comp -> expression_comp_2 . m_exp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    m_exp                          shift and go to state 232
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 184

    (116) expression_comp -> empty .

    AND             reduce using rule 116 (expression_comp -> empty .)
    OR              reduce using rule 116 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 116 (expression_comp -> empty .)
    RPAREN          reduce using rule 116 (expression_comp -> empty .)
    COMMA           reduce using rule 116 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 116 (expression_comp -> empty .)


state 185

    (117) expression_comp_2 -> EQUAL .

    LPAREN          reduce using rule 117 (expression_comp_2 -> EQUAL .)
    CTE_FLOAT       reduce using rule 117 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 117 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 117 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 117 (expression_comp_2 -> EQUAL .)


state 186

    (118) expression_comp_2 -> NOTEQUAL .

    LPAREN          reduce using rule 118 (expression_comp_2 -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 118 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 118 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 118 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 118 (expression_comp_2 -> NOTEQUAL .)


state 187

    (119) expression_comp_2 -> LTHAN .

    LPAREN          reduce using rule 119 (expression_comp_2 -> LTHAN .)
    CTE_FLOAT       reduce using rule 119 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 119 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 119 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 119 (expression_comp_2 -> LTHAN .)


state 188

    (120) expression_comp_2 -> GTHAN .

    LPAREN          reduce using rule 120 (expression_comp_2 -> GTHAN .)
    CTE_FLOAT       reduce using rule 120 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 120 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 120 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 120 (expression_comp_2 -> GTHAN .)


state 189

    (121) m_exp -> term m_exp_sr .

    EQUAL           reduce using rule 121 (m_exp -> term m_exp_sr .)
    NOTEQUAL        reduce using rule 121 (m_exp -> term m_exp_sr .)
    LTHAN           reduce using rule 121 (m_exp -> term m_exp_sr .)
    GTHAN           reduce using rule 121 (m_exp -> term m_exp_sr .)
    AND             reduce using rule 121 (m_exp -> term m_exp_sr .)
    OR              reduce using rule 121 (m_exp -> term m_exp_sr .)
    SEMICOLON       reduce using rule 121 (m_exp -> term m_exp_sr .)
    RPAREN          reduce using rule 121 (m_exp -> term m_exp_sr .)
    COMMA           reduce using rule 121 (m_exp -> term m_exp_sr .)
    RSQBRACKET      reduce using rule 121 (m_exp -> term m_exp_sr .)


state 190

    (122) m_exp_sr -> m_exp_sr_2 . m_exp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    m_exp                          shift and go to state 233
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 191

    (123) m_exp_sr -> empty .

    EQUAL           reduce using rule 123 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 123 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 123 (m_exp_sr -> empty .)
    GTHAN           reduce using rule 123 (m_exp_sr -> empty .)
    AND             reduce using rule 123 (m_exp_sr -> empty .)
    OR              reduce using rule 123 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 123 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 123 (m_exp_sr -> empty .)
    COMMA           reduce using rule 123 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 123 (m_exp_sr -> empty .)


state 192

    (124) m_exp_sr_2 -> PLUS .

    LPAREN          reduce using rule 124 (m_exp_sr_2 -> PLUS .)
    CTE_FLOAT       reduce using rule 124 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 124 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 124 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 124 (m_exp_sr_2 -> PLUS .)


state 193

    (125) m_exp_sr_2 -> MINUS .

    LPAREN          reduce using rule 125 (m_exp_sr_2 -> MINUS .)
    CTE_FLOAT       reduce using rule 125 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 125 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 125 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 125 (m_exp_sr_2 -> MINUS .)


state 194

    (126) term -> sub_factor term_pc .

    PLUS            reduce using rule 126 (term -> sub_factor term_pc .)
    MINUS           reduce using rule 126 (term -> sub_factor term_pc .)
    EQUAL           reduce using rule 126 (term -> sub_factor term_pc .)
    NOTEQUAL        reduce using rule 126 (term -> sub_factor term_pc .)
    LTHAN           reduce using rule 126 (term -> sub_factor term_pc .)
    GTHAN           reduce using rule 126 (term -> sub_factor term_pc .)
    AND             reduce using rule 126 (term -> sub_factor term_pc .)
    OR              reduce using rule 126 (term -> sub_factor term_pc .)
    SEMICOLON       reduce using rule 126 (term -> sub_factor term_pc .)
    RPAREN          reduce using rule 126 (term -> sub_factor term_pc .)
    COMMA           reduce using rule 126 (term -> sub_factor term_pc .)
    RSQBRACKET      reduce using rule 126 (term -> sub_factor term_pc .)


state 195

    (127) term_pc -> term_pc_2 . term
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    term                           shift and go to state 234
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 196

    (128) term_pc -> empty .

    PLUS            reduce using rule 128 (term_pc -> empty .)
    MINUS           reduce using rule 128 (term_pc -> empty .)
    EQUAL           reduce using rule 128 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 128 (term_pc -> empty .)
    LTHAN           reduce using rule 128 (term_pc -> empty .)
    GTHAN           reduce using rule 128 (term_pc -> empty .)
    AND             reduce using rule 128 (term_pc -> empty .)
    OR              reduce using rule 128 (term_pc -> empty .)
    SEMICOLON       reduce using rule 128 (term_pc -> empty .)
    RPAREN          reduce using rule 128 (term_pc -> empty .)
    COMMA           reduce using rule 128 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 128 (term_pc -> empty .)


state 197

    (129) term_pc_2 -> MULTIPLY .

    LPAREN          reduce using rule 129 (term_pc_2 -> MULTIPLY .)
    CTE_FLOAT       reduce using rule 129 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 129 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 129 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 129 (term_pc_2 -> MULTIPLY .)


state 198

    (130) term_pc_2 -> DIVIDE .

    LPAREN          reduce using rule 130 (term_pc_2 -> DIVIDE .)
    CTE_FLOAT       reduce using rule 130 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 130 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 130 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 130 (term_pc_2 -> DIVIDE .)


state 199

    (131) term_pc_2 -> MODULE .

    LPAREN          reduce using rule 131 (term_pc_2 -> MODULE .)
    CTE_FLOAT       reduce using rule 131 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 131 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 131 (term_pc_2 -> MODULE .)
    ID              reduce using rule 131 (term_pc_2 -> MODULE .)


state 200

    (132) sub_factor -> factor sub_factor_pc .

    MULTIPLY        reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    DIVIDE          reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    MODULE          reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    PLUS            reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    MINUS           reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    EQUAL           reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    NOTEQUAL        reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    LTHAN           reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    GTHAN           reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    AND             reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    OR              reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    SEMICOLON       reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    RPAREN          reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    COMMA           reduce using rule 132 (sub_factor -> factor sub_factor_pc .)
    RSQBRACKET      reduce using rule 132 (sub_factor -> factor sub_factor_pc .)


state 201

    (133) sub_factor_pc -> sub_factor_pc_2 . sub_factor
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    sub_factor                     shift and go to state 235
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 202

    (134) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 134 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 134 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 134 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 134 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 134 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 134 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 134 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 134 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 134 (sub_factor_pc -> empty .)
    AND             reduce using rule 134 (sub_factor_pc -> empty .)
    OR              reduce using rule 134 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 134 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 134 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 134 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 134 (sub_factor_pc -> empty .)


state 203

    (135) sub_factor_pc_2 -> POWER . empty
    (2) empty -> .

    LPAREN          reduce using rule 2 (empty -> .)
    CTE_FLOAT       reduce using rule 2 (empty -> .)
    CTE_INT         reduce using rule 2 (empty -> .)
    CTE_CHAR        reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    empty                          shift and go to state 236

state 204

    (3) id_saver -> ID empty .
    (78) test -> ID empty .

    LSQBRACKET      reduce using rule 3 (id_saver -> ID empty .)
    POWER           reduce using rule 3 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 3 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 3 (id_saver -> ID empty .)
    MODULE          reduce using rule 3 (id_saver -> ID empty .)
    PLUS            reduce using rule 3 (id_saver -> ID empty .)
    MINUS           reduce using rule 3 (id_saver -> ID empty .)
    EQUAL           reduce using rule 3 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 3 (id_saver -> ID empty .)
    LTHAN           reduce using rule 3 (id_saver -> ID empty .)
    GTHAN           reduce using rule 3 (id_saver -> ID empty .)
    AND             reduce using rule 3 (id_saver -> ID empty .)
    OR              reduce using rule 3 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 3 (id_saver -> ID empty .)
    RPAREN          reduce using rule 3 (id_saver -> ID empty .)
    COMMA           reduce using rule 3 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 3 (id_saver -> ID empty .)
    LPAREN          reduce using rule 78 (test -> ID empty .)


state 205

    (62) condition -> IF LPAREN exp RPAREN . body condition2 SEMICOLON
    (54) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 113

    body                           shift and go to state 237

state 206

    (65) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 238


state 207

    (67) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 67 (print_many -> print_type print_many2 .)


state 208

    (68) print_many2 -> COMMA . print_type print_many2
    (66) print_type -> . exp
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    print_type                     shift and go to state 239
    exp                            shift and go to state 156
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 209

    (69) print_many2 -> empty .

    RPAREN          reduce using rule 69 (print_many2 -> empty .)


state 210

    (77) call_function -> test LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 240


state 211

    (79) exp_many -> COMMA . exp exp_many
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 241
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 212

    (80) exp_many -> empty .

    RPAREN          reduce using rule 80 (exp_many -> empty .)


state 213

    (35) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (37) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (38) variable_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 242
    ASSIGN          reduce using rule 2 (empty -> .)
    POWER           reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    MODULE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_matrix                shift and go to state 243
    empty                          shift and go to state 244

state 214

    (74) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (75) for_end -> . int_const_saver
    (76) for_end -> . ID
    (4) int_const_saver -> . CTE_INT empty

    ID              shift and go to state 245
    CTE_INT         shift and go to state 248

    for_end                        shift and go to state 246
    int_const_saver                shift and go to state 247

state 215

    (73) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 249
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 216

    (54) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 54 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 54 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 54 (body -> LBRACKET inner_body RBRACKET .)


state 217

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET program_function
    (55) inner_body -> . statement inner_body
    (56) inner_body -> . empty
    (81) statement -> . assign
    (82) statement -> . condition
    (83) statement -> . print
    (84) statement -> . cycle
    (85) statement -> . call_function
    (2) empty -> .
    (57) assign -> . variable keep_assign specialf_assign SEMICOLON
    (62) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (65) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (71) cycle -> . for
    (72) cycle -> . while
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (34) variable -> . id_saver variable_array
    (74) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (73) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (78) test -> . ID empty
    (3) id_saver -> . ID empty

    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 86
    DO              shift and go to state 88
    ID              shift and go to state 87

    id_saver                       shift and go to state 85
    inner_body                     shift and go to state 250
    statement                      shift and go to state 72
    empty                          shift and go to state 73
    assign                         shift and go to state 74
    condition                      shift and go to state 75
    print                          shift and go to state 76
    cycle                          shift and go to state 77
    call_function                  shift and go to state 78
    variable                       shift and go to state 79
    for                            shift and go to state 82
    while                          shift and go to state 83
    test                           shift and go to state 84

state 218

    (46) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 46 (param -> s_type id_saver add_params param2 .)


state 219

    (47) param2 -> COMMA . s_type id_saver add_params param2
    (14) s_type -> . INT
    (15) s_type -> . FLOAT
    (16) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 251

state 220

    (48) param2 -> empty .

    RPAREN          reduce using rule 48 (param2 -> empty .)


state 221

    (26) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 26 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 222

    (109) exp_or -> OR exp .

    SEMICOLON       reduce using rule 109 (exp_or -> OR exp .)
    RPAREN          reduce using rule 109 (exp_or -> OR exp .)
    COMMA           reduce using rule 109 (exp_or -> OR exp .)
    RSQBRACKET      reduce using rule 109 (exp_or -> OR exp .)


state 223

    (70) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 252


state 224

    (140) factor_exp -> LPAREN exp RPAREN .

    POWER           reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    MODULE          reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    LTHAN           reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    GTHAN           reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)
    RSQBRACKET      reduce using rule 140 (factor_exp -> LPAREN exp RPAREN .)


state 225

    (112) t_exp_and -> AND t_exp .

    OR              reduce using rule 112 (t_exp_and -> AND t_exp .)
    SEMICOLON       reduce using rule 112 (t_exp_and -> AND t_exp .)
    RPAREN          reduce using rule 112 (t_exp_and -> AND t_exp .)
    COMMA           reduce using rule 112 (t_exp_and -> AND t_exp .)
    RSQBRACKET      reduce using rule 112 (t_exp_and -> AND t_exp .)


state 226

    (92) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (93) explore_var -> . COMMA variable
    (94) explore_var -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 254
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    explore_var                    shift and go to state 253
    empty                          shift and go to state 255

state 227

    (97) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 256


state 228

    (100) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 257


state 229

    (98) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 258


state 230

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 259


state 231

    (107) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 260


state 232

    (115) expression_comp -> expression_comp_2 m_exp .

    AND             reduce using rule 115 (expression_comp -> expression_comp_2 m_exp .)
    OR              reduce using rule 115 (expression_comp -> expression_comp_2 m_exp .)
    SEMICOLON       reduce using rule 115 (expression_comp -> expression_comp_2 m_exp .)
    RPAREN          reduce using rule 115 (expression_comp -> expression_comp_2 m_exp .)
    COMMA           reduce using rule 115 (expression_comp -> expression_comp_2 m_exp .)
    RSQBRACKET      reduce using rule 115 (expression_comp -> expression_comp_2 m_exp .)


state 233

    (122) m_exp_sr -> m_exp_sr_2 m_exp .

    EQUAL           reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GTHAN           reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 122 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 234

    (127) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 127 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 127 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 127 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 127 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 127 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 127 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 127 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 127 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 127 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 127 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 127 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 127 (term_pc -> term_pc_2 term .)


state 235

    (133) sub_factor_pc -> sub_factor_pc_2 sub_factor .

    MULTIPLY        reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    DIVIDE          reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MODULE          reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    PLUS            reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MINUS           reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    EQUAL           reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    NOTEQUAL        reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LTHAN           reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GTHAN           reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    AND             reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    OR              reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    SEMICOLON       reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RPAREN          reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    COMMA           reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RSQBRACKET      reduce using rule 133 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)


state 236

    (135) sub_factor_pc_2 -> POWER empty .

    LPAREN          reduce using rule 135 (sub_factor_pc_2 -> POWER empty .)
    CTE_FLOAT       reduce using rule 135 (sub_factor_pc_2 -> POWER empty .)
    CTE_INT         reduce using rule 135 (sub_factor_pc_2 -> POWER empty .)
    CTE_CHAR        reduce using rule 135 (sub_factor_pc_2 -> POWER empty .)
    ID              reduce using rule 135 (sub_factor_pc_2 -> POWER empty .)


state 237

    (62) condition -> IF LPAREN exp RPAREN body . condition2 SEMICOLON
    (63) condition2 -> . ELSE body
    (64) condition2 -> . empty
    (2) empty -> .

    ELSE            shift and go to state 262
    SEMICOLON       reduce using rule 2 (empty -> .)

    condition2                     shift and go to state 261
    empty                          shift and go to state 263

state 238

    (65) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 65 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 65 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 65 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 65 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 65 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 65 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 239

    (68) print_many2 -> COMMA print_type . print_many2
    (68) print_many2 -> . COMMA print_type print_many2
    (69) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 208
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 264
    empty                          shift and go to state 209

state 240

    (77) call_function -> test LPAREN exp exp_many RPAREN .

    IF              reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    POWER           reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    MODULE          reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 77 (call_function -> test LPAREN exp exp_many RPAREN .)


state 241

    (79) exp_many -> COMMA exp . exp_many
    (79) exp_many -> . COMMA exp exp_many
    (80) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 211
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 265
    empty                          shift and go to state 212

state 242

    (37) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 266
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 243

    (35) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    POWER           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 35 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 244

    (38) variable_matrix -> empty .

    ASSIGN          reduce using rule 38 (variable_matrix -> empty .)
    POWER           reduce using rule 38 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 38 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 38 (variable_matrix -> empty .)
    MODULE          reduce using rule 38 (variable_matrix -> empty .)
    PLUS            reduce using rule 38 (variable_matrix -> empty .)
    MINUS           reduce using rule 38 (variable_matrix -> empty .)
    EQUAL           reduce using rule 38 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 38 (variable_matrix -> empty .)
    LTHAN           reduce using rule 38 (variable_matrix -> empty .)
    GTHAN           reduce using rule 38 (variable_matrix -> empty .)
    AND             reduce using rule 38 (variable_matrix -> empty .)
    OR              reduce using rule 38 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 38 (variable_matrix -> empty .)
    RPAREN          reduce using rule 38 (variable_matrix -> empty .)
    COMMA           reduce using rule 38 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 38 (variable_matrix -> empty .)


state 245

    (76) for_end -> ID .

    RPAREN          reduce using rule 76 (for_end -> ID .)


state 246

    (74) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 267


state 247

    (75) for_end -> int_const_saver .

    RPAREN          reduce using rule 75 (for_end -> int_const_saver .)


state 248

    (4) int_const_saver -> CTE_INT . empty
    (2) empty -> .

    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 268

state 249

    (73) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 269


state 250

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET program_function
    (50) return -> . RETURN exp SEMICOLON
    (51) return -> . empty
    (2) empty -> .

    RETURN          shift and go to state 271
    RBRACKET        reduce using rule 2 (empty -> .)

    return                         shift and go to state 270
    empty                          shift and go to state 272

state 251

    (47) param2 -> COMMA s_type . id_saver add_params param2
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 273

state 252

    (70) read -> READ LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 70 (read -> READ LPAREN variable RPAREN .)


state 253

    (92) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (95) explor_cte -> . COMMA int_const_saver
    (96) explor_cte -> . empty
    (2) empty -> .

    COMMA           shift and go to state 275
    RPAREN          reduce using rule 2 (empty -> .)

    explor_cte                     shift and go to state 274
    empty                          shift and go to state 276

state 254

    (93) explore_var -> COMMA . variable
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 277
    id_saver                       shift and go to state 85

state 255

    (94) explore_var -> empty .

    COMMA           reduce using rule 94 (explore_var -> empty .)
    RPAREN          reduce using rule 94 (explore_var -> empty .)


state 256

    (97) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 278
    id_saver                       shift and go to state 85

state 257

    (100) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 279
    id_saver                       shift and go to state 85

state 258

    (98) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 98 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 259

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (4) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 248

    int_const_saver                shift and go to state 280

state 260

    (107) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 281
    id_saver                       shift and go to state 85

state 261

    (62) condition -> IF LPAREN exp RPAREN body condition2 . SEMICOLON

    SEMICOLON       shift and go to state 282


state 262

    (63) condition2 -> ELSE . body
    (54) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 113

    body                           shift and go to state 283

state 263

    (64) condition2 -> empty .

    SEMICOLON       reduce using rule 64 (condition2 -> empty .)


state 264

    (68) print_many2 -> COMMA print_type print_many2 .

    RPAREN          reduce using rule 68 (print_many2 -> COMMA print_type print_many2 .)


state 265

    (79) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 79 (exp_many -> COMMA exp exp_many .)


state 266

    (37) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 284


state 267

    (74) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (54) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 113

    body                           shift and go to state 285

state 268

    (4) int_const_saver -> CTE_INT empty .

    RPAREN          reduce using rule 4 (int_const_saver -> CTE_INT empty .)
    COMMA           reduce using rule 4 (int_const_saver -> CTE_INT empty .)


state 269

    (73) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 286


state 270

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET program_function

    RBRACKET        shift and go to state 287


state 271

    (50) return -> RETURN . exp SEMICOLON
    (108) exp -> . t_exp exp_or
    (111) t_exp -> . expression t_exp_and
    (114) expression -> . m_exp expression_comp
    (121) m_exp -> . term m_exp_sr
    (126) term -> . sub_factor term_pc
    (132) sub_factor -> . factor sub_factor_pc
    (136) factor -> . factor_exp
    (137) factor -> . factor_cte
    (138) factor -> . variable
    (139) factor -> . call_function
    (140) factor_exp -> . LPAREN exp RPAREN
    (141) factor_cte -> . CTE_FLOAT
    (142) factor_cte -> . CTE_INT
    (143) factor_cte -> . CTE_CHAR
    (34) variable -> . id_saver variable_array
    (77) call_function -> . test LPAREN exp exp_many RPAREN
    (3) id_saver -> . ID empty
    (78) test -> . ID empty

    LPAREN          shift and go to state 133
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    CTE_CHAR        shift and go to state 150
    ID              shift and go to state 151

    exp                            shift and go to state 288
    t_exp                          shift and go to state 125
    expression                     shift and go to state 134
    m_exp                          shift and go to state 141
    term                           shift and go to state 142
    sub_factor                     shift and go to state 143
    factor                         shift and go to state 144
    factor_exp                     shift and go to state 145
    factor_cte                     shift and go to state 146
    variable                       shift and go to state 120
    call_function                  shift and go to state 147
    id_saver                       shift and go to state 85
    test                           shift and go to state 84

state 272

    (51) return -> empty .

    RBRACKET        reduce using rule 51 (return -> empty .)


state 273

    (47) param2 -> COMMA s_type id_saver . add_params param2
    (49) add_params -> . empty
    (2) empty -> .

    COMMA           reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)

    add_params                     shift and go to state 289
    empty                          shift and go to state 164

state 274

    (92) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 290


state 275

    (95) explor_cte -> COMMA . int_const_saver
    (4) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 248

    int_const_saver                shift and go to state 291

state 276

    (96) explor_cte -> empty .

    RPAREN          reduce using rule 96 (explor_cte -> empty .)


state 277

    (93) explore_var -> COMMA variable .

    COMMA           reduce using rule 93 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 93 (explore_var -> COMMA variable .)


state 278

    (97) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 292


state 279

    (100) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (101) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (102) dr_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 293
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    dr_array                       shift and go to state 294
    empty                          shift and go to state 295

state 280

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver . COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 296


state 281

    (107) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 297


state 282

    (62) condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .

    IF              reduce using rule 62 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    PRINT           reduce using rule 62 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FOR             reduce using rule 62 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DO              reduce using rule 62 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ID              reduce using rule 62 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RBRACKET        reduce using rule 62 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RETURN          reduce using rule 62 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)


state 283

    (63) condition2 -> ELSE body .

    SEMICOLON       reduce using rule 63 (condition2 -> ELSE body .)


state 284

    (37) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    POWER           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MODULE          reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 37 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 285

    (74) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 298


state 286

    (73) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 73 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 73 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 73 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 73 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 73 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 73 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 73 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 287

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET . program_function
    (39) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (40) program_function -> . empty
    (2) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 2 (empty -> .)

    program_function               shift and go to state 299
    empty                          shift and go to state 17

state 288

    (50) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 300


state 289

    (47) param2 -> COMMA s_type id_saver add_params . param2
    (47) param2 -> . COMMA s_type id_saver add_params param2
    (48) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 219
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 301
    empty                          shift and go to state 220

state 290

    (92) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 92 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 291

    (95) explor_cte -> COMMA int_const_saver .

    RPAREN          reduce using rule 95 (explor_cte -> COMMA int_const_saver .)


state 292

    (97) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 302
    id_saver                       shift and go to state 85

state 293

    (101) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 303


state 294

    (100) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (105) dr_int -> . COMMA int_const_saver
    (106) dr_int -> . empty
    (2) empty -> .

    COMMA           shift and go to state 304
    RPAREN          reduce using rule 2 (empty -> .)

    dr_int                         shift and go to state 305
    empty                          shift and go to state 306

state 295

    (102) dr_array -> empty .

    COMMA           reduce using rule 102 (dr_array -> empty .)
    RPAREN          reduce using rule 102 (dr_array -> empty .)


state 296

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA . int_const_saver COMMA int_const_saver RPAREN
    (4) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 248

    int_const_saver                shift and go to state 307

state 297

    (107) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 308


state 298

    (74) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 74 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 74 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 74 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 74 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 74 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 74 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 74 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 299

    (39) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .

    MAIN            reduce using rule 39 (program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .)


state 300

    (50) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 50 (return -> RETURN exp SEMICOLON .)


state 301

    (47) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 47 (param2 -> COMMA s_type id_saver add_params param2 .)


state 302

    (97) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 309


state 303

    (101) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 310


state 304

    (105) dr_int -> COMMA . int_const_saver
    (4) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 248

    int_const_saver                shift and go to state 311

state 305

    (100) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 312


state 306

    (106) dr_int -> empty .

    RPAREN          reduce using rule 106 (dr_int -> empty .)


state 307

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver . COMMA int_const_saver RPAREN

    COMMA           shift and go to state 313


state 308

    (107) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 107 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 309

    (97) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (34) variable -> . id_saver variable_array
    (3) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 314
    id_saver                       shift and go to state 85

state 310

    (101) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (103) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (104) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 315
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 316
    empty                          shift and go to state 317

state 311

    (105) dr_int -> COMMA int_const_saver .

    RPAREN          reduce using rule 105 (dr_int -> COMMA int_const_saver .)


state 312

    (100) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 100 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 313

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA . int_const_saver RPAREN
    (4) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 248

    int_const_saver                shift and go to state 318

state 314

    (97) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 319


state 315

    (103) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 320


state 316

    (101) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 321


state 317

    (104) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 104 (dr_array_mp -> empty .)


state 318

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver . RPAREN

    RPAREN          shift and go to state 322


state 319

    (97) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 97 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 320

    (103) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (103) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (104) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 315
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 323
    empty                          shift and go to state 317

state 321

    (101) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 101 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 101 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 322

    (99) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .

    SEMICOLON       reduce using rule 99 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .)


state 323

    (103) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 103 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 226 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 279 resolved as shift
