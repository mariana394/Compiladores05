Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END
Rule 2     empty -> <empty>
Rule 3     program_libraries -> from_library import_library
Rule 4     program_libraries -> empty
Rule 5     from_library -> FROM ID
Rule 6     from_library -> empty
Rule 7     import_library -> IMPORT ID AS ID program_libraries
Rule 8     var_type -> var_c_type
Rule 9     var_type -> var_s_type
Rule 10    program_vars -> VAR var_type
Rule 11    program_vars -> empty
Rule 12    s_type -> INT
Rule 13    s_type -> FLOAT
Rule 14    s_type -> CHAR
Rule 15    c_type -> DATAFRAME
Rule 16    c_type -> DATE
Rule 17    var_multiple -> var_type
Rule 18    var_multiple -> empty
Rule 19    var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple
Rule 20    var_c_type2 -> COMMA ID var_c_type2
Rule 21    var_c_type2 -> empty
Rule 22    var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
Rule 23    var_s_type2 -> COMMA ID var_s_array var_s_type2
Rule 24    var_s_type2 -> empty
Rule 25    var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
Rule 26    var_s_array -> empty
Rule 27    var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET
Rule 28    var_s_matrix -> empty
Rule 29    variable -> ID variable_array
Rule 30    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 31    variable_array -> empty
Rule 32    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 33    variable_matrix -> empty
Rule 34    program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET
Rule 35    function_type -> s_type
Rule 36    function_type -> VOID
Rule 37    param -> s_type ID param2
Rule 38    param2 -> COMMA s_type ID param2
Rule 39    param2 -> empty
Rule 40    return -> RETURN exp SEMICOLON
Rule 41    return -> empty
Rule 42    program_main -> MAIN LBRACKET program_vars inner_body RBRACKET
Rule 43    body -> LBRACKET inner_body RBRACKET
Rule 44    inner_body -> statement inner_body
Rule 45    inner_body -> empty
Rule 46    assign -> variable ASSIGN specialf_assign SEMICOLON
Rule 47    specialf_assign -> exp
Rule 48    specialf_assign -> special_function
Rule 49    specialf_assign -> read
Rule 50    condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON
Rule 51    condition2 -> ELSE body
Rule 52    condition2 -> empty
Rule 53    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 54    print_type -> exp
Rule 55    print_many -> print_type print_many2
Rule 56    print_many2 -> COMMA print_type print_many2
Rule 57    print_many2 -> empty
Rule 58    read -> READ LPAREN variable RPAREN
Rule 59    cycle -> for
Rule 60    cycle -> while
Rule 61    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 62    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 63    for_end -> CTE_INT
Rule 64    for_end -> ID
Rule 65    call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon
Rule 66    optional_semicolon -> empty
Rule 67    optional_semicolon -> SEMICOLON
Rule 68    exp_many -> COMMA exp exp_many
Rule 69    exp_many -> empty
Rule 70    statement -> assign
Rule 71    statement -> condition
Rule 72    statement -> print
Rule 73    statement -> cycle
Rule 74    statement -> call_function
Rule 75    special_function -> exploration
Rule 76    special_function -> financial_state
Rule 77    special_function -> dummi_regression
Rule 78    special_function -> season_analysis
Rule 79    special_function -> trend_prediction
Rule 80    special_function -> model_predict
Rule 81    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 82    explore_var -> COMMA variable
Rule 83    explore_var -> empty
Rule 84    explor_cte -> COMMA CTE_INT
Rule 85    explor_cte -> empty
Rule 86    financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 87    season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 88    trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
Rule 89    dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 90    dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 91    dr_array -> empty
Rule 92    dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 93    dr_array_mp -> empty
Rule 94    dr_int -> COMMA CTE_INT
Rule 95    dr_int -> empty
Rule 96    model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 97    exp -> t_exp exp_or
Rule 98    exp_or -> OR exp
Rule 99    exp_or -> empty
Rule 100   t_exp -> expression t_exp_and
Rule 101   t_exp_and -> AND t_exp
Rule 102   t_exp_and -> empty
Rule 103   expression -> m_exp expression_comp
Rule 104   expression_comp -> expression_comp_2 m_exp
Rule 105   expression_comp -> empty
Rule 106   expression_comp_2 -> EQUAL
Rule 107   expression_comp_2 -> NOTEQUAL
Rule 108   expression_comp_2 -> LTHAN
Rule 109   expression_comp_2 -> GTHAN
Rule 110   m_exp -> term m_exp_sr
Rule 111   m_exp_sr -> m_exp_sr_2 m_exp
Rule 112   m_exp_sr -> empty
Rule 113   m_exp_sr_2 -> PLUS
Rule 114   m_exp_sr_2 -> MINUS
Rule 115   term -> factor term_pc
Rule 116   term_pc -> term_pc_2 term
Rule 117   term_pc -> empty
Rule 118   term_pc_2 -> MULTIPLY
Rule 119   term_pc_2 -> DIVIDE
Rule 120   factor -> factor_exp
Rule 121   factor -> factor_cte
Rule 122   factor -> variable
Rule 123   factor -> call_function
Rule 124   factor_exp -> LPAREN exp RPAREN
Rule 125   factor_cte -> CTE_INT
Rule 126   factor_cte -> CTE_FLOAT
Rule 127   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 101
AS                   : 7
ASSIGN               : 46
CHAR                 : 14
COLON                : 
COMMA                : 20 23 38 56 68 82 84 86 86 86 88 88 88 89 90 92 94 96 96
CTE_CHAR             : 90 92 127
CTE_FLOAT            : 126
CTE_INT              : 25 27 63 84 88 88 88 94 125
DATAFRAME            : 15
DATE                 : 16
DIVIDE               : 119
DO                   : 61
DUMMI_REGRESSION     : 89
ELSE                 : 51
END                  : 1
EQUAL                : 106
EXPLORATION          : 81
FINANCIAL_STATE      : 86
FLOAT                : 13
FOR                  : 62
FROM                 : 5
FUNCTION             : 34
GTHAN                : 109
ID                   : 1 5 7 7 19 20 22 23 29 34 37 38 62 64 65
IF                   : 50
IMPORT               : 7
INT                  : 12
LBRACKET             : 34 42 43
LPAREN               : 34 50 53 58 61 62 65 81 86 87 88 89 96 124
LSQBRACKET           : 25 27 30 32 90
LTHAN                : 108
MAIN                 : 42
MINUS                : 114
MODEL_PREDICT        : 96
MULTIPLY             : 118
NOTEQUAL             : 107
OR                   : 98
PLUS                 : 113
PRINT                : 53
PROGRAM              : 1
RBRACKET             : 34 42 43
READ                 : 58
RETURN               : 40
RPAREN               : 34 50 53 58 61 62 65 81 86 87 88 89 96 124
RSQBRACKET           : 25 27 30 32 90
SEASON_ANALYSIS      : 87
SEMICOLON            : 1 19 22 40 46 50 53 61 62 67
TO                   : 62
TREND_PREDICTION     : 88
VAR                  : 10
VOID                 : 36
WHILE                : 61
error                : 

Nonterminals, with rules where they appear

assign               : 70
body                 : 50 51 61 62
c_type               : 19
call_function        : 74 123
condition            : 71
condition2           : 50
cycle                : 73
dr_array             : 89
dr_array_mp          : 90 92
dr_int               : 89
dummi_regression     : 77
empty                : 4 6 11 18 21 24 26 28 31 33 39 41 45 52 57 66 69 83 85 91 93 95 99 102 105 112 117
exp                  : 30 32 40 47 50 54 61 65 68 98 124
exp_many             : 65 68
exp_or               : 97
explor_cte           : 81
exploration          : 75
explore_var          : 81
expression           : 100
expression_comp      : 103
expression_comp_2    : 104
factor               : 115
factor_cte           : 121
factor_exp           : 120
financial_state      : 76
for                  : 59
for_end              : 62
from_library         : 3
function_type        : 34
import_library       : 3
inner_body           : 34 42 43 44
m_exp                : 103 104 111
m_exp_sr             : 110
m_exp_sr_2           : 111
model_predict        : 80
optional_semicolon   : 65
param                : 34
param2               : 37 38
print                : 72
print_many           : 53
print_many2          : 55 56
print_type           : 55 56
program              : 0
program_function     : 1
program_libraries    : 1 7
program_main         : 1
program_vars         : 1 34 42
read                 : 49
return               : 34
s_type               : 22 35 37 38
season_analysis      : 78
special_function     : 48
specialf_assign      : 46
statement            : 44
t_exp                : 97 101
t_exp_and            : 100
term                 : 110 116
term_pc              : 115
term_pc_2            : 116
trend_prediction     : 79
var_c_type           : 8
var_c_type2          : 19 20
var_multiple         : 19 22
var_s_array          : 22 23
var_s_matrix         : 25
var_s_type           : 9
var_s_type2          : 22 23
var_type             : 10 17
variable             : 46 58 81 82 86 86 86 86 87 88 89 89 96 96 122
variable_array       : 29
variable_matrix      : 30
while                : 60

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main END
    (3) program_libraries -> . from_library import_library
    (4) program_libraries -> . empty
    (5) from_library -> . FROM ID
    (6) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main END
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (3) program_libraries -> from_library . import_library
    (7) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (4) program_libraries -> empty .
    (6) from_library -> empty .

    VAR             reduce using rule 4 (program_libraries -> empty .)
    FUNCTION        reduce using rule 4 (program_libraries -> empty .)
    IMPORT          reduce using rule 6 (from_library -> empty .)


state 8

    (5) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main END
    (34) program_function -> . FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET

    FUNCTION        shift and go to state 16

    program_function               shift and go to state 15

state 10

    (10) program_vars -> VAR . var_type
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (19) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (22) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (15) c_type -> . DATAFRAME
    (16) c_type -> . DATE
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    DATAFRAME       shift and go to state 22
    DATE            shift and go to state 23
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    var_type                       shift and go to state 17
    var_c_type                     shift and go to state 18
    var_s_type                     shift and go to state 19
    c_type                         shift and go to state 20
    s_type                         shift and go to state 21

state 11

    (11) program_vars -> empty .

    FUNCTION        reduce using rule 11 (program_vars -> empty .)
    IF              reduce using rule 11 (program_vars -> empty .)
    PRINT           reduce using rule 11 (program_vars -> empty .)
    ID              reduce using rule 11 (program_vars -> empty .)
    FOR             reduce using rule 11 (program_vars -> empty .)
    DO              reduce using rule 11 (program_vars -> empty .)
    RBRACKET        reduce using rule 11 (program_vars -> empty .)
    RETURN          reduce using rule 11 (program_vars -> empty .)


state 12

    (3) program_libraries -> from_library import_library .

    VAR             reduce using rule 3 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 3 (program_libraries -> from_library import_library .)


state 13

    (7) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 27


state 14

    (5) from_library -> FROM ID .

    IMPORT          reduce using rule 5 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main END
    (42) program_main -> . MAIN LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 29

    program_main                   shift and go to state 28

state 16

    (34) program_function -> FUNCTION . function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET
    (35) function_type -> . s_type
    (36) function_type -> . VOID
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    VOID            shift and go to state 32
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    function_type                  shift and go to state 30
    s_type                         shift and go to state 31

state 17

    (10) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 10 (program_vars -> VAR var_type .)
    IF              reduce using rule 10 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 10 (program_vars -> VAR var_type .)
    ID              reduce using rule 10 (program_vars -> VAR var_type .)
    FOR             reduce using rule 10 (program_vars -> VAR var_type .)
    DO              reduce using rule 10 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 10 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 10 (program_vars -> VAR var_type .)


state 18

    (8) var_type -> var_c_type .

    FUNCTION        reduce using rule 8 (var_type -> var_c_type .)
    IF              reduce using rule 8 (var_type -> var_c_type .)
    PRINT           reduce using rule 8 (var_type -> var_c_type .)
    ID              reduce using rule 8 (var_type -> var_c_type .)
    FOR             reduce using rule 8 (var_type -> var_c_type .)
    DO              reduce using rule 8 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 8 (var_type -> var_c_type .)
    RETURN          reduce using rule 8 (var_type -> var_c_type .)


state 19

    (9) var_type -> var_s_type .

    FUNCTION        reduce using rule 9 (var_type -> var_s_type .)
    IF              reduce using rule 9 (var_type -> var_s_type .)
    PRINT           reduce using rule 9 (var_type -> var_s_type .)
    ID              reduce using rule 9 (var_type -> var_s_type .)
    FOR             reduce using rule 9 (var_type -> var_s_type .)
    DO              reduce using rule 9 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 9 (var_type -> var_s_type .)
    RETURN          reduce using rule 9 (var_type -> var_s_type .)


state 20

    (19) var_c_type -> c_type . ID var_c_type2 SEMICOLON var_multiple

    ID              shift and go to state 33


state 21

    (22) var_s_type -> s_type . ID var_s_array var_s_type2 SEMICOLON var_multiple

    ID              shift and go to state 34


state 22

    (15) c_type -> DATAFRAME .

    ID              reduce using rule 15 (c_type -> DATAFRAME .)


state 23

    (16) c_type -> DATE .

    ID              reduce using rule 16 (c_type -> DATE .)


state 24

    (12) s_type -> INT .

    ID              reduce using rule 12 (s_type -> INT .)


state 25

    (13) s_type -> FLOAT .

    ID              reduce using rule 13 (s_type -> FLOAT .)


state 26

    (14) s_type -> CHAR .

    ID              reduce using rule 14 (s_type -> CHAR .)


state 27

    (7) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 35


state 28

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . END

    END             shift and go to state 36


state 29

    (42) program_main -> MAIN . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 37


state 30

    (34) program_function -> FUNCTION function_type . ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET

    ID              shift and go to state 38


state 31

    (35) function_type -> s_type .

    ID              reduce using rule 35 (function_type -> s_type .)


state 32

    (36) function_type -> VOID .

    ID              reduce using rule 36 (function_type -> VOID .)


state 33

    (19) var_c_type -> c_type ID . var_c_type2 SEMICOLON var_multiple
    (20) var_c_type2 -> . COMMA ID var_c_type2
    (21) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 39
    empty                          shift and go to state 41

state 34

    (22) var_s_type -> s_type ID . var_s_array var_s_type2 SEMICOLON var_multiple
    (25) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (26) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 43
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 42
    empty                          shift and go to state 44

state 35

    (7) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 45


state 36

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main END .)


state 37

    (42) program_main -> MAIN LBRACKET . program_vars inner_body RBRACKET
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 46
    empty                          shift and go to state 11

state 38

    (34) program_function -> FUNCTION function_type ID . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET

    LPAREN          shift and go to state 47


state 39

    (19) var_c_type -> c_type ID var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 48


state 40

    (20) var_c_type2 -> COMMA . ID var_c_type2

    ID              shift and go to state 49


state 41

    (21) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 21 (var_c_type2 -> empty .)


state 42

    (22) var_s_type -> s_type ID var_s_array . var_s_type2 SEMICOLON var_multiple
    (23) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (24) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 51
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 50
    empty                          shift and go to state 52

state 43

    (25) var_s_array -> LSQBRACKET . CTE_INT RSQBRACKET var_s_matrix

    CTE_INT         shift and go to state 53


state 44

    (26) var_s_array -> empty .

    COMMA           reduce using rule 26 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 26 (var_s_array -> empty .)


state 45

    (7) import_library -> IMPORT ID AS ID . program_libraries
    (3) program_libraries -> . from_library import_library
    (4) program_libraries -> . empty
    (5) from_library -> . FROM ID
    (6) from_library -> . empty
    (2) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)

    program_libraries              shift and go to state 54
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 46

    (42) program_main -> MAIN LBRACKET program_vars . inner_body RBRACKET
    (44) inner_body -> . statement inner_body
    (45) inner_body -> . empty
    (70) statement -> . assign
    (71) statement -> . condition
    (72) statement -> . print
    (73) statement -> . cycle
    (74) statement -> . call_function
    (2) empty -> .
    (46) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (50) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (53) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (59) cycle -> . for
    (60) cycle -> . while
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon
    (29) variable -> . ID variable_array
    (62) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (61) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    ID              shift and go to state 68
    FOR             shift and go to state 69
    DO              shift and go to state 70

    inner_body                     shift and go to state 55
    statement                      shift and go to state 56
    empty                          shift and go to state 57
    assign                         shift and go to state 58
    condition                      shift and go to state 59
    print                          shift and go to state 60
    cycle                          shift and go to state 61
    call_function                  shift and go to state 62
    variable                       shift and go to state 63
    for                            shift and go to state 66
    while                          shift and go to state 67

state 47

    (34) program_function -> FUNCTION function_type ID LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET
    (37) param -> . s_type ID param2
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    param                          shift and go to state 71
    s_type                         shift and go to state 72

state 48

    (19) var_c_type -> c_type ID var_c_type2 SEMICOLON . var_multiple
    (17) var_multiple -> . var_type
    (18) var_multiple -> . empty
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (2) empty -> .
    (19) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (22) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (15) c_type -> . DATAFRAME
    (16) c_type -> . DATE
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 22
    DATE            shift and go to state 23
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    c_type                         shift and go to state 20
    var_multiple                   shift and go to state 73
    var_type                       shift and go to state 74
    empty                          shift and go to state 75
    var_c_type                     shift and go to state 18
    var_s_type                     shift and go to state 19
    s_type                         shift and go to state 21

state 49

    (20) var_c_type2 -> COMMA ID . var_c_type2
    (20) var_c_type2 -> . COMMA ID var_c_type2
    (21) var_c_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_c_type2                    shift and go to state 76
    empty                          shift and go to state 41

state 50

    (22) var_s_type -> s_type ID var_s_array var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 77


state 51

    (23) var_s_type2 -> COMMA . ID var_s_array var_s_type2

    ID              shift and go to state 78


state 52

    (24) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 24 (var_s_type2 -> empty .)


state 53

    (25) var_s_array -> LSQBRACKET CTE_INT . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 79


state 54

    (7) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 7 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 7 (import_library -> IMPORT ID AS ID program_libraries .)


state 55

    (42) program_main -> MAIN LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 80


state 56

    (44) inner_body -> statement . inner_body
    (44) inner_body -> . statement inner_body
    (45) inner_body -> . empty
    (70) statement -> . assign
    (71) statement -> . condition
    (72) statement -> . print
    (73) statement -> . cycle
    (74) statement -> . call_function
    (2) empty -> .
    (46) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (50) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (53) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (59) cycle -> . for
    (60) cycle -> . while
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon
    (29) variable -> . ID variable_array
    (62) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (61) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    ID              shift and go to state 68
    FOR             shift and go to state 69
    DO              shift and go to state 70

    statement                      shift and go to state 56
    inner_body                     shift and go to state 81
    empty                          shift and go to state 57
    assign                         shift and go to state 58
    condition                      shift and go to state 59
    print                          shift and go to state 60
    cycle                          shift and go to state 61
    call_function                  shift and go to state 62
    variable                       shift and go to state 63
    for                            shift and go to state 66
    while                          shift and go to state 67

state 57

    (45) inner_body -> empty .

    RBRACKET        reduce using rule 45 (inner_body -> empty .)
    RETURN          reduce using rule 45 (inner_body -> empty .)


state 58

    (70) statement -> assign .

    IF              reduce using rule 70 (statement -> assign .)
    PRINT           reduce using rule 70 (statement -> assign .)
    ID              reduce using rule 70 (statement -> assign .)
    FOR             reduce using rule 70 (statement -> assign .)
    DO              reduce using rule 70 (statement -> assign .)
    RBRACKET        reduce using rule 70 (statement -> assign .)
    RETURN          reduce using rule 70 (statement -> assign .)


state 59

    (71) statement -> condition .

    IF              reduce using rule 71 (statement -> condition .)
    PRINT           reduce using rule 71 (statement -> condition .)
    ID              reduce using rule 71 (statement -> condition .)
    FOR             reduce using rule 71 (statement -> condition .)
    DO              reduce using rule 71 (statement -> condition .)
    RBRACKET        reduce using rule 71 (statement -> condition .)
    RETURN          reduce using rule 71 (statement -> condition .)


state 60

    (72) statement -> print .

    IF              reduce using rule 72 (statement -> print .)
    PRINT           reduce using rule 72 (statement -> print .)
    ID              reduce using rule 72 (statement -> print .)
    FOR             reduce using rule 72 (statement -> print .)
    DO              reduce using rule 72 (statement -> print .)
    RBRACKET        reduce using rule 72 (statement -> print .)
    RETURN          reduce using rule 72 (statement -> print .)


state 61

    (73) statement -> cycle .

    IF              reduce using rule 73 (statement -> cycle .)
    PRINT           reduce using rule 73 (statement -> cycle .)
    ID              reduce using rule 73 (statement -> cycle .)
    FOR             reduce using rule 73 (statement -> cycle .)
    DO              reduce using rule 73 (statement -> cycle .)
    RBRACKET        reduce using rule 73 (statement -> cycle .)
    RETURN          reduce using rule 73 (statement -> cycle .)


state 62

    (74) statement -> call_function .

    IF              reduce using rule 74 (statement -> call_function .)
    PRINT           reduce using rule 74 (statement -> call_function .)
    ID              reduce using rule 74 (statement -> call_function .)
    FOR             reduce using rule 74 (statement -> call_function .)
    DO              reduce using rule 74 (statement -> call_function .)
    RBRACKET        reduce using rule 74 (statement -> call_function .)
    RETURN          reduce using rule 74 (statement -> call_function .)


state 63

    (46) assign -> variable . ASSIGN specialf_assign SEMICOLON

    ASSIGN          shift and go to state 82


state 64

    (50) condition -> IF . LPAREN exp RPAREN body condition2 SEMICOLON

    LPAREN          shift and go to state 83


state 65

    (53) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 84


state 66

    (59) cycle -> for .

    IF              reduce using rule 59 (cycle -> for .)
    PRINT           reduce using rule 59 (cycle -> for .)
    ID              reduce using rule 59 (cycle -> for .)
    FOR             reduce using rule 59 (cycle -> for .)
    DO              reduce using rule 59 (cycle -> for .)
    RBRACKET        reduce using rule 59 (cycle -> for .)
    RETURN          reduce using rule 59 (cycle -> for .)


state 67

    (60) cycle -> while .

    IF              reduce using rule 60 (cycle -> while .)
    PRINT           reduce using rule 60 (cycle -> while .)
    ID              reduce using rule 60 (cycle -> while .)
    FOR             reduce using rule 60 (cycle -> while .)
    DO              reduce using rule 60 (cycle -> while .)
    RBRACKET        reduce using rule 60 (cycle -> while .)
    RETURN          reduce using rule 60 (cycle -> while .)


state 68

    (65) call_function -> ID . LPAREN exp exp_many RPAREN optional_semicolon
    (29) variable -> ID . variable_array
    (30) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (31) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 85
    LSQBRACKET      shift and go to state 87
    ASSIGN          reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 86
    empty                          shift and go to state 88

state 69

    (62) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 89


state 70

    (61) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (43) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 91

    body                           shift and go to state 90

state 71

    (34) program_function -> FUNCTION function_type ID LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET

    RPAREN          shift and go to state 92


state 72

    (37) param -> s_type . ID param2

    ID              shift and go to state 93


state 73

    (19) var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 19 (var_c_type -> c_type ID var_c_type2 SEMICOLON var_multiple .)


state 74

    (17) var_multiple -> var_type .

    FUNCTION        reduce using rule 17 (var_multiple -> var_type .)
    IF              reduce using rule 17 (var_multiple -> var_type .)
    PRINT           reduce using rule 17 (var_multiple -> var_type .)
    ID              reduce using rule 17 (var_multiple -> var_type .)
    FOR             reduce using rule 17 (var_multiple -> var_type .)
    DO              reduce using rule 17 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 17 (var_multiple -> var_type .)
    RETURN          reduce using rule 17 (var_multiple -> var_type .)


state 75

    (18) var_multiple -> empty .

    FUNCTION        reduce using rule 18 (var_multiple -> empty .)
    IF              reduce using rule 18 (var_multiple -> empty .)
    PRINT           reduce using rule 18 (var_multiple -> empty .)
    ID              reduce using rule 18 (var_multiple -> empty .)
    FOR             reduce using rule 18 (var_multiple -> empty .)
    DO              reduce using rule 18 (var_multiple -> empty .)
    RBRACKET        reduce using rule 18 (var_multiple -> empty .)
    RETURN          reduce using rule 18 (var_multiple -> empty .)


state 76

    (20) var_c_type2 -> COMMA ID var_c_type2 .

    SEMICOLON       reduce using rule 20 (var_c_type2 -> COMMA ID var_c_type2 .)


state 77

    (22) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON . var_multiple
    (17) var_multiple -> . var_type
    (18) var_multiple -> . empty
    (8) var_type -> . var_c_type
    (9) var_type -> . var_s_type
    (2) empty -> .
    (19) var_c_type -> . c_type ID var_c_type2 SEMICOLON var_multiple
    (22) var_s_type -> . s_type ID var_s_array var_s_type2 SEMICOLON var_multiple
    (15) c_type -> . DATAFRAME
    (16) c_type -> . DATE
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    DATAFRAME       shift and go to state 22
    DATE            shift and go to state 23
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    s_type                         shift and go to state 21
    var_multiple                   shift and go to state 94
    var_type                       shift and go to state 74
    empty                          shift and go to state 75
    var_c_type                     shift and go to state 18
    var_s_type                     shift and go to state 19
    c_type                         shift and go to state 20

state 78

    (23) var_s_type2 -> COMMA ID . var_s_array var_s_type2
    (25) var_s_array -> . LSQBRACKET CTE_INT RSQBRACKET var_s_matrix
    (26) var_s_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 43
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_array                    shift and go to state 95
    empty                          shift and go to state 44

state 79

    (25) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET . var_s_matrix
    (27) var_s_matrix -> . LSQBRACKET CTE_INT RSQBRACKET
    (28) var_s_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 96
    COMMA           reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_matrix                   shift and go to state 97
    empty                          shift and go to state 98

state 80

    (42) program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 42 (program_main -> MAIN LBRACKET program_vars inner_body RBRACKET .)


state 81

    (44) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 44 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 44 (inner_body -> statement inner_body .)


state 82

    (46) assign -> variable ASSIGN . specialf_assign SEMICOLON
    (47) specialf_assign -> . exp
    (48) specialf_assign -> . special_function
    (49) specialf_assign -> . read
    (97) exp -> . t_exp exp_or
    (75) special_function -> . exploration
    (76) special_function -> . financial_state
    (77) special_function -> . dummi_regression
    (78) special_function -> . season_analysis
    (79) special_function -> . trend_prediction
    (80) special_function -> . model_predict
    (58) read -> . READ LPAREN variable RPAREN
    (100) t_exp -> . expression t_exp_and
    (81) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (86) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (89) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (87) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (88) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (96) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    READ            shift and go to state 111
    EXPLORATION     shift and go to state 114
    FINANCIAL_STATE shift and go to state 115
    DUMMI_REGRESSION shift and go to state 116
    SEASON_ANALYSIS shift and go to state 117
    TREND_PREDICTION shift and go to state 118
    MODEL_PREDICT   shift and go to state 120
    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    variable                       shift and go to state 99
    specialf_assign                shift and go to state 100
    exp                            shift and go to state 101
    special_function               shift and go to state 102
    read                           shift and go to state 103
    t_exp                          shift and go to state 104
    exploration                    shift and go to state 105
    financial_state                shift and go to state 106
    dummi_regression               shift and go to state 107
    season_analysis                shift and go to state 108
    trend_prediction               shift and go to state 109
    model_predict                  shift and go to state 110
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    call_function                  shift and go to state 126

state 83

    (50) condition -> IF LPAREN . exp RPAREN body condition2 SEMICOLON
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 130
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 84

    (53) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (55) print_many -> . print_type print_many2
    (54) print_type -> . exp
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    print_many                     shift and go to state 131
    print_type                     shift and go to state 132
    exp                            shift and go to state 133
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 85

    (65) call_function -> ID LPAREN . exp exp_many RPAREN optional_semicolon
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 134
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 86

    (29) variable -> ID variable_array .

    ASSIGN          reduce using rule 29 (variable -> ID variable_array .)
    MULTIPLY        reduce using rule 29 (variable -> ID variable_array .)
    DIVIDE          reduce using rule 29 (variable -> ID variable_array .)
    PLUS            reduce using rule 29 (variable -> ID variable_array .)
    MINUS           reduce using rule 29 (variable -> ID variable_array .)
    EQUAL           reduce using rule 29 (variable -> ID variable_array .)
    NOTEQUAL        reduce using rule 29 (variable -> ID variable_array .)
    LTHAN           reduce using rule 29 (variable -> ID variable_array .)
    GTHAN           reduce using rule 29 (variable -> ID variable_array .)
    AND             reduce using rule 29 (variable -> ID variable_array .)
    OR              reduce using rule 29 (variable -> ID variable_array .)
    SEMICOLON       reduce using rule 29 (variable -> ID variable_array .)
    RPAREN          reduce using rule 29 (variable -> ID variable_array .)
    COMMA           reduce using rule 29 (variable -> ID variable_array .)
    RSQBRACKET      reduce using rule 29 (variable -> ID variable_array .)


state 87

    (30) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 135
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 88

    (31) variable_array -> empty .

    ASSIGN          reduce using rule 31 (variable_array -> empty .)
    MULTIPLY        reduce using rule 31 (variable_array -> empty .)
    DIVIDE          reduce using rule 31 (variable_array -> empty .)
    PLUS            reduce using rule 31 (variable_array -> empty .)
    MINUS           reduce using rule 31 (variable_array -> empty .)
    EQUAL           reduce using rule 31 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 31 (variable_array -> empty .)
    LTHAN           reduce using rule 31 (variable_array -> empty .)
    GTHAN           reduce using rule 31 (variable_array -> empty .)
    AND             reduce using rule 31 (variable_array -> empty .)
    OR              reduce using rule 31 (variable_array -> empty .)
    SEMICOLON       reduce using rule 31 (variable_array -> empty .)
    RPAREN          reduce using rule 31 (variable_array -> empty .)
    COMMA           reduce using rule 31 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 31 (variable_array -> empty .)


state 89

    (62) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 136


state 90

    (61) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 137


state 91

    (43) body -> LBRACKET . inner_body RBRACKET
    (44) inner_body -> . statement inner_body
    (45) inner_body -> . empty
    (70) statement -> . assign
    (71) statement -> . condition
    (72) statement -> . print
    (73) statement -> . cycle
    (74) statement -> . call_function
    (2) empty -> .
    (46) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (50) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (53) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (59) cycle -> . for
    (60) cycle -> . while
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon
    (29) variable -> . ID variable_array
    (62) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (61) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    ID              shift and go to state 68
    FOR             shift and go to state 69
    DO              shift and go to state 70

    inner_body                     shift and go to state 138
    statement                      shift and go to state 56
    empty                          shift and go to state 57
    assign                         shift and go to state 58
    condition                      shift and go to state 59
    print                          shift and go to state 60
    cycle                          shift and go to state 61
    call_function                  shift and go to state 62
    variable                       shift and go to state 63
    for                            shift and go to state 66
    while                          shift and go to state 67

state 92

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET

    LBRACKET        shift and go to state 139


state 93

    (37) param -> s_type ID . param2
    (38) param2 -> . COMMA s_type ID param2
    (39) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 140
    empty                          shift and go to state 142

state 94

    (22) var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 22 (var_s_type -> s_type ID var_s_array var_s_type2 SEMICOLON var_multiple .)


state 95

    (23) var_s_type2 -> COMMA ID var_s_array . var_s_type2
    (23) var_s_type2 -> . COMMA ID var_s_array var_s_type2
    (24) var_s_type2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 51
    SEMICOLON       reduce using rule 2 (empty -> .)

    var_s_type2                    shift and go to state 143
    empty                          shift and go to state 52

state 96

    (27) var_s_matrix -> LSQBRACKET . CTE_INT RSQBRACKET

    CTE_INT         shift and go to state 144


state 97

    (25) var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 25 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 25 (var_s_array -> LSQBRACKET CTE_INT RSQBRACKET var_s_matrix .)


state 98

    (28) var_s_matrix -> empty .

    COMMA           reduce using rule 28 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 28 (var_s_matrix -> empty .)


state 99

    (122) factor -> variable .

    MULTIPLY        reduce using rule 122 (factor -> variable .)
    DIVIDE          reduce using rule 122 (factor -> variable .)
    PLUS            reduce using rule 122 (factor -> variable .)
    MINUS           reduce using rule 122 (factor -> variable .)
    EQUAL           reduce using rule 122 (factor -> variable .)
    NOTEQUAL        reduce using rule 122 (factor -> variable .)
    LTHAN           reduce using rule 122 (factor -> variable .)
    GTHAN           reduce using rule 122 (factor -> variable .)
    AND             reduce using rule 122 (factor -> variable .)
    OR              reduce using rule 122 (factor -> variable .)
    SEMICOLON       reduce using rule 122 (factor -> variable .)
    RPAREN          reduce using rule 122 (factor -> variable .)
    COMMA           reduce using rule 122 (factor -> variable .)
    RSQBRACKET      reduce using rule 122 (factor -> variable .)


state 100

    (46) assign -> variable ASSIGN specialf_assign . SEMICOLON

    SEMICOLON       shift and go to state 145


state 101

    (47) specialf_assign -> exp .

    SEMICOLON       reduce using rule 47 (specialf_assign -> exp .)


state 102

    (48) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 48 (specialf_assign -> special_function .)


state 103

    (49) specialf_assign -> read .

    SEMICOLON       reduce using rule 49 (specialf_assign -> read .)


state 104

    (97) exp -> t_exp . exp_or
    (98) exp_or -> . OR exp
    (99) exp_or -> . empty
    (2) empty -> .

    OR              shift and go to state 147
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    exp_or                         shift and go to state 146
    empty                          shift and go to state 148

state 105

    (75) special_function -> exploration .

    SEMICOLON       reduce using rule 75 (special_function -> exploration .)


state 106

    (76) special_function -> financial_state .

    SEMICOLON       reduce using rule 76 (special_function -> financial_state .)


state 107

    (77) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 77 (special_function -> dummi_regression .)


state 108

    (78) special_function -> season_analysis .

    SEMICOLON       reduce using rule 78 (special_function -> season_analysis .)


state 109

    (79) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 79 (special_function -> trend_prediction .)


state 110

    (80) special_function -> model_predict .

    SEMICOLON       reduce using rule 80 (special_function -> model_predict .)


state 111

    (58) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 149


state 112

    (124) factor_exp -> LPAREN . exp RPAREN
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 150
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 113

    (100) t_exp -> expression . t_exp_and
    (101) t_exp_and -> . AND t_exp
    (102) t_exp_and -> . empty
    (2) empty -> .

    AND             shift and go to state 152
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    t_exp_and                      shift and go to state 151
    empty                          shift and go to state 153

state 114

    (81) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 154


state 115

    (86) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 155


state 116

    (89) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 156


state 117

    (87) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 157


state 118

    (88) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    LPAREN          shift and go to state 158


state 119

    (125) factor_cte -> CTE_INT .

    MULTIPLY        reduce using rule 125 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 125 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 125 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 125 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 125 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 125 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 125 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 125 (factor_cte -> CTE_INT .)
    AND             reduce using rule 125 (factor_cte -> CTE_INT .)
    OR              reduce using rule 125 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 125 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 125 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 125 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 125 (factor_cte -> CTE_INT .)


state 120

    (96) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 159


state 121

    (103) expression -> m_exp . expression_comp
    (104) expression_comp -> . expression_comp_2 m_exp
    (105) expression_comp -> . empty
    (106) expression_comp_2 -> . EQUAL
    (107) expression_comp_2 -> . NOTEQUAL
    (108) expression_comp_2 -> . LTHAN
    (109) expression_comp_2 -> . GTHAN
    (2) empty -> .

    EQUAL           shift and go to state 163
    NOTEQUAL        shift and go to state 164
    LTHAN           shift and go to state 165
    GTHAN           shift and go to state 166
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    expression_comp                shift and go to state 160
    expression_comp_2              shift and go to state 161
    empty                          shift and go to state 162

state 122

    (110) m_exp -> term . m_exp_sr
    (111) m_exp_sr -> . m_exp_sr_2 m_exp
    (112) m_exp_sr -> . empty
    (113) m_exp_sr_2 -> . PLUS
    (114) m_exp_sr_2 -> . MINUS
    (2) empty -> .

    PLUS            shift and go to state 170
    MINUS           shift and go to state 171
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    m_exp_sr                       shift and go to state 167
    m_exp_sr_2                     shift and go to state 168
    empty                          shift and go to state 169

state 123

    (115) term -> factor . term_pc
    (116) term_pc -> . term_pc_2 term
    (117) term_pc -> . empty
    (118) term_pc_2 -> . MULTIPLY
    (119) term_pc_2 -> . DIVIDE
    (2) empty -> .

    MULTIPLY        shift and go to state 175
    DIVIDE          shift and go to state 176
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    term_pc                        shift and go to state 172
    term_pc_2                      shift and go to state 173
    empty                          shift and go to state 174

state 124

    (120) factor -> factor_exp .

    MULTIPLY        reduce using rule 120 (factor -> factor_exp .)
    DIVIDE          reduce using rule 120 (factor -> factor_exp .)
    PLUS            reduce using rule 120 (factor -> factor_exp .)
    MINUS           reduce using rule 120 (factor -> factor_exp .)
    EQUAL           reduce using rule 120 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 120 (factor -> factor_exp .)
    LTHAN           reduce using rule 120 (factor -> factor_exp .)
    GTHAN           reduce using rule 120 (factor -> factor_exp .)
    AND             reduce using rule 120 (factor -> factor_exp .)
    OR              reduce using rule 120 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 120 (factor -> factor_exp .)
    RPAREN          reduce using rule 120 (factor -> factor_exp .)
    COMMA           reduce using rule 120 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 120 (factor -> factor_exp .)


state 125

    (121) factor -> factor_cte .

    MULTIPLY        reduce using rule 121 (factor -> factor_cte .)
    DIVIDE          reduce using rule 121 (factor -> factor_cte .)
    PLUS            reduce using rule 121 (factor -> factor_cte .)
    MINUS           reduce using rule 121 (factor -> factor_cte .)
    EQUAL           reduce using rule 121 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 121 (factor -> factor_cte .)
    LTHAN           reduce using rule 121 (factor -> factor_cte .)
    GTHAN           reduce using rule 121 (factor -> factor_cte .)
    AND             reduce using rule 121 (factor -> factor_cte .)
    OR              reduce using rule 121 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 121 (factor -> factor_cte .)
    RPAREN          reduce using rule 121 (factor -> factor_cte .)
    COMMA           reduce using rule 121 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 121 (factor -> factor_cte .)


state 126

    (123) factor -> call_function .

    MULTIPLY        reduce using rule 123 (factor -> call_function .)
    DIVIDE          reduce using rule 123 (factor -> call_function .)
    PLUS            reduce using rule 123 (factor -> call_function .)
    MINUS           reduce using rule 123 (factor -> call_function .)
    EQUAL           reduce using rule 123 (factor -> call_function .)
    NOTEQUAL        reduce using rule 123 (factor -> call_function .)
    LTHAN           reduce using rule 123 (factor -> call_function .)
    GTHAN           reduce using rule 123 (factor -> call_function .)
    AND             reduce using rule 123 (factor -> call_function .)
    OR              reduce using rule 123 (factor -> call_function .)
    SEMICOLON       reduce using rule 123 (factor -> call_function .)
    RPAREN          reduce using rule 123 (factor -> call_function .)
    COMMA           reduce using rule 123 (factor -> call_function .)
    RSQBRACKET      reduce using rule 123 (factor -> call_function .)


state 127

    (126) factor_cte -> CTE_FLOAT .

    MULTIPLY        reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 126 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 126 (factor_cte -> CTE_FLOAT .)


state 128

    (127) factor_cte -> CTE_CHAR .

    MULTIPLY        reduce using rule 127 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 127 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 127 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 127 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 127 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 127 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 127 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 127 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 127 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 127 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 127 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 127 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 127 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 127 (factor_cte -> CTE_CHAR .)


state 129

    (29) variable -> ID . variable_array
    (65) call_function -> ID . LPAREN exp exp_many RPAREN optional_semicolon
    (30) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (31) variable_array -> . empty
    (2) empty -> .

    LPAREN          shift and go to state 85
    LSQBRACKET      shift and go to state 87
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 86
    empty                          shift and go to state 88

state 130

    (50) condition -> IF LPAREN exp . RPAREN body condition2 SEMICOLON

    RPAREN          shift and go to state 177


state 131

    (53) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 178


state 132

    (55) print_many -> print_type . print_many2
    (56) print_many2 -> . COMMA print_type print_many2
    (57) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 180
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 179
    empty                          shift and go to state 181

state 133

    (54) print_type -> exp .

    COMMA           reduce using rule 54 (print_type -> exp .)
    RPAREN          reduce using rule 54 (print_type -> exp .)


state 134

    (65) call_function -> ID LPAREN exp . exp_many RPAREN optional_semicolon
    (68) exp_many -> . COMMA exp exp_many
    (69) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 182
    empty                          shift and go to state 184

state 135

    (30) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 185


state 136

    (62) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 186


state 137

    (61) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 187


state 138

    (43) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 188


state 139

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET
    (10) program_vars -> . VAR var_type
    (11) program_vars -> . empty
    (2) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)

    program_vars                   shift and go to state 189
    empty                          shift and go to state 11

state 140

    (37) param -> s_type ID param2 .

    RPAREN          reduce using rule 37 (param -> s_type ID param2 .)


state 141

    (38) param2 -> COMMA . s_type ID param2
    (12) s_type -> . INT
    (13) s_type -> . FLOAT
    (14) s_type -> . CHAR

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    s_type                         shift and go to state 190

state 142

    (39) param2 -> empty .

    RPAREN          reduce using rule 39 (param2 -> empty .)


state 143

    (23) var_s_type2 -> COMMA ID var_s_array var_s_type2 .

    SEMICOLON       reduce using rule 23 (var_s_type2 -> COMMA ID var_s_array var_s_type2 .)


state 144

    (27) var_s_matrix -> LSQBRACKET CTE_INT . RSQBRACKET

    RSQBRACKET      shift and go to state 191


state 145

    (46) assign -> variable ASSIGN specialf_assign SEMICOLON .

    IF              reduce using rule 46 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    PRINT           reduce using rule 46 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    ID              reduce using rule 46 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    FOR             reduce using rule 46 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    DO              reduce using rule 46 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RBRACKET        reduce using rule 46 (assign -> variable ASSIGN specialf_assign SEMICOLON .)
    RETURN          reduce using rule 46 (assign -> variable ASSIGN specialf_assign SEMICOLON .)


state 146

    (97) exp -> t_exp exp_or .

    SEMICOLON       reduce using rule 97 (exp -> t_exp exp_or .)
    RPAREN          reduce using rule 97 (exp -> t_exp exp_or .)
    COMMA           reduce using rule 97 (exp -> t_exp exp_or .)
    RSQBRACKET      reduce using rule 97 (exp -> t_exp exp_or .)


state 147

    (98) exp_or -> OR . exp
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 192
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 148

    (99) exp_or -> empty .

    SEMICOLON       reduce using rule 99 (exp_or -> empty .)
    RPAREN          reduce using rule 99 (exp_or -> empty .)
    COMMA           reduce using rule 99 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 99 (exp_or -> empty .)


state 149

    (58) read -> READ LPAREN . variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 193

state 150

    (124) factor_exp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 195


state 151

    (100) t_exp -> expression t_exp_and .

    OR              reduce using rule 100 (t_exp -> expression t_exp_and .)
    SEMICOLON       reduce using rule 100 (t_exp -> expression t_exp_and .)
    RPAREN          reduce using rule 100 (t_exp -> expression t_exp_and .)
    COMMA           reduce using rule 100 (t_exp -> expression t_exp_and .)
    RSQBRACKET      reduce using rule 100 (t_exp -> expression t_exp_and .)


state 152

    (101) t_exp_and -> AND . t_exp
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    t_exp                          shift and go to state 196
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 153

    (102) t_exp_and -> empty .

    OR              reduce using rule 102 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 102 (t_exp_and -> empty .)
    RPAREN          reduce using rule 102 (t_exp_and -> empty .)
    COMMA           reduce using rule 102 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 102 (t_exp_and -> empty .)


state 154

    (81) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 197

state 155

    (86) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 198

state 156

    (89) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 199

state 157

    (87) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 200

state 158

    (88) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 201

state 159

    (96) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 202

state 160

    (103) expression -> m_exp expression_comp .

    AND             reduce using rule 103 (expression -> m_exp expression_comp .)
    OR              reduce using rule 103 (expression -> m_exp expression_comp .)
    SEMICOLON       reduce using rule 103 (expression -> m_exp expression_comp .)
    RPAREN          reduce using rule 103 (expression -> m_exp expression_comp .)
    COMMA           reduce using rule 103 (expression -> m_exp expression_comp .)
    RSQBRACKET      reduce using rule 103 (expression -> m_exp expression_comp .)


state 161

    (104) expression_comp -> expression_comp_2 . m_exp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    m_exp                          shift and go to state 203
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 162

    (105) expression_comp -> empty .

    AND             reduce using rule 105 (expression_comp -> empty .)
    OR              reduce using rule 105 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 105 (expression_comp -> empty .)
    RPAREN          reduce using rule 105 (expression_comp -> empty .)
    COMMA           reduce using rule 105 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 105 (expression_comp -> empty .)


state 163

    (106) expression_comp_2 -> EQUAL .

    LPAREN          reduce using rule 106 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 106 (expression_comp_2 -> EQUAL .)
    CTE_FLOAT       reduce using rule 106 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 106 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 106 (expression_comp_2 -> EQUAL .)


state 164

    (107) expression_comp_2 -> NOTEQUAL .

    LPAREN          reduce using rule 107 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 107 (expression_comp_2 -> NOTEQUAL .)
    CTE_FLOAT       reduce using rule 107 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 107 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 107 (expression_comp_2 -> NOTEQUAL .)


state 165

    (108) expression_comp_2 -> LTHAN .

    LPAREN          reduce using rule 108 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 108 (expression_comp_2 -> LTHAN .)
    CTE_FLOAT       reduce using rule 108 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 108 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 108 (expression_comp_2 -> LTHAN .)


state 166

    (109) expression_comp_2 -> GTHAN .

    LPAREN          reduce using rule 109 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 109 (expression_comp_2 -> GTHAN .)
    CTE_FLOAT       reduce using rule 109 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 109 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 109 (expression_comp_2 -> GTHAN .)


state 167

    (110) m_exp -> term m_exp_sr .

    EQUAL           reduce using rule 110 (m_exp -> term m_exp_sr .)
    NOTEQUAL        reduce using rule 110 (m_exp -> term m_exp_sr .)
    LTHAN           reduce using rule 110 (m_exp -> term m_exp_sr .)
    GTHAN           reduce using rule 110 (m_exp -> term m_exp_sr .)
    AND             reduce using rule 110 (m_exp -> term m_exp_sr .)
    OR              reduce using rule 110 (m_exp -> term m_exp_sr .)
    SEMICOLON       reduce using rule 110 (m_exp -> term m_exp_sr .)
    RPAREN          reduce using rule 110 (m_exp -> term m_exp_sr .)
    COMMA           reduce using rule 110 (m_exp -> term m_exp_sr .)
    RSQBRACKET      reduce using rule 110 (m_exp -> term m_exp_sr .)


state 168

    (111) m_exp_sr -> m_exp_sr_2 . m_exp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    m_exp                          shift and go to state 204
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 169

    (112) m_exp_sr -> empty .

    EQUAL           reduce using rule 112 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 112 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 112 (m_exp_sr -> empty .)
    GTHAN           reduce using rule 112 (m_exp_sr -> empty .)
    AND             reduce using rule 112 (m_exp_sr -> empty .)
    OR              reduce using rule 112 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 112 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 112 (m_exp_sr -> empty .)
    COMMA           reduce using rule 112 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 112 (m_exp_sr -> empty .)


state 170

    (113) m_exp_sr_2 -> PLUS .

    LPAREN          reduce using rule 113 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 113 (m_exp_sr_2 -> PLUS .)
    CTE_FLOAT       reduce using rule 113 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 113 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 113 (m_exp_sr_2 -> PLUS .)


state 171

    (114) m_exp_sr_2 -> MINUS .

    LPAREN          reduce using rule 114 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 114 (m_exp_sr_2 -> MINUS .)
    CTE_FLOAT       reduce using rule 114 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 114 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 114 (m_exp_sr_2 -> MINUS .)


state 172

    (115) term -> factor term_pc .

    PLUS            reduce using rule 115 (term -> factor term_pc .)
    MINUS           reduce using rule 115 (term -> factor term_pc .)
    EQUAL           reduce using rule 115 (term -> factor term_pc .)
    NOTEQUAL        reduce using rule 115 (term -> factor term_pc .)
    LTHAN           reduce using rule 115 (term -> factor term_pc .)
    GTHAN           reduce using rule 115 (term -> factor term_pc .)
    AND             reduce using rule 115 (term -> factor term_pc .)
    OR              reduce using rule 115 (term -> factor term_pc .)
    SEMICOLON       reduce using rule 115 (term -> factor term_pc .)
    RPAREN          reduce using rule 115 (term -> factor term_pc .)
    COMMA           reduce using rule 115 (term -> factor term_pc .)
    RSQBRACKET      reduce using rule 115 (term -> factor term_pc .)


state 173

    (116) term_pc -> term_pc_2 . term
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    term                           shift and go to state 205
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 174

    (117) term_pc -> empty .

    PLUS            reduce using rule 117 (term_pc -> empty .)
    MINUS           reduce using rule 117 (term_pc -> empty .)
    EQUAL           reduce using rule 117 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 117 (term_pc -> empty .)
    LTHAN           reduce using rule 117 (term_pc -> empty .)
    GTHAN           reduce using rule 117 (term_pc -> empty .)
    AND             reduce using rule 117 (term_pc -> empty .)
    OR              reduce using rule 117 (term_pc -> empty .)
    SEMICOLON       reduce using rule 117 (term_pc -> empty .)
    RPAREN          reduce using rule 117 (term_pc -> empty .)
    COMMA           reduce using rule 117 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 117 (term_pc -> empty .)


state 175

    (118) term_pc_2 -> MULTIPLY .

    LPAREN          reduce using rule 118 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 118 (term_pc_2 -> MULTIPLY .)
    CTE_FLOAT       reduce using rule 118 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 118 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 118 (term_pc_2 -> MULTIPLY .)


state 176

    (119) term_pc_2 -> DIVIDE .

    LPAREN          reduce using rule 119 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 119 (term_pc_2 -> DIVIDE .)
    CTE_FLOAT       reduce using rule 119 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 119 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 119 (term_pc_2 -> DIVIDE .)


state 177

    (50) condition -> IF LPAREN exp RPAREN . body condition2 SEMICOLON
    (43) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 91

    body                           shift and go to state 206

state 178

    (53) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 207


state 179

    (55) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 55 (print_many -> print_type print_many2 .)


state 180

    (56) print_many2 -> COMMA . print_type print_many2
    (54) print_type -> . exp
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    print_type                     shift and go to state 208
    exp                            shift and go to state 133
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 181

    (57) print_many2 -> empty .

    RPAREN          reduce using rule 57 (print_many2 -> empty .)


state 182

    (65) call_function -> ID LPAREN exp exp_many . RPAREN optional_semicolon

    RPAREN          shift and go to state 209


state 183

    (68) exp_many -> COMMA . exp exp_many
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 210
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 184

    (69) exp_many -> empty .

    RPAREN          reduce using rule 69 (exp_many -> empty .)


state 185

    (30) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (32) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (33) variable_matrix -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 211
    ASSIGN          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    SEMICOLON       reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

    variable_matrix                shift and go to state 212
    empty                          shift and go to state 213

state 186

    (62) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (63) for_end -> . CTE_INT
    (64) for_end -> . ID

    CTE_INT         shift and go to state 216
    ID              shift and go to state 214

    for_end                        shift and go to state 215

state 187

    (61) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 217
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 188

    (43) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 43 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 43 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 43 (body -> LBRACKET inner_body RBRACKET .)


state 189

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET
    (44) inner_body -> . statement inner_body
    (45) inner_body -> . empty
    (70) statement -> . assign
    (71) statement -> . condition
    (72) statement -> . print
    (73) statement -> . cycle
    (74) statement -> . call_function
    (2) empty -> .
    (46) assign -> . variable ASSIGN specialf_assign SEMICOLON
    (50) condition -> . IF LPAREN exp RPAREN body condition2 SEMICOLON
    (53) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (59) cycle -> . for
    (60) cycle -> . while
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon
    (29) variable -> . ID variable_array
    (62) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (61) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON

    RETURN          reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    ID              shift and go to state 68
    FOR             shift and go to state 69
    DO              shift and go to state 70

    inner_body                     shift and go to state 218
    statement                      shift and go to state 56
    empty                          shift and go to state 57
    assign                         shift and go to state 58
    condition                      shift and go to state 59
    print                          shift and go to state 60
    cycle                          shift and go to state 61
    call_function                  shift and go to state 62
    variable                       shift and go to state 63
    for                            shift and go to state 66
    while                          shift and go to state 67

state 190

    (38) param2 -> COMMA s_type . ID param2

    ID              shift and go to state 219


state 191

    (27) var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .

    COMMA           reduce using rule 27 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)
    SEMICOLON       reduce using rule 27 (var_s_matrix -> LSQBRACKET CTE_INT RSQBRACKET .)


state 192

    (98) exp_or -> OR exp .

    SEMICOLON       reduce using rule 98 (exp_or -> OR exp .)
    RPAREN          reduce using rule 98 (exp_or -> OR exp .)
    COMMA           reduce using rule 98 (exp_or -> OR exp .)
    RSQBRACKET      reduce using rule 98 (exp_or -> OR exp .)


state 193

    (58) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 220


state 194

    (29) variable -> ID . variable_array
    (30) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (31) variable_array -> . empty
    (2) empty -> .

    LSQBRACKET      shift and go to state 87
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    variable_array                 shift and go to state 86
    empty                          shift and go to state 88

state 195

    (124) factor_exp -> LPAREN exp RPAREN .

    MULTIPLY        reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    LTHAN           reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    GTHAN           reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)
    RSQBRACKET      reduce using rule 124 (factor_exp -> LPAREN exp RPAREN .)


state 196

    (101) t_exp_and -> AND t_exp .

    OR              reduce using rule 101 (t_exp_and -> AND t_exp .)
    SEMICOLON       reduce using rule 101 (t_exp_and -> AND t_exp .)
    RPAREN          reduce using rule 101 (t_exp_and -> AND t_exp .)
    COMMA           reduce using rule 101 (t_exp_and -> AND t_exp .)
    RSQBRACKET      reduce using rule 101 (t_exp_and -> AND t_exp .)


state 197

    (81) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (82) explore_var -> . COMMA variable
    (83) explore_var -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 222
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    explore_var                    shift and go to state 221
    empty                          shift and go to state 223

state 198

    (86) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 224


state 199

    (89) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 225


state 200

    (87) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 226


state 201

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 227


state 202

    (96) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 228


state 203

    (104) expression_comp -> expression_comp_2 m_exp .

    AND             reduce using rule 104 (expression_comp -> expression_comp_2 m_exp .)
    OR              reduce using rule 104 (expression_comp -> expression_comp_2 m_exp .)
    SEMICOLON       reduce using rule 104 (expression_comp -> expression_comp_2 m_exp .)
    RPAREN          reduce using rule 104 (expression_comp -> expression_comp_2 m_exp .)
    COMMA           reduce using rule 104 (expression_comp -> expression_comp_2 m_exp .)
    RSQBRACKET      reduce using rule 104 (expression_comp -> expression_comp_2 m_exp .)


state 204

    (111) m_exp_sr -> m_exp_sr_2 m_exp .

    EQUAL           reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GTHAN           reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 111 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 205

    (116) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 116 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 116 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 116 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 116 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 116 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 116 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 116 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 116 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 116 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 116 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 116 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 116 (term_pc -> term_pc_2 term .)


state 206

    (50) condition -> IF LPAREN exp RPAREN body . condition2 SEMICOLON
    (51) condition2 -> . ELSE body
    (52) condition2 -> . empty
    (2) empty -> .

    ELSE            shift and go to state 230
    SEMICOLON       reduce using rule 2 (empty -> .)

    condition2                     shift and go to state 229
    empty                          shift and go to state 231

state 207

    (53) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 53 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 53 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 53 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 53 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 53 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 53 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 53 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 208

    (56) print_many2 -> COMMA print_type . print_many2
    (56) print_many2 -> . COMMA print_type print_many2
    (57) print_many2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 180
    RPAREN          reduce using rule 2 (empty -> .)

    print_many2                    shift and go to state 232
    empty                          shift and go to state 181

state 209

    (65) call_function -> ID LPAREN exp exp_many RPAREN . optional_semicolon
    (66) optional_semicolon -> . empty
    (67) optional_semicolon -> . SEMICOLON
    (2) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 235
    IF              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    RBRACKET        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    MULTIPLY        reduce using rule 2 (empty -> .)
    DIVIDE          reduce using rule 2 (empty -> .)
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    EQUAL           reduce using rule 2 (empty -> .)
    NOTEQUAL        reduce using rule 2 (empty -> .)
    LTHAN           reduce using rule 2 (empty -> .)
    GTHAN           reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    RSQBRACKET      reduce using rule 2 (empty -> .)

  ! SEMICOLON       [ reduce using rule 2 (empty -> .) ]

    optional_semicolon             shift and go to state 233
    empty                          shift and go to state 234

state 210

    (68) exp_many -> COMMA exp . exp_many
    (68) exp_many -> . COMMA exp exp_many
    (69) exp_many -> . empty
    (2) empty -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 2 (empty -> .)

    exp_many                       shift and go to state 236
    empty                          shift and go to state 184

state 211

    (32) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 237
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 212

    (30) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 30 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 213

    (33) variable_matrix -> empty .

    ASSIGN          reduce using rule 33 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 33 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 33 (variable_matrix -> empty .)
    PLUS            reduce using rule 33 (variable_matrix -> empty .)
    MINUS           reduce using rule 33 (variable_matrix -> empty .)
    EQUAL           reduce using rule 33 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 33 (variable_matrix -> empty .)
    LTHAN           reduce using rule 33 (variable_matrix -> empty .)
    GTHAN           reduce using rule 33 (variable_matrix -> empty .)
    AND             reduce using rule 33 (variable_matrix -> empty .)
    OR              reduce using rule 33 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 33 (variable_matrix -> empty .)
    RPAREN          reduce using rule 33 (variable_matrix -> empty .)
    COMMA           reduce using rule 33 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 33 (variable_matrix -> empty .)


state 214

    (64) for_end -> ID .

    RPAREN          reduce using rule 64 (for_end -> ID .)


state 215

    (62) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 238


state 216

    (63) for_end -> CTE_INT .

    RPAREN          reduce using rule 63 (for_end -> CTE_INT .)


state 217

    (61) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 239


state 218

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET
    (40) return -> . RETURN exp SEMICOLON
    (41) return -> . empty
    (2) empty -> .

    RETURN          shift and go to state 241
    RBRACKET        reduce using rule 2 (empty -> .)

    return                         shift and go to state 240
    empty                          shift and go to state 242

state 219

    (38) param2 -> COMMA s_type ID . param2
    (38) param2 -> . COMMA s_type ID param2
    (39) param2 -> . empty
    (2) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 2 (empty -> .)

    param2                         shift and go to state 243
    empty                          shift and go to state 142

state 220

    (58) read -> READ LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 58 (read -> READ LPAREN variable RPAREN .)


state 221

    (81) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (84) explor_cte -> . COMMA CTE_INT
    (85) explor_cte -> . empty
    (2) empty -> .

    COMMA           shift and go to state 245
    RPAREN          reduce using rule 2 (empty -> .)

    explor_cte                     shift and go to state 244
    empty                          shift and go to state 246

state 222

    (82) explore_var -> COMMA . variable
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 247

state 223

    (83) explore_var -> empty .

    COMMA           reduce using rule 83 (explore_var -> empty .)
    RPAREN          reduce using rule 83 (explore_var -> empty .)


state 224

    (86) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 248

state 225

    (89) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 249

state 226

    (87) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 87 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 227

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 250


state 228

    (96) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 251

state 229

    (50) condition -> IF LPAREN exp RPAREN body condition2 . SEMICOLON

    SEMICOLON       shift and go to state 252


state 230

    (51) condition2 -> ELSE . body
    (43) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 91

    body                           shift and go to state 253

state 231

    (52) condition2 -> empty .

    SEMICOLON       reduce using rule 52 (condition2 -> empty .)


state 232

    (56) print_many2 -> COMMA print_type print_many2 .

    RPAREN          reduce using rule 56 (print_many2 -> COMMA print_type print_many2 .)


state 233

    (65) call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .

    IF              reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    PRINT           reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    ID              reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    FOR             reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    DO              reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    RBRACKET        reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    RETURN          reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    MULTIPLY        reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    DIVIDE          reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    PLUS            reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    MINUS           reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    EQUAL           reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    NOTEQUAL        reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    LTHAN           reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    GTHAN           reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    AND             reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    OR              reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    SEMICOLON       reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    RPAREN          reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    COMMA           reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)
    RSQBRACKET      reduce using rule 65 (call_function -> ID LPAREN exp exp_many RPAREN optional_semicolon .)


state 234

    (66) optional_semicolon -> empty .

    IF              reduce using rule 66 (optional_semicolon -> empty .)
    PRINT           reduce using rule 66 (optional_semicolon -> empty .)
    ID              reduce using rule 66 (optional_semicolon -> empty .)
    FOR             reduce using rule 66 (optional_semicolon -> empty .)
    DO              reduce using rule 66 (optional_semicolon -> empty .)
    RBRACKET        reduce using rule 66 (optional_semicolon -> empty .)
    RETURN          reduce using rule 66 (optional_semicolon -> empty .)
    MULTIPLY        reduce using rule 66 (optional_semicolon -> empty .)
    DIVIDE          reduce using rule 66 (optional_semicolon -> empty .)
    PLUS            reduce using rule 66 (optional_semicolon -> empty .)
    MINUS           reduce using rule 66 (optional_semicolon -> empty .)
    EQUAL           reduce using rule 66 (optional_semicolon -> empty .)
    NOTEQUAL        reduce using rule 66 (optional_semicolon -> empty .)
    LTHAN           reduce using rule 66 (optional_semicolon -> empty .)
    GTHAN           reduce using rule 66 (optional_semicolon -> empty .)
    AND             reduce using rule 66 (optional_semicolon -> empty .)
    OR              reduce using rule 66 (optional_semicolon -> empty .)
    SEMICOLON       reduce using rule 66 (optional_semicolon -> empty .)
    RPAREN          reduce using rule 66 (optional_semicolon -> empty .)
    COMMA           reduce using rule 66 (optional_semicolon -> empty .)
    RSQBRACKET      reduce using rule 66 (optional_semicolon -> empty .)


state 235

    (67) optional_semicolon -> SEMICOLON .

    IF              reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    PRINT           reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    ID              reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    FOR             reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    DO              reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    RBRACKET        reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    RETURN          reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    MULTIPLY        reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    DIVIDE          reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    PLUS            reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    MINUS           reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    EQUAL           reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    NOTEQUAL        reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    LTHAN           reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    GTHAN           reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    AND             reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    OR              reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    SEMICOLON       reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    RPAREN          reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    COMMA           reduce using rule 67 (optional_semicolon -> SEMICOLON .)
    RSQBRACKET      reduce using rule 67 (optional_semicolon -> SEMICOLON .)


state 236

    (68) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 68 (exp_many -> COMMA exp exp_many .)


state 237

    (32) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 254


state 238

    (62) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (43) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 91

    body                           shift and go to state 255

state 239

    (61) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 256


state 240

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET

    RBRACKET        shift and go to state 257


state 241

    (40) return -> RETURN . exp SEMICOLON
    (97) exp -> . t_exp exp_or
    (100) t_exp -> . expression t_exp_and
    (103) expression -> . m_exp expression_comp
    (110) m_exp -> . term m_exp_sr
    (115) term -> . factor term_pc
    (120) factor -> . factor_exp
    (121) factor -> . factor_cte
    (122) factor -> . variable
    (123) factor -> . call_function
    (124) factor_exp -> . LPAREN exp RPAREN
    (125) factor_cte -> . CTE_INT
    (126) factor_cte -> . CTE_FLOAT
    (127) factor_cte -> . CTE_CHAR
    (29) variable -> . ID variable_array
    (65) call_function -> . ID LPAREN exp exp_many RPAREN optional_semicolon

    LPAREN          shift and go to state 112
    CTE_INT         shift and go to state 119
    CTE_FLOAT       shift and go to state 127
    CTE_CHAR        shift and go to state 128
    ID              shift and go to state 129

    exp                            shift and go to state 258
    t_exp                          shift and go to state 104
    expression                     shift and go to state 113
    m_exp                          shift and go to state 121
    term                           shift and go to state 122
    factor                         shift and go to state 123
    factor_exp                     shift and go to state 124
    factor_cte                     shift and go to state 125
    variable                       shift and go to state 99
    call_function                  shift and go to state 126

state 242

    (41) return -> empty .

    RBRACKET        reduce using rule 41 (return -> empty .)


state 243

    (38) param2 -> COMMA s_type ID param2 .

    RPAREN          reduce using rule 38 (param2 -> COMMA s_type ID param2 .)


state 244

    (81) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 259


state 245

    (84) explor_cte -> COMMA . CTE_INT

    CTE_INT         shift and go to state 260


state 246

    (85) explor_cte -> empty .

    RPAREN          reduce using rule 85 (explor_cte -> empty .)


state 247

    (82) explore_var -> COMMA variable .

    COMMA           reduce using rule 82 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 82 (explore_var -> COMMA variable .)


state 248

    (86) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 261


state 249

    (89) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (90) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (91) dr_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 262
    RPAREN          reduce using rule 2 (empty -> .)

  ! COMMA           [ reduce using rule 2 (empty -> .) ]

    dr_array                       shift and go to state 263
    empty                          shift and go to state 264

state 250

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT . COMMA CTE_INT COMMA CTE_INT RPAREN

    COMMA           shift and go to state 265


state 251

    (96) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 266


state 252

    (50) condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .

    IF              reduce using rule 50 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    PRINT           reduce using rule 50 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    ID              reduce using rule 50 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    FOR             reduce using rule 50 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    DO              reduce using rule 50 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RBRACKET        reduce using rule 50 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)
    RETURN          reduce using rule 50 (condition -> IF LPAREN exp RPAREN body condition2 SEMICOLON .)


state 253

    (51) condition2 -> ELSE body .

    SEMICOLON       reduce using rule 51 (condition2 -> ELSE body .)


state 254

    (32) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 32 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 255

    (62) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 267


state 256

    (61) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 61 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 61 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 61 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 61 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 61 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 61 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 61 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 257

    (34) program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET .

    MAIN            reduce using rule 34 (program_function -> FUNCTION function_type ID LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET .)


state 258

    (40) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 268


state 259

    (81) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 81 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 260

    (84) explor_cte -> COMMA CTE_INT .

    RPAREN          reduce using rule 84 (explor_cte -> COMMA CTE_INT .)


state 261

    (86) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 269

state 262

    (90) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 270


state 263

    (89) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (94) dr_int -> . COMMA CTE_INT
    (95) dr_int -> . empty
    (2) empty -> .

    COMMA           shift and go to state 271
    RPAREN          reduce using rule 2 (empty -> .)

    dr_int                         shift and go to state 272
    empty                          shift and go to state 273

state 264

    (91) dr_array -> empty .

    COMMA           reduce using rule 91 (dr_array -> empty .)
    RPAREN          reduce using rule 91 (dr_array -> empty .)


state 265

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA . CTE_INT COMMA CTE_INT RPAREN

    CTE_INT         shift and go to state 274


state 266

    (96) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 275


state 267

    (62) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 62 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 62 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 62 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 62 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 62 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 62 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 62 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 268

    (40) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 40 (return -> RETURN exp SEMICOLON .)


state 269

    (86) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 276


state 270

    (90) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 277


state 271

    (94) dr_int -> COMMA . CTE_INT

    CTE_INT         shift and go to state 278


state 272

    (89) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 279


state 273

    (95) dr_int -> empty .

    RPAREN          reduce using rule 95 (dr_int -> empty .)


state 274

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT . COMMA CTE_INT RPAREN

    COMMA           shift and go to state 280


state 275

    (96) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 96 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 276

    (86) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (29) variable -> . ID variable_array

    ID              shift and go to state 194

    variable                       shift and go to state 281

state 277

    (90) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (92) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (93) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 282
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 283
    empty                          shift and go to state 284

state 278

    (94) dr_int -> COMMA CTE_INT .

    RPAREN          reduce using rule 94 (dr_int -> COMMA CTE_INT .)


state 279

    (89) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 89 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 280

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA . CTE_INT RPAREN

    CTE_INT         shift and go to state 285


state 281

    (86) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 286


state 282

    (92) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 287


state 283

    (90) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 288


state 284

    (93) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 93 (dr_array_mp -> empty .)


state 285

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT . RPAREN

    RPAREN          shift and go to state 289


state 286

    (86) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 86 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 287

    (92) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (92) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (93) dr_array_mp -> . empty
    (2) empty -> .

    COMMA           shift and go to state 282
    RSQBRACKET      reduce using rule 2 (empty -> .)

    dr_array_mp                    shift and go to state 290
    empty                          shift and go to state 284

state 288

    (90) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 90 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 90 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 289

    (88) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .

    SEMICOLON       reduce using rule 88 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA CTE_INT COMMA CTE_INT COMMA CTE_INT RPAREN .)


state 290

    (92) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 92 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 197 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 209 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 249 resolved as shift
