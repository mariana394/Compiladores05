Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end
Rule 2     end -> END empty
Rule 3     empty -> <empty>
Rule 4     id_saver -> ID empty
Rule 5     int_const_saver -> CTE_INT empty
Rule 6     release_exp -> empty
Rule 7     program_libraries -> from_library import_library
Rule 8     program_libraries -> empty
Rule 9     from_library -> FROM ID
Rule 10    from_library -> empty
Rule 11    import_library -> IMPORT ID AS ID program_libraries
Rule 12    var_type -> var_c_type
Rule 13    var_type -> var_s_type
Rule 14    program_vars -> VAR var_type
Rule 15    program_vars -> empty
Rule 16    s_type -> INT
Rule 17    s_type -> FLOAT
Rule 18    s_type -> CHAR
Rule 19    c_type -> DATAFRAME
Rule 20    c_type -> DATE
Rule 21    var_multiple -> var_type
Rule 22    var_multiple -> empty
Rule 23    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 24    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 25    var_c_type2 -> empty
Rule 26    add_c_var -> empty
Rule 27    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 28    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 29    var_s_type2 -> empty
Rule 30    add_s_var -> empty
Rule 31    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 32    var_s_array -> empty
Rule 33    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 34    var_s_matrix -> empty
Rule 35    var_s_dimesions -> CTE_INT empty
Rule 36    variable -> id_saver variable_array
Rule 37    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 38    variable_array -> empty
Rule 39    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 40    variable_matrix -> empty
Rule 41    program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
Rule 42    program_function -> empty
Rule 43    f_type -> INT
Rule 44    f_type -> FLOAT
Rule 45    f_type -> CHAR
Rule 46    f_type -> VOID
Rule 47    func_creator -> empty
Rule 48    param -> s_type id_saver add_params param2
Rule 49    param2 -> COMMA s_type id_saver add_params param2
Rule 50    param2 -> empty
Rule 51    add_params -> empty
Rule 52    return -> RETURN exp SEMICOLON
Rule 53    return -> empty
Rule 54    program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET
Rule 55    main_id -> empty
Rule 56    body -> LBRACKET inner_body RBRACKET
Rule 57    inner_body -> statement inner_body
Rule 58    inner_body -> empty
Rule 59    assign -> variable keep_assign specialf_assign end_assign
Rule 60    specialf_assign -> exp
Rule 61    specialf_assign -> special_function
Rule 62    specialf_assign -> read
Rule 63    keep_assign -> ASSIGN empty
Rule 64    end_assign -> SEMICOLON empty
Rule 65    condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
Rule 66    condition2 -> ELSE condition_GOTO body
Rule 67    condition2 -> empty
Rule 68    condition_GOTO -> empty
Rule 69    end_condition -> empty
Rule 70    condition_GOTOF -> empty
Rule 71    print -> PRINT LPAREN print_many RPAREN SEMICOLON
Rule 72    print_type -> exp
Rule 73    print_many -> print_type print_many2
Rule 74    print_many2 -> COMMA print_many
Rule 75    print_many2 -> empty
Rule 76    read -> READ LPAREN variable RPAREN
Rule 77    cycle -> for
Rule 78    cycle -> while
Rule 79    while -> DO body WHILE LPAREN exp RPAREN SEMICOLON
Rule 80    for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON
Rule 81    for_end -> int_const_saver
Rule 82    for_end -> ID
Rule 83    call_function -> function_saver LPAREN exp exp_many RPAREN
Rule 84    function_saver -> ID empty
Rule 85    exp_many -> COMMA exp exp_many
Rule 86    exp_many -> empty
Rule 87    statement -> assign
Rule 88    statement -> condition
Rule 89    statement -> print
Rule 90    statement -> cycle
Rule 91    statement -> call_function
Rule 92    special_function -> exploration
Rule 93    special_function -> financial_state
Rule 94    special_function -> dummi_regression
Rule 95    special_function -> season_analysis
Rule 96    special_function -> trend_prediction
Rule 97    special_function -> model_predict
Rule 98    exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 99    explore_var -> COMMA variable
Rule 100   explore_var -> empty
Rule 101   explor_cte -> COMMA int_const_saver
Rule 102   explor_cte -> empty
Rule 103   financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 104   season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 105   trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
Rule 106   dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 107   dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 108   dr_array -> empty
Rule 109   dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 110   dr_array_mp -> empty
Rule 111   dr_int -> COMMA int_const_saver
Rule 112   dr_int -> empty
Rule 113   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 114   exp -> t_exp release_exp exp_or
Rule 115   exp_or -> exp_keep_or exp
Rule 116   exp_or -> empty
Rule 117   exp_keep_or -> OR
Rule 118   t_exp -> expression release_exp t_exp_and
Rule 119   t_exp_and -> keep_and t_exp
Rule 120   t_exp_and -> empty
Rule 121   keep_and -> AND
Rule 122   expression -> m_exp release_exp expression_comp
Rule 123   expression_comp -> expression_comp_2 m_exp release_exp
Rule 124   expression_comp -> empty
Rule 125   expression_comp_2 -> GTHAN
Rule 126   expression_comp_2 -> EQUAL
Rule 127   expression_comp_2 -> NOTEQUAL
Rule 128   expression_comp_2 -> LTHAN
Rule 129   m_exp -> term release_exp m_exp_sr
Rule 130   m_exp_sr -> m_exp_sr_2 m_exp
Rule 131   m_exp_sr -> empty
Rule 132   m_exp_sr_2 -> PLUS
Rule 133   m_exp_sr_2 -> MINUS
Rule 134   term -> sub_factor release_exp term_pc
Rule 135   term_pc -> term_pc_2 term
Rule 136   term_pc -> empty
Rule 137   term_pc_2 -> MULTIPLY
Rule 138   term_pc_2 -> DIVIDE
Rule 139   term_pc_2 -> MODULE
Rule 140   sub_factor -> factor release_exp sub_factor_pc
Rule 141   sub_factor_pc -> sub_factor_pc_2 sub_factor
Rule 142   sub_factor_pc -> empty
Rule 143   sub_factor_pc_2 -> POWER empty
Rule 144   factor -> factor_exp
Rule 145   factor -> factor_cte
Rule 146   factor -> variable
Rule 147   factor -> call_function
Rule 148   factor_exp -> false_button exp release_false_button
Rule 149   false_button -> LPAREN
Rule 150   release_false_button -> RPAREN
Rule 151   factor_cte -> CTE_FLOAT
Rule 152   factor_cte -> CTE_INT
Rule 153   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 121
AS                   : 11
ASSIGN               : 63
CHAR                 : 18 45
COLON                : 
COMMA                : 24 28 49 74 85 99 101 103 103 103 105 105 105 106 107 109 111 113 113
CTE_CHAR             : 107 109 153
CTE_FLOAT            : 151
CTE_INT              : 5 35 152
DATAFRAME            : 19
DATE                 : 20
DIVIDE               : 138
DO                   : 79
DUMMI_REGRESSION     : 106
ELSE                 : 66
END                  : 2
EQUAL                : 126
EXPLORATION          : 98
FINANCIAL_STATE      : 103
FLOAT                : 17 44
FOR                  : 80
FROM                 : 9
FUNCTION             : 41
GTHAN                : 125
ID                   : 1 4 9 11 11 80 82 84
IF                   : 65
IMPORT               : 11
INT                  : 16 43
LBRACKET             : 41 54 56
LPAREN               : 41 65 71 76 79 80 83 98 103 104 105 106 113 149
LSQBRACKET           : 31 33 37 39 107
LTHAN                : 128
MAIN                 : 54
MINUS                : 133
MODEL_PREDICT        : 113
MODULE               : 139
MULTIPLY             : 137
NOTEQUAL             : 127
OR                   : 117
PLUS                 : 132
POWER                : 143
PRINT                : 71
PROGRAM              : 1
RBRACKET             : 41 54 56
READ                 : 76
RETURN               : 52
RPAREN               : 41 65 71 76 79 80 83 98 103 104 105 106 113 150
RSQBRACKET           : 31 33 37 39 107
SEASON_ANALYSIS      : 104
SEMICOLON            : 1 23 27 52 64 65 71 79 80
TO                   : 80
TREND_PREDICTION     : 105
VAR                  : 14
VOID                 : 46
WHILE                : 79
error                : 

Nonterminals, with rules where they appear

add_c_var            : 23 24
add_params           : 48 49
add_s_var            : 27 28
assign               : 87
body                 : 65 66 79 80
c_type               : 23
call_function        : 91 147
condition            : 88
condition2           : 65
condition_GOTO       : 66
condition_GOTOF      : 65
cycle                : 90
dr_array             : 106
dr_array_mp          : 107 109
dr_int               : 106
dummi_regression     : 94
empty                : 2 4 5 6 8 10 15 22 25 26 29 30 32 34 35 38 40 42 47 50 51 53 55 58 63 64 67 68 69 70 75 84 86 100 102 108 110 112 116 120 124 131 136 142 143
end                  : 1
end_assign           : 59
end_condition        : 65
exp                  : 37 39 52 60 65 72 79 83 85 115 148
exp_keep_or          : 115
exp_many             : 83 85
exp_or               : 114
explor_cte           : 98
exploration          : 92
explore_var          : 98
expression           : 118
expression_comp      : 122
expression_comp_2    : 123
f_type               : 41
factor               : 140
factor_cte           : 145
factor_exp           : 144
false_button         : 148
financial_state      : 93
for                  : 77
for_end              : 80
from_library         : 7
func_creator         : 41
function_saver       : 83
id_saver             : 23 24 27 28 36 41 48 49
import_library       : 7
inner_body           : 41 54 56 57
int_const_saver      : 81 101 105 105 105 111
keep_and             : 119
keep_assign          : 59
m_exp                : 122 123 130
m_exp_sr             : 129
m_exp_sr_2           : 130
main_id              : 54
model_predict        : 97
param                : 41
param2               : 48 49
print                : 89
print_many           : 71 74
print_many2          : 73
print_type           : 73
program              : 0
program_function     : 1 41
program_libraries    : 1 11
program_main         : 1
program_vars         : 1 41 54
read                 : 62
release_exp          : 114 118 122 123 129 134 140
release_false_button : 148
return               : 41
s_type               : 27 48 49
season_analysis      : 95
special_function     : 61
specialf_assign      : 59
statement            : 57
sub_factor           : 134 141
sub_factor_pc        : 140
sub_factor_pc_2      : 141
t_exp                : 114 119
t_exp_and            : 118
term                 : 129 135
term_pc              : 134
term_pc_2            : 135
trend_prediction     : 96
var_c_type           : 12
var_c_type2          : 23 24
var_multiple         : 23 27
var_s_array          : 27 28
var_s_dimesions      : 31 33
var_s_matrix         : 31
var_s_type           : 13
var_s_type2          : 27 28
var_type             : 14 21
variable             : 59 76 98 99 103 103 103 103 104 105 106 106 113 113 146
variable_array       : 36
variable_matrix      : 37
while                : 78

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main end

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main end

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main end
    (7) program_libraries -> . from_library import_library
    (8) program_libraries -> . empty
    (9) from_library -> . FROM ID
    (10) from_library -> . empty
    (3) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 3 (empty -> .)
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IMPORT          reduce using rule 3 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main end
    (14) program_vars -> . VAR var_type
    (15) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (7) program_libraries -> from_library . import_library
    (11) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (8) program_libraries -> empty .
    (10) from_library -> empty .

    VAR             reduce using rule 8 (program_libraries -> empty .)
    FUNCTION        reduce using rule 8 (program_libraries -> empty .)
    MAIN            reduce using rule 8 (program_libraries -> empty .)
    IMPORT          reduce using rule 10 (from_library -> empty .)


state 8

    (9) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main end
    (41) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (42) program_function -> . empty
    (3) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 3 (empty -> .)

    program_function               shift and go to state 15
    empty                          shift and go to state 17

state 10

    (14) program_vars -> VAR . var_type
    (12) var_type -> . var_c_type
    (13) var_type -> . var_s_type
    (23) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (27) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (19) c_type -> . DATAFRAME
    (20) c_type -> . DATE
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    var_type                       shift and go to state 18
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21
    s_type                         shift and go to state 22

state 11

    (15) program_vars -> empty .

    FUNCTION        reduce using rule 15 (program_vars -> empty .)
    MAIN            reduce using rule 15 (program_vars -> empty .)
    IF              reduce using rule 15 (program_vars -> empty .)
    PRINT           reduce using rule 15 (program_vars -> empty .)
    FOR             reduce using rule 15 (program_vars -> empty .)
    DO              reduce using rule 15 (program_vars -> empty .)
    ID              reduce using rule 15 (program_vars -> empty .)
    RBRACKET        reduce using rule 15 (program_vars -> empty .)
    RETURN          reduce using rule 15 (program_vars -> empty .)


state 12

    (7) program_libraries -> from_library import_library .

    VAR             reduce using rule 7 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 7 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 7 (program_libraries -> from_library import_library .)


state 13

    (11) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 28


state 14

    (9) from_library -> FROM ID .

    IMPORT          reduce using rule 9 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main end
    (54) program_main -> . MAIN main_id LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 30

    program_main                   shift and go to state 29

state 16

    (41) program_function -> FUNCTION . f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (43) f_type -> . INT
    (44) f_type -> . FLOAT
    (45) f_type -> . CHAR
    (46) f_type -> . VOID

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    f_type                         shift and go to state 31

state 17

    (42) program_function -> empty .

    MAIN            reduce using rule 42 (program_function -> empty .)


state 18

    (14) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 14 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 14 (program_vars -> VAR var_type .)
    IF              reduce using rule 14 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 14 (program_vars -> VAR var_type .)
    FOR             reduce using rule 14 (program_vars -> VAR var_type .)
    DO              reduce using rule 14 (program_vars -> VAR var_type .)
    ID              reduce using rule 14 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 14 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 14 (program_vars -> VAR var_type .)


state 19

    (12) var_type -> var_c_type .

    FUNCTION        reduce using rule 12 (var_type -> var_c_type .)
    MAIN            reduce using rule 12 (var_type -> var_c_type .)
    IF              reduce using rule 12 (var_type -> var_c_type .)
    PRINT           reduce using rule 12 (var_type -> var_c_type .)
    FOR             reduce using rule 12 (var_type -> var_c_type .)
    DO              reduce using rule 12 (var_type -> var_c_type .)
    ID              reduce using rule 12 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 12 (var_type -> var_c_type .)
    RETURN          reduce using rule 12 (var_type -> var_c_type .)


state 20

    (13) var_type -> var_s_type .

    FUNCTION        reduce using rule 13 (var_type -> var_s_type .)
    MAIN            reduce using rule 13 (var_type -> var_s_type .)
    IF              reduce using rule 13 (var_type -> var_s_type .)
    PRINT           reduce using rule 13 (var_type -> var_s_type .)
    FOR             reduce using rule 13 (var_type -> var_s_type .)
    DO              reduce using rule 13 (var_type -> var_s_type .)
    ID              reduce using rule 13 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 13 (var_type -> var_s_type .)
    RETURN          reduce using rule 13 (var_type -> var_s_type .)


state 21

    (23) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 36

state 22

    (27) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 38

state 23

    (19) c_type -> DATAFRAME .

    ID              reduce using rule 19 (c_type -> DATAFRAME .)


state 24

    (20) c_type -> DATE .

    ID              reduce using rule 20 (c_type -> DATE .)


state 25

    (16) s_type -> INT .

    ID              reduce using rule 16 (s_type -> INT .)


state 26

    (17) s_type -> FLOAT .

    ID              reduce using rule 17 (s_type -> FLOAT .)


state 27

    (18) s_type -> CHAR .

    ID              reduce using rule 18 (s_type -> CHAR .)


state 28

    (11) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 39


state 29

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . end
    (2) end -> . END empty

    END             shift and go to state 41

    end                            shift and go to state 40

state 30

    (54) program_main -> MAIN . main_id LBRACKET program_vars inner_body RBRACKET
    (55) main_id -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    main_id                        shift and go to state 42
    empty                          shift and go to state 43

state 31

    (41) program_function -> FUNCTION f_type . id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 44

state 32

    (43) f_type -> INT .

    ID              reduce using rule 43 (f_type -> INT .)


state 33

    (44) f_type -> FLOAT .

    ID              reduce using rule 44 (f_type -> FLOAT .)


state 34

    (45) f_type -> CHAR .

    ID              reduce using rule 45 (f_type -> CHAR .)


state 35

    (46) f_type -> VOID .

    ID              reduce using rule 46 (f_type -> VOID .)


state 36

    (23) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (26) add_c_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_c_var                      shift and go to state 45
    empty                          shift and go to state 46

state 37

    (4) id_saver -> ID . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    LSQBRACKET      reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 47

state 38

    (27) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (31) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (32) var_s_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 49
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_array                    shift and go to state 48
    empty                          shift and go to state 50

state 39

    (11) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 51


state 40

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end .)


state 41

    (2) end -> END . empty
    (3) empty -> .

    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 52

state 42

    (54) program_main -> MAIN main_id . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 53


state 43

    (55) main_id -> empty .

    LBRACKET        reduce using rule 55 (main_id -> empty .)


state 44

    (41) program_function -> FUNCTION f_type id_saver . func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (47) func_creator -> . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)

    func_creator                   shift and go to state 54
    empty                          shift and go to state 55

state 45

    (23) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (24) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (25) var_c_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_c_type2                    shift and go to state 56
    empty                          shift and go to state 58

state 46

    (26) add_c_var -> empty .

    COMMA           reduce using rule 26 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 26 (add_c_var -> empty .)


state 47

    (4) id_saver -> ID empty .

    COMMA           reduce using rule 4 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 4 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    LPAREN          reduce using rule 4 (id_saver -> ID empty .)
    RPAREN          reduce using rule 4 (id_saver -> ID empty .)


state 48

    (27) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (30) add_s_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_s_var                      shift and go to state 59
    empty                          shift and go to state 60

state 49

    (31) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (35) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 62

    var_s_dimesions                shift and go to state 61

state 50

    (32) var_s_array -> empty .

    COMMA           reduce using rule 32 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 32 (var_s_array -> empty .)


state 51

    (11) import_library -> IMPORT ID AS ID . program_libraries
    (7) program_libraries -> . from_library import_library
    (8) program_libraries -> . empty
    (9) from_library -> . FROM ID
    (10) from_library -> . empty
    (3) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 3 (empty -> .)
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IMPORT          reduce using rule 3 (empty -> .)

    program_libraries              shift and go to state 63
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 52

    (2) end -> END empty .

    $end            reduce using rule 2 (end -> END empty .)


state 53

    (54) program_main -> MAIN main_id LBRACKET . program_vars inner_body RBRACKET
    (14) program_vars -> . VAR var_type
    (15) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 64
    empty                          shift and go to state 11

state 54

    (41) program_function -> FUNCTION f_type id_saver func_creator . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    LPAREN          shift and go to state 65


state 55

    (47) func_creator -> empty .

    LPAREN          reduce using rule 47 (func_creator -> empty .)


state 56

    (23) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 66


state 57

    (24) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 67

state 58

    (25) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 25 (var_c_type2 -> empty .)


state 59

    (27) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (28) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (29) var_s_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_type2                    shift and go to state 68
    empty                          shift and go to state 70

state 60

    (30) add_s_var -> empty .

    COMMA           reduce using rule 30 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 30 (add_s_var -> empty .)


state 61

    (31) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 71


state 62

    (35) var_s_dimesions -> CTE_INT . empty
    (3) empty -> .

    RSQBRACKET      reduce using rule 3 (empty -> .)

    empty                          shift and go to state 72

state 63

    (11) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 11 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 11 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 11 (import_library -> IMPORT ID AS ID program_libraries .)


state 64

    (54) program_main -> MAIN main_id LBRACKET program_vars . inner_body RBRACKET
    (57) inner_body -> . statement inner_body
    (58) inner_body -> . empty
    (87) statement -> . assign
    (88) statement -> . condition
    (89) statement -> . print
    (90) statement -> . cycle
    (91) statement -> . call_function
    (3) empty -> .
    (59) assign -> . variable keep_assign specialf_assign end_assign
    (65) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (71) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (77) cycle -> . for
    (78) cycle -> . while
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (36) variable -> . id_saver variable_array
    (80) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (79) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (84) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    inner_body                     shift and go to state 73
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 65

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (48) param -> . s_type id_saver add_params param2
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    param                          shift and go to state 91
    s_type                         shift and go to state 92

state 66

    (23) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (21) var_multiple -> . var_type
    (22) var_multiple -> . empty
    (12) var_type -> . var_c_type
    (13) var_type -> . var_s_type
    (3) empty -> .
    (23) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (27) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (19) c_type -> . DATAFRAME
    (20) c_type -> . DATE
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    c_type                         shift and go to state 21
    var_multiple                   shift and go to state 93
    var_type                       shift and go to state 94
    empty                          shift and go to state 95
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    s_type                         shift and go to state 22

state 67

    (24) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (26) add_c_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_c_var                      shift and go to state 96
    empty                          shift and go to state 46

state 68

    (27) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 97


state 69

    (28) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 98

state 70

    (29) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 29 (var_s_type2 -> empty .)


state 71

    (31) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (33) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (34) var_s_matrix -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 99
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_matrix                   shift and go to state 100
    empty                          shift and go to state 101

state 72

    (35) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 35 (var_s_dimesions -> CTE_INT empty .)


state 73

    (54) program_main -> MAIN main_id LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 102


state 74

    (57) inner_body -> statement . inner_body
    (57) inner_body -> . statement inner_body
    (58) inner_body -> . empty
    (87) statement -> . assign
    (88) statement -> . condition
    (89) statement -> . print
    (90) statement -> . cycle
    (91) statement -> . call_function
    (3) empty -> .
    (59) assign -> . variable keep_assign specialf_assign end_assign
    (65) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (71) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (77) cycle -> . for
    (78) cycle -> . while
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (36) variable -> . id_saver variable_array
    (80) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (79) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (84) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    statement                      shift and go to state 74
    inner_body                     shift and go to state 103
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 75

    (58) inner_body -> empty .

    RBRACKET        reduce using rule 58 (inner_body -> empty .)
    RETURN          reduce using rule 58 (inner_body -> empty .)


state 76

    (87) statement -> assign .

    IF              reduce using rule 87 (statement -> assign .)
    PRINT           reduce using rule 87 (statement -> assign .)
    FOR             reduce using rule 87 (statement -> assign .)
    DO              reduce using rule 87 (statement -> assign .)
    ID              reduce using rule 87 (statement -> assign .)
    RBRACKET        reduce using rule 87 (statement -> assign .)
    RETURN          reduce using rule 87 (statement -> assign .)


state 77

    (88) statement -> condition .

    IF              reduce using rule 88 (statement -> condition .)
    PRINT           reduce using rule 88 (statement -> condition .)
    FOR             reduce using rule 88 (statement -> condition .)
    DO              reduce using rule 88 (statement -> condition .)
    ID              reduce using rule 88 (statement -> condition .)
    RBRACKET        reduce using rule 88 (statement -> condition .)
    RETURN          reduce using rule 88 (statement -> condition .)


state 78

    (89) statement -> print .

    IF              reduce using rule 89 (statement -> print .)
    PRINT           reduce using rule 89 (statement -> print .)
    FOR             reduce using rule 89 (statement -> print .)
    DO              reduce using rule 89 (statement -> print .)
    ID              reduce using rule 89 (statement -> print .)
    RBRACKET        reduce using rule 89 (statement -> print .)
    RETURN          reduce using rule 89 (statement -> print .)


state 79

    (90) statement -> cycle .

    IF              reduce using rule 90 (statement -> cycle .)
    PRINT           reduce using rule 90 (statement -> cycle .)
    FOR             reduce using rule 90 (statement -> cycle .)
    DO              reduce using rule 90 (statement -> cycle .)
    ID              reduce using rule 90 (statement -> cycle .)
    RBRACKET        reduce using rule 90 (statement -> cycle .)
    RETURN          reduce using rule 90 (statement -> cycle .)


state 80

    (91) statement -> call_function .

    IF              reduce using rule 91 (statement -> call_function .)
    PRINT           reduce using rule 91 (statement -> call_function .)
    FOR             reduce using rule 91 (statement -> call_function .)
    DO              reduce using rule 91 (statement -> call_function .)
    ID              reduce using rule 91 (statement -> call_function .)
    RBRACKET        reduce using rule 91 (statement -> call_function .)
    RETURN          reduce using rule 91 (statement -> call_function .)


state 81

    (59) assign -> variable . keep_assign specialf_assign end_assign
    (63) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 105

    keep_assign                    shift and go to state 104

state 82

    (65) condition -> IF . LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    LPAREN          shift and go to state 106


state 83

    (71) print -> PRINT . LPAREN print_many RPAREN SEMICOLON

    LPAREN          shift and go to state 107


state 84

    (77) cycle -> for .

    IF              reduce using rule 77 (cycle -> for .)
    PRINT           reduce using rule 77 (cycle -> for .)
    FOR             reduce using rule 77 (cycle -> for .)
    DO              reduce using rule 77 (cycle -> for .)
    ID              reduce using rule 77 (cycle -> for .)
    RBRACKET        reduce using rule 77 (cycle -> for .)
    RETURN          reduce using rule 77 (cycle -> for .)


state 85

    (78) cycle -> while .

    IF              reduce using rule 78 (cycle -> while .)
    PRINT           reduce using rule 78 (cycle -> while .)
    FOR             reduce using rule 78 (cycle -> while .)
    DO              reduce using rule 78 (cycle -> while .)
    ID              reduce using rule 78 (cycle -> while .)
    RBRACKET        reduce using rule 78 (cycle -> while .)
    RETURN          reduce using rule 78 (cycle -> while .)


state 86

    (83) call_function -> function_saver . LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 108


state 87

    (36) variable -> id_saver . variable_array
    (37) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (38) variable_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 110
    ASSIGN          reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    variable_array                 shift and go to state 109
    empty                          shift and go to state 111

state 88

    (80) for -> FOR . LPAREN ID TO for_end RPAREN body SEMICOLON

    LPAREN          shift and go to state 112


state 89

    (84) function_saver -> ID . empty
    (4) id_saver -> ID . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)
    LSQBRACKET      reduce using rule 3 (empty -> .)
    ASSIGN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 113

state 90

    (79) while -> DO . body WHILE LPAREN exp RPAREN SEMICOLON
    (56) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 114

state 91

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    RPAREN          shift and go to state 116


state 92

    (48) param -> s_type . id_saver add_params param2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 117

state 93

    (23) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 23 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 94

    (21) var_multiple -> var_type .

    FUNCTION        reduce using rule 21 (var_multiple -> var_type .)
    MAIN            reduce using rule 21 (var_multiple -> var_type .)
    IF              reduce using rule 21 (var_multiple -> var_type .)
    PRINT           reduce using rule 21 (var_multiple -> var_type .)
    FOR             reduce using rule 21 (var_multiple -> var_type .)
    DO              reduce using rule 21 (var_multiple -> var_type .)
    ID              reduce using rule 21 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 21 (var_multiple -> var_type .)
    RETURN          reduce using rule 21 (var_multiple -> var_type .)


state 95

    (22) var_multiple -> empty .

    FUNCTION        reduce using rule 22 (var_multiple -> empty .)
    MAIN            reduce using rule 22 (var_multiple -> empty .)
    IF              reduce using rule 22 (var_multiple -> empty .)
    PRINT           reduce using rule 22 (var_multiple -> empty .)
    FOR             reduce using rule 22 (var_multiple -> empty .)
    DO              reduce using rule 22 (var_multiple -> empty .)
    ID              reduce using rule 22 (var_multiple -> empty .)
    RBRACKET        reduce using rule 22 (var_multiple -> empty .)
    RETURN          reduce using rule 22 (var_multiple -> empty .)


state 96

    (24) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (24) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (25) var_c_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_c_type2                    shift and go to state 118
    empty                          shift and go to state 58

state 97

    (27) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (21) var_multiple -> . var_type
    (22) var_multiple -> . empty
    (12) var_type -> . var_c_type
    (13) var_type -> . var_s_type
    (3) empty -> .
    (23) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (27) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (19) c_type -> . DATAFRAME
    (20) c_type -> . DATE
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 22
    var_multiple                   shift and go to state 119
    var_type                       shift and go to state 94
    empty                          shift and go to state 95
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21

state 98

    (28) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (31) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (32) var_s_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 49
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_array                    shift and go to state 120
    empty                          shift and go to state 50

state 99

    (33) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (35) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 62

    var_s_dimesions                shift and go to state 121

state 100

    (31) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 31 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 31 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 101

    (34) var_s_matrix -> empty .

    COMMA           reduce using rule 34 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 34 (var_s_matrix -> empty .)


state 102

    (54) program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 54 (program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .)


state 103

    (57) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 57 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 57 (inner_body -> statement inner_body .)


state 104

    (59) assign -> variable keep_assign . specialf_assign end_assign
    (60) specialf_assign -> . exp
    (61) specialf_assign -> . special_function
    (62) specialf_assign -> . read
    (114) exp -> . t_exp release_exp exp_or
    (92) special_function -> . exploration
    (93) special_function -> . financial_state
    (94) special_function -> . dummi_regression
    (95) special_function -> . season_analysis
    (96) special_function -> . trend_prediction
    (97) special_function -> . model_predict
    (76) read -> . READ LPAREN variable RPAREN
    (118) t_exp -> . expression release_exp t_exp_and
    (98) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (103) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (106) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (104) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (105) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (113) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    READ            shift and go to state 134
    EXPLORATION     shift and go to state 137
    FINANCIAL_STATE shift and go to state 138
    DUMMI_REGRESSION shift and go to state 139
    SEASON_ANALYSIS shift and go to state 140
    TREND_PREDICTION shift and go to state 141
    MODEL_PREDICT   shift and go to state 142
    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    variable                       shift and go to state 122
    specialf_assign                shift and go to state 123
    exp                            shift and go to state 124
    special_function               shift and go to state 125
    read                           shift and go to state 126
    t_exp                          shift and go to state 127
    exploration                    shift and go to state 128
    financial_state                shift and go to state 129
    dummi_regression               shift and go to state 130
    season_analysis                shift and go to state 131
    trend_prediction               shift and go to state 132
    model_predict                  shift and go to state 133
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 105

    (63) keep_assign -> ASSIGN . empty
    (3) empty -> .

    READ            reduce using rule 3 (empty -> .)
    EXPLORATION     reduce using rule 3 (empty -> .)
    FINANCIAL_STATE reduce using rule 3 (empty -> .)
    DUMMI_REGRESSION reduce using rule 3 (empty -> .)
    SEASON_ANALYSIS reduce using rule 3 (empty -> .)
    TREND_PREDICTION reduce using rule 3 (empty -> .)
    MODEL_PREDICT   reduce using rule 3 (empty -> .)
    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    empty                          shift and go to state 155

state 106

    (65) condition -> IF LPAREN . exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 156
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 107

    (71) print -> PRINT LPAREN . print_many RPAREN SEMICOLON
    (73) print_many -> . print_type print_many2
    (72) print_type -> . exp
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    print_many                     shift and go to state 157
    print_type                     shift and go to state 158
    exp                            shift and go to state 159
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 108

    (83) call_function -> function_saver LPAREN . exp exp_many RPAREN
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    function_saver                 shift and go to state 86
    exp                            shift and go to state 160
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87

state 109

    (36) variable -> id_saver variable_array .

    ASSIGN          reduce using rule 36 (variable -> id_saver variable_array .)
    POWER           reduce using rule 36 (variable -> id_saver variable_array .)
    MULTIPLY        reduce using rule 36 (variable -> id_saver variable_array .)
    DIVIDE          reduce using rule 36 (variable -> id_saver variable_array .)
    MODULE          reduce using rule 36 (variable -> id_saver variable_array .)
    PLUS            reduce using rule 36 (variable -> id_saver variable_array .)
    MINUS           reduce using rule 36 (variable -> id_saver variable_array .)
    GTHAN           reduce using rule 36 (variable -> id_saver variable_array .)
    EQUAL           reduce using rule 36 (variable -> id_saver variable_array .)
    NOTEQUAL        reduce using rule 36 (variable -> id_saver variable_array .)
    LTHAN           reduce using rule 36 (variable -> id_saver variable_array .)
    AND             reduce using rule 36 (variable -> id_saver variable_array .)
    OR              reduce using rule 36 (variable -> id_saver variable_array .)
    SEMICOLON       reduce using rule 36 (variable -> id_saver variable_array .)
    RPAREN          reduce using rule 36 (variable -> id_saver variable_array .)
    COMMA           reduce using rule 36 (variable -> id_saver variable_array .)
    RSQBRACKET      reduce using rule 36 (variable -> id_saver variable_array .)


state 110

    (37) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 161
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 111

    (38) variable_array -> empty .

    ASSIGN          reduce using rule 38 (variable_array -> empty .)
    POWER           reduce using rule 38 (variable_array -> empty .)
    MULTIPLY        reduce using rule 38 (variable_array -> empty .)
    DIVIDE          reduce using rule 38 (variable_array -> empty .)
    MODULE          reduce using rule 38 (variable_array -> empty .)
    PLUS            reduce using rule 38 (variable_array -> empty .)
    MINUS           reduce using rule 38 (variable_array -> empty .)
    GTHAN           reduce using rule 38 (variable_array -> empty .)
    EQUAL           reduce using rule 38 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 38 (variable_array -> empty .)
    LTHAN           reduce using rule 38 (variable_array -> empty .)
    AND             reduce using rule 38 (variable_array -> empty .)
    OR              reduce using rule 38 (variable_array -> empty .)
    SEMICOLON       reduce using rule 38 (variable_array -> empty .)
    RPAREN          reduce using rule 38 (variable_array -> empty .)
    COMMA           reduce using rule 38 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 38 (variable_array -> empty .)


state 112

    (80) for -> FOR LPAREN . ID TO for_end RPAREN body SEMICOLON

    ID              shift and go to state 162


state 113

    (84) function_saver -> ID empty .
    (4) id_saver -> ID empty .

    LPAREN          reduce using rule 84 (function_saver -> ID empty .)
    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 4 (id_saver -> ID empty .)


state 114

    (79) while -> DO body . WHILE LPAREN exp RPAREN SEMICOLON

    WHILE           shift and go to state 163


state 115

    (56) body -> LBRACKET . inner_body RBRACKET
    (57) inner_body -> . statement inner_body
    (58) inner_body -> . empty
    (87) statement -> . assign
    (88) statement -> . condition
    (89) statement -> . print
    (90) statement -> . cycle
    (91) statement -> . call_function
    (3) empty -> .
    (59) assign -> . variable keep_assign specialf_assign end_assign
    (65) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (71) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (77) cycle -> . for
    (78) cycle -> . while
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (36) variable -> . id_saver variable_array
    (80) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (79) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (84) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    inner_body                     shift and go to state 164
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 116

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET program_function

    LBRACKET        shift and go to state 165


state 117

    (48) param -> s_type id_saver . add_params param2
    (51) add_params -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    add_params                     shift and go to state 166
    empty                          shift and go to state 167

state 118

    (24) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 24 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 119

    (27) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 27 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 120

    (28) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (30) add_s_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_s_var                      shift and go to state 168
    empty                          shift and go to state 60

state 121

    (33) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 169


state 122

    (146) factor -> variable .

    POWER           reduce using rule 146 (factor -> variable .)
    MULTIPLY        reduce using rule 146 (factor -> variable .)
    DIVIDE          reduce using rule 146 (factor -> variable .)
    MODULE          reduce using rule 146 (factor -> variable .)
    PLUS            reduce using rule 146 (factor -> variable .)
    MINUS           reduce using rule 146 (factor -> variable .)
    GTHAN           reduce using rule 146 (factor -> variable .)
    EQUAL           reduce using rule 146 (factor -> variable .)
    NOTEQUAL        reduce using rule 146 (factor -> variable .)
    LTHAN           reduce using rule 146 (factor -> variable .)
    AND             reduce using rule 146 (factor -> variable .)
    OR              reduce using rule 146 (factor -> variable .)
    SEMICOLON       reduce using rule 146 (factor -> variable .)
    RPAREN          reduce using rule 146 (factor -> variable .)
    COMMA           reduce using rule 146 (factor -> variable .)
    RSQBRACKET      reduce using rule 146 (factor -> variable .)


state 123

    (59) assign -> variable keep_assign specialf_assign . end_assign
    (64) end_assign -> . SEMICOLON empty

    SEMICOLON       shift and go to state 171

    end_assign                     shift and go to state 170

state 124

    (60) specialf_assign -> exp .

    SEMICOLON       reduce using rule 60 (specialf_assign -> exp .)


state 125

    (61) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 61 (specialf_assign -> special_function .)


state 126

    (62) specialf_assign -> read .

    SEMICOLON       reduce using rule 62 (specialf_assign -> read .)


state 127

    (114) exp -> t_exp . release_exp exp_or
    (6) release_exp -> . empty
    (3) empty -> .

    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 172
    empty                          shift and go to state 173

state 128

    (92) special_function -> exploration .

    SEMICOLON       reduce using rule 92 (special_function -> exploration .)


state 129

    (93) special_function -> financial_state .

    SEMICOLON       reduce using rule 93 (special_function -> financial_state .)


state 130

    (94) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 94 (special_function -> dummi_regression .)


state 131

    (95) special_function -> season_analysis .

    SEMICOLON       reduce using rule 95 (special_function -> season_analysis .)


state 132

    (96) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 96 (special_function -> trend_prediction .)


state 133

    (97) special_function -> model_predict .

    SEMICOLON       reduce using rule 97 (special_function -> model_predict .)


state 134

    (76) read -> READ . LPAREN variable RPAREN

    LPAREN          shift and go to state 174


state 135

    (149) false_button -> LPAREN .

    CTE_FLOAT       reduce using rule 149 (false_button -> LPAREN .)
    CTE_INT         reduce using rule 149 (false_button -> LPAREN .)
    CTE_CHAR        reduce using rule 149 (false_button -> LPAREN .)
    LPAREN          reduce using rule 149 (false_button -> LPAREN .)
    ID              reduce using rule 149 (false_button -> LPAREN .)


state 136

    (118) t_exp -> expression . release_exp t_exp_and
    (6) release_exp -> . empty
    (3) empty -> .

    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 175
    empty                          shift and go to state 173

state 137

    (98) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 176


state 138

    (103) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 177


state 139

    (106) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 178


state 140

    (104) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 179


state 141

    (105) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    LPAREN          shift and go to state 180


state 142

    (113) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 181


state 143

    (122) expression -> m_exp . release_exp expression_comp
    (6) release_exp -> . empty
    (3) empty -> .

    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 182
    empty                          shift and go to state 173

state 144

    (129) m_exp -> term . release_exp m_exp_sr
    (6) release_exp -> . empty
    (3) empty -> .

    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 183
    empty                          shift and go to state 173

state 145

    (134) term -> sub_factor . release_exp term_pc
    (6) release_exp -> . empty
    (3) empty -> .

    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 184
    empty                          shift and go to state 173

state 146

    (140) sub_factor -> factor . release_exp sub_factor_pc
    (6) release_exp -> . empty
    (3) empty -> .

    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 185
    empty                          shift and go to state 173

state 147

    (144) factor -> factor_exp .

    POWER           reduce using rule 144 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 144 (factor -> factor_exp .)
    DIVIDE          reduce using rule 144 (factor -> factor_exp .)
    MODULE          reduce using rule 144 (factor -> factor_exp .)
    PLUS            reduce using rule 144 (factor -> factor_exp .)
    MINUS           reduce using rule 144 (factor -> factor_exp .)
    GTHAN           reduce using rule 144 (factor -> factor_exp .)
    EQUAL           reduce using rule 144 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 144 (factor -> factor_exp .)
    LTHAN           reduce using rule 144 (factor -> factor_exp .)
    AND             reduce using rule 144 (factor -> factor_exp .)
    OR              reduce using rule 144 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 144 (factor -> factor_exp .)
    RPAREN          reduce using rule 144 (factor -> factor_exp .)
    COMMA           reduce using rule 144 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 144 (factor -> factor_exp .)


state 148

    (145) factor -> factor_cte .

    POWER           reduce using rule 145 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 145 (factor -> factor_cte .)
    DIVIDE          reduce using rule 145 (factor -> factor_cte .)
    MODULE          reduce using rule 145 (factor -> factor_cte .)
    PLUS            reduce using rule 145 (factor -> factor_cte .)
    MINUS           reduce using rule 145 (factor -> factor_cte .)
    GTHAN           reduce using rule 145 (factor -> factor_cte .)
    EQUAL           reduce using rule 145 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 145 (factor -> factor_cte .)
    LTHAN           reduce using rule 145 (factor -> factor_cte .)
    AND             reduce using rule 145 (factor -> factor_cte .)
    OR              reduce using rule 145 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 145 (factor -> factor_cte .)
    RPAREN          reduce using rule 145 (factor -> factor_cte .)
    COMMA           reduce using rule 145 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 145 (factor -> factor_cte .)


state 149

    (147) factor -> call_function .

    POWER           reduce using rule 147 (factor -> call_function .)
    MULTIPLY        reduce using rule 147 (factor -> call_function .)
    DIVIDE          reduce using rule 147 (factor -> call_function .)
    MODULE          reduce using rule 147 (factor -> call_function .)
    PLUS            reduce using rule 147 (factor -> call_function .)
    MINUS           reduce using rule 147 (factor -> call_function .)
    GTHAN           reduce using rule 147 (factor -> call_function .)
    EQUAL           reduce using rule 147 (factor -> call_function .)
    NOTEQUAL        reduce using rule 147 (factor -> call_function .)
    LTHAN           reduce using rule 147 (factor -> call_function .)
    AND             reduce using rule 147 (factor -> call_function .)
    OR              reduce using rule 147 (factor -> call_function .)
    SEMICOLON       reduce using rule 147 (factor -> call_function .)
    RPAREN          reduce using rule 147 (factor -> call_function .)
    COMMA           reduce using rule 147 (factor -> call_function .)
    RSQBRACKET      reduce using rule 147 (factor -> call_function .)


state 150

    (148) factor_exp -> false_button . exp release_false_button
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    false_button                   shift and go to state 150
    exp                            shift and go to state 186
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 151

    (151) factor_cte -> CTE_FLOAT .

    POWER           reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    MODULE          reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 151 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 151 (factor_cte -> CTE_FLOAT .)


state 152

    (152) factor_cte -> CTE_INT .

    POWER           reduce using rule 152 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 152 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 152 (factor_cte -> CTE_INT .)
    MODULE          reduce using rule 152 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 152 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 152 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 152 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 152 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 152 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 152 (factor_cte -> CTE_INT .)
    AND             reduce using rule 152 (factor_cte -> CTE_INT .)
    OR              reduce using rule 152 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 152 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 152 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 152 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 152 (factor_cte -> CTE_INT .)


state 153

    (153) factor_cte -> CTE_CHAR .

    POWER           reduce using rule 153 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 153 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 153 (factor_cte -> CTE_CHAR .)
    MODULE          reduce using rule 153 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 153 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 153 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 153 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 153 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 153 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 153 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 153 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 153 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 153 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 153 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 153 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 153 (factor_cte -> CTE_CHAR .)


state 154

    (4) id_saver -> ID . empty
    (84) function_saver -> ID . empty
    (3) empty -> .

    LSQBRACKET      reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    empty                          shift and go to state 187

state 155

    (63) keep_assign -> ASSIGN empty .

    READ            reduce using rule 63 (keep_assign -> ASSIGN empty .)
    EXPLORATION     reduce using rule 63 (keep_assign -> ASSIGN empty .)
    FINANCIAL_STATE reduce using rule 63 (keep_assign -> ASSIGN empty .)
    DUMMI_REGRESSION reduce using rule 63 (keep_assign -> ASSIGN empty .)
    SEASON_ANALYSIS reduce using rule 63 (keep_assign -> ASSIGN empty .)
    TREND_PREDICTION reduce using rule 63 (keep_assign -> ASSIGN empty .)
    MODEL_PREDICT   reduce using rule 63 (keep_assign -> ASSIGN empty .)
    CTE_FLOAT       reduce using rule 63 (keep_assign -> ASSIGN empty .)
    CTE_INT         reduce using rule 63 (keep_assign -> ASSIGN empty .)
    CTE_CHAR        reduce using rule 63 (keep_assign -> ASSIGN empty .)
    LPAREN          reduce using rule 63 (keep_assign -> ASSIGN empty .)
    ID              reduce using rule 63 (keep_assign -> ASSIGN empty .)


state 156

    (65) condition -> IF LPAREN exp . RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    RPAREN          shift and go to state 188


state 157

    (71) print -> PRINT LPAREN print_many . RPAREN SEMICOLON

    RPAREN          shift and go to state 189


state 158

    (73) print_many -> print_type . print_many2
    (74) print_many2 -> . COMMA print_many
    (75) print_many2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 191
    RPAREN          reduce using rule 3 (empty -> .)

    print_many2                    shift and go to state 190
    empty                          shift and go to state 192

state 159

    (72) print_type -> exp .

    COMMA           reduce using rule 72 (print_type -> exp .)
    RPAREN          reduce using rule 72 (print_type -> exp .)


state 160

    (83) call_function -> function_saver LPAREN exp . exp_many RPAREN
    (85) exp_many -> . COMMA exp exp_many
    (86) exp_many -> . empty
    (3) empty -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 3 (empty -> .)

    exp_many                       shift and go to state 193
    empty                          shift and go to state 195

state 161

    (37) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 196


state 162

    (80) for -> FOR LPAREN ID . TO for_end RPAREN body SEMICOLON

    TO              shift and go to state 197


state 163

    (79) while -> DO body WHILE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 198


state 164

    (56) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 199


state 165

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET program_function
    (14) program_vars -> . VAR var_type
    (15) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 200
    empty                          shift and go to state 11

state 166

    (48) param -> s_type id_saver add_params . param2
    (49) param2 -> . COMMA s_type id_saver add_params param2
    (50) param2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 202
    RPAREN          reduce using rule 3 (empty -> .)

    param2                         shift and go to state 201
    empty                          shift and go to state 203

state 167

    (51) add_params -> empty .

    COMMA           reduce using rule 51 (add_params -> empty .)
    RPAREN          reduce using rule 51 (add_params -> empty .)


state 168

    (28) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (28) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (29) var_s_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_type2                    shift and go to state 204
    empty                          shift and go to state 70

state 169

    (33) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 33 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 33 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 170

    (59) assign -> variable keep_assign specialf_assign end_assign .

    IF              reduce using rule 59 (assign -> variable keep_assign specialf_assign end_assign .)
    PRINT           reduce using rule 59 (assign -> variable keep_assign specialf_assign end_assign .)
    FOR             reduce using rule 59 (assign -> variable keep_assign specialf_assign end_assign .)
    DO              reduce using rule 59 (assign -> variable keep_assign specialf_assign end_assign .)
    ID              reduce using rule 59 (assign -> variable keep_assign specialf_assign end_assign .)
    RBRACKET        reduce using rule 59 (assign -> variable keep_assign specialf_assign end_assign .)
    RETURN          reduce using rule 59 (assign -> variable keep_assign specialf_assign end_assign .)


state 171

    (64) end_assign -> SEMICOLON . empty
    (3) empty -> .

    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 205

state 172

    (114) exp -> t_exp release_exp . exp_or
    (115) exp_or -> . exp_keep_or exp
    (116) exp_or -> . empty
    (117) exp_keep_or -> . OR
    (3) empty -> .

    OR              shift and go to state 209
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    exp_or                         shift and go to state 206
    exp_keep_or                    shift and go to state 207
    empty                          shift and go to state 208

state 173

    (6) release_exp -> empty .

    OR              reduce using rule 6 (release_exp -> empty .)
    SEMICOLON       reduce using rule 6 (release_exp -> empty .)
    RPAREN          reduce using rule 6 (release_exp -> empty .)
    COMMA           reduce using rule 6 (release_exp -> empty .)
    RSQBRACKET      reduce using rule 6 (release_exp -> empty .)
    AND             reduce using rule 6 (release_exp -> empty .)
    GTHAN           reduce using rule 6 (release_exp -> empty .)
    EQUAL           reduce using rule 6 (release_exp -> empty .)
    NOTEQUAL        reduce using rule 6 (release_exp -> empty .)
    LTHAN           reduce using rule 6 (release_exp -> empty .)
    PLUS            reduce using rule 6 (release_exp -> empty .)
    MINUS           reduce using rule 6 (release_exp -> empty .)
    MULTIPLY        reduce using rule 6 (release_exp -> empty .)
    DIVIDE          reduce using rule 6 (release_exp -> empty .)
    MODULE          reduce using rule 6 (release_exp -> empty .)
    POWER           reduce using rule 6 (release_exp -> empty .)


state 174

    (76) read -> READ LPAREN . variable RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 210
    id_saver                       shift and go to state 87

state 175

    (118) t_exp -> expression release_exp . t_exp_and
    (119) t_exp_and -> . keep_and t_exp
    (120) t_exp_and -> . empty
    (121) keep_and -> . AND
    (3) empty -> .

    AND             shift and go to state 214
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    t_exp_and                      shift and go to state 211
    keep_and                       shift and go to state 212
    empty                          shift and go to state 213

state 176

    (98) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 215
    id_saver                       shift and go to state 87

state 177

    (103) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 216
    id_saver                       shift and go to state 87

state 178

    (106) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 217
    id_saver                       shift and go to state 87

state 179

    (104) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 218
    id_saver                       shift and go to state 87

state 180

    (105) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 219
    id_saver                       shift and go to state 87

state 181

    (113) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 220
    id_saver                       shift and go to state 87

state 182

    (122) expression -> m_exp release_exp . expression_comp
    (123) expression_comp -> . expression_comp_2 m_exp release_exp
    (124) expression_comp -> . empty
    (125) expression_comp_2 -> . GTHAN
    (126) expression_comp_2 -> . EQUAL
    (127) expression_comp_2 -> . NOTEQUAL
    (128) expression_comp_2 -> . LTHAN
    (3) empty -> .

    GTHAN           shift and go to state 224
    EQUAL           shift and go to state 225
    NOTEQUAL        shift and go to state 226
    LTHAN           shift and go to state 227
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    expression_comp                shift and go to state 221
    expression_comp_2              shift and go to state 222
    empty                          shift and go to state 223

state 183

    (129) m_exp -> term release_exp . m_exp_sr
    (130) m_exp_sr -> . m_exp_sr_2 m_exp
    (131) m_exp_sr -> . empty
    (132) m_exp_sr_2 -> . PLUS
    (133) m_exp_sr_2 -> . MINUS
    (3) empty -> .

    PLUS            shift and go to state 231
    MINUS           shift and go to state 232
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    m_exp_sr                       shift and go to state 228
    m_exp_sr_2                     shift and go to state 229
    empty                          shift and go to state 230

state 184

    (134) term -> sub_factor release_exp . term_pc
    (135) term_pc -> . term_pc_2 term
    (136) term_pc -> . empty
    (137) term_pc_2 -> . MULTIPLY
    (138) term_pc_2 -> . DIVIDE
    (139) term_pc_2 -> . MODULE
    (3) empty -> .

    MULTIPLY        shift and go to state 236
    DIVIDE          shift and go to state 237
    MODULE          shift and go to state 238
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    term_pc                        shift and go to state 233
    term_pc_2                      shift and go to state 234
    empty                          shift and go to state 235

state 185

    (140) sub_factor -> factor release_exp . sub_factor_pc
    (141) sub_factor_pc -> . sub_factor_pc_2 sub_factor
    (142) sub_factor_pc -> . empty
    (143) sub_factor_pc_2 -> . POWER empty
    (3) empty -> .

    POWER           shift and go to state 242
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    sub_factor_pc                  shift and go to state 239
    sub_factor_pc_2                shift and go to state 240
    empty                          shift and go to state 241

state 186

    (148) factor_exp -> false_button exp . release_false_button
    (150) release_false_button -> . RPAREN

    RPAREN          shift and go to state 244

    release_false_button           shift and go to state 243

state 187

    (4) id_saver -> ID empty .
    (84) function_saver -> ID empty .

    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    POWER           reduce using rule 4 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 4 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 4 (id_saver -> ID empty .)
    MODULE          reduce using rule 4 (id_saver -> ID empty .)
    PLUS            reduce using rule 4 (id_saver -> ID empty .)
    MINUS           reduce using rule 4 (id_saver -> ID empty .)
    GTHAN           reduce using rule 4 (id_saver -> ID empty .)
    EQUAL           reduce using rule 4 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 4 (id_saver -> ID empty .)
    LTHAN           reduce using rule 4 (id_saver -> ID empty .)
    AND             reduce using rule 4 (id_saver -> ID empty .)
    OR              reduce using rule 4 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 4 (id_saver -> ID empty .)
    RPAREN          reduce using rule 4 (id_saver -> ID empty .)
    COMMA           reduce using rule 4 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    LPAREN          reduce using rule 84 (function_saver -> ID empty .)


state 188

    (65) condition -> IF LPAREN exp RPAREN . condition_GOTOF body condition2 SEMICOLON end_condition
    (70) condition_GOTOF -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    condition_GOTOF                shift and go to state 245
    empty                          shift and go to state 246

state 189

    (71) print -> PRINT LPAREN print_many RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 247


state 190

    (73) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 73 (print_many -> print_type print_many2 .)


state 191

    (74) print_many2 -> COMMA . print_many
    (73) print_many -> . print_type print_many2
    (72) print_type -> . exp
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    print_many                     shift and go to state 248
    print_type                     shift and go to state 158
    exp                            shift and go to state 159
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 192

    (75) print_many2 -> empty .

    RPAREN          reduce using rule 75 (print_many2 -> empty .)


state 193

    (83) call_function -> function_saver LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 249


state 194

    (85) exp_many -> COMMA . exp exp_many
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 250
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 195

    (86) exp_many -> empty .

    RPAREN          reduce using rule 86 (exp_many -> empty .)


state 196

    (37) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (39) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (40) variable_matrix -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 251
    ASSIGN          reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    variable_matrix                shift and go to state 252
    empty                          shift and go to state 253

state 197

    (80) for -> FOR LPAREN ID TO . for_end RPAREN body SEMICOLON
    (81) for_end -> . int_const_saver
    (82) for_end -> . ID
    (5) int_const_saver -> . CTE_INT empty

    ID              shift and go to state 254
    CTE_INT         shift and go to state 257

    for_end                        shift and go to state 255
    int_const_saver                shift and go to state 256

state 198

    (79) while -> DO body WHILE LPAREN . exp RPAREN SEMICOLON
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 258
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 199

    (56) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 56 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 56 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 56 (body -> LBRACKET inner_body RBRACKET .)


state 200

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET program_function
    (57) inner_body -> . statement inner_body
    (58) inner_body -> . empty
    (87) statement -> . assign
    (88) statement -> . condition
    (89) statement -> . print
    (90) statement -> . cycle
    (91) statement -> . call_function
    (3) empty -> .
    (59) assign -> . variable keep_assign specialf_assign end_assign
    (65) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (71) print -> . PRINT LPAREN print_many RPAREN SEMICOLON
    (77) cycle -> . for
    (78) cycle -> . while
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (36) variable -> . id_saver variable_array
    (80) for -> . FOR LPAREN ID TO for_end RPAREN body SEMICOLON
    (79) while -> . DO body WHILE LPAREN exp RPAREN SEMICOLON
    (84) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RETURN          reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 90
    ID              shift and go to state 89

    id_saver                       shift and go to state 87
    inner_body                     shift and go to state 259
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86

state 201

    (48) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 48 (param -> s_type id_saver add_params param2 .)


state 202

    (49) param2 -> COMMA . s_type id_saver add_params param2
    (16) s_type -> . INT
    (17) s_type -> . FLOAT
    (18) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 260

state 203

    (50) param2 -> empty .

    RPAREN          reduce using rule 50 (param2 -> empty .)


state 204

    (28) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 28 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 205

    (64) end_assign -> SEMICOLON empty .

    IF              reduce using rule 64 (end_assign -> SEMICOLON empty .)
    PRINT           reduce using rule 64 (end_assign -> SEMICOLON empty .)
    FOR             reduce using rule 64 (end_assign -> SEMICOLON empty .)
    DO              reduce using rule 64 (end_assign -> SEMICOLON empty .)
    ID              reduce using rule 64 (end_assign -> SEMICOLON empty .)
    RBRACKET        reduce using rule 64 (end_assign -> SEMICOLON empty .)
    RETURN          reduce using rule 64 (end_assign -> SEMICOLON empty .)


state 206

    (114) exp -> t_exp release_exp exp_or .

    SEMICOLON       reduce using rule 114 (exp -> t_exp release_exp exp_or .)
    RPAREN          reduce using rule 114 (exp -> t_exp release_exp exp_or .)
    COMMA           reduce using rule 114 (exp -> t_exp release_exp exp_or .)
    RSQBRACKET      reduce using rule 114 (exp -> t_exp release_exp exp_or .)


state 207

    (115) exp_or -> exp_keep_or . exp
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 261
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 208

    (116) exp_or -> empty .

    SEMICOLON       reduce using rule 116 (exp_or -> empty .)
    RPAREN          reduce using rule 116 (exp_or -> empty .)
    COMMA           reduce using rule 116 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 116 (exp_or -> empty .)


state 209

    (117) exp_keep_or -> OR .

    CTE_FLOAT       reduce using rule 117 (exp_keep_or -> OR .)
    CTE_INT         reduce using rule 117 (exp_keep_or -> OR .)
    CTE_CHAR        reduce using rule 117 (exp_keep_or -> OR .)
    LPAREN          reduce using rule 117 (exp_keep_or -> OR .)
    ID              reduce using rule 117 (exp_keep_or -> OR .)


state 210

    (76) read -> READ LPAREN variable . RPAREN

    RPAREN          shift and go to state 262


state 211

    (118) t_exp -> expression release_exp t_exp_and .

    OR              reduce using rule 118 (t_exp -> expression release_exp t_exp_and .)
    SEMICOLON       reduce using rule 118 (t_exp -> expression release_exp t_exp_and .)
    RPAREN          reduce using rule 118 (t_exp -> expression release_exp t_exp_and .)
    COMMA           reduce using rule 118 (t_exp -> expression release_exp t_exp_and .)
    RSQBRACKET      reduce using rule 118 (t_exp -> expression release_exp t_exp_and .)


state 212

    (119) t_exp_and -> keep_and . t_exp
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    t_exp                          shift and go to state 263
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 213

    (120) t_exp_and -> empty .

    OR              reduce using rule 120 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 120 (t_exp_and -> empty .)
    RPAREN          reduce using rule 120 (t_exp_and -> empty .)
    COMMA           reduce using rule 120 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 120 (t_exp_and -> empty .)


state 214

    (121) keep_and -> AND .

    CTE_FLOAT       reduce using rule 121 (keep_and -> AND .)
    CTE_INT         reduce using rule 121 (keep_and -> AND .)
    CTE_CHAR        reduce using rule 121 (keep_and -> AND .)
    LPAREN          reduce using rule 121 (keep_and -> AND .)
    ID              reduce using rule 121 (keep_and -> AND .)


state 215

    (98) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (99) explore_var -> . COMMA variable
    (100) explore_var -> . empty
    (3) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 265
    RPAREN          reduce using rule 3 (empty -> .)

  ! COMMA           [ reduce using rule 3 (empty -> .) ]

    explore_var                    shift and go to state 264
    empty                          shift and go to state 266

state 216

    (103) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 267


state 217

    (106) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 268


state 218

    (104) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 269


state 219

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 270


state 220

    (113) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 271


state 221

    (122) expression -> m_exp release_exp expression_comp .

    AND             reduce using rule 122 (expression -> m_exp release_exp expression_comp .)
    OR              reduce using rule 122 (expression -> m_exp release_exp expression_comp .)
    SEMICOLON       reduce using rule 122 (expression -> m_exp release_exp expression_comp .)
    RPAREN          reduce using rule 122 (expression -> m_exp release_exp expression_comp .)
    COMMA           reduce using rule 122 (expression -> m_exp release_exp expression_comp .)
    RSQBRACKET      reduce using rule 122 (expression -> m_exp release_exp expression_comp .)


state 222

    (123) expression_comp -> expression_comp_2 . m_exp release_exp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    m_exp                          shift and go to state 272
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 223

    (124) expression_comp -> empty .

    AND             reduce using rule 124 (expression_comp -> empty .)
    OR              reduce using rule 124 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 124 (expression_comp -> empty .)
    RPAREN          reduce using rule 124 (expression_comp -> empty .)
    COMMA           reduce using rule 124 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 124 (expression_comp -> empty .)


state 224

    (125) expression_comp_2 -> GTHAN .

    CTE_FLOAT       reduce using rule 125 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 125 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 125 (expression_comp_2 -> GTHAN .)
    LPAREN          reduce using rule 125 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 125 (expression_comp_2 -> GTHAN .)


state 225

    (126) expression_comp_2 -> EQUAL .

    CTE_FLOAT       reduce using rule 126 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 126 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 126 (expression_comp_2 -> EQUAL .)
    LPAREN          reduce using rule 126 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 126 (expression_comp_2 -> EQUAL .)


state 226

    (127) expression_comp_2 -> NOTEQUAL .

    CTE_FLOAT       reduce using rule 127 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 127 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 127 (expression_comp_2 -> NOTEQUAL .)
    LPAREN          reduce using rule 127 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 127 (expression_comp_2 -> NOTEQUAL .)


state 227

    (128) expression_comp_2 -> LTHAN .

    CTE_FLOAT       reduce using rule 128 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 128 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 128 (expression_comp_2 -> LTHAN .)
    LPAREN          reduce using rule 128 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 128 (expression_comp_2 -> LTHAN .)


state 228

    (129) m_exp -> term release_exp m_exp_sr .

    GTHAN           reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    EQUAL           reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    NOTEQUAL        reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    LTHAN           reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    AND             reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    OR              reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    SEMICOLON       reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    RPAREN          reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    COMMA           reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)
    RSQBRACKET      reduce using rule 129 (m_exp -> term release_exp m_exp_sr .)


state 229

    (130) m_exp_sr -> m_exp_sr_2 . m_exp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    m_exp                          shift and go to state 273
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 230

    (131) m_exp_sr -> empty .

    GTHAN           reduce using rule 131 (m_exp_sr -> empty .)
    EQUAL           reduce using rule 131 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 131 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 131 (m_exp_sr -> empty .)
    AND             reduce using rule 131 (m_exp_sr -> empty .)
    OR              reduce using rule 131 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 131 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 131 (m_exp_sr -> empty .)
    COMMA           reduce using rule 131 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 131 (m_exp_sr -> empty .)


state 231

    (132) m_exp_sr_2 -> PLUS .

    CTE_FLOAT       reduce using rule 132 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 132 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 132 (m_exp_sr_2 -> PLUS .)
    LPAREN          reduce using rule 132 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 132 (m_exp_sr_2 -> PLUS .)


state 232

    (133) m_exp_sr_2 -> MINUS .

    CTE_FLOAT       reduce using rule 133 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 133 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 133 (m_exp_sr_2 -> MINUS .)
    LPAREN          reduce using rule 133 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 133 (m_exp_sr_2 -> MINUS .)


state 233

    (134) term -> sub_factor release_exp term_pc .

    PLUS            reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    MINUS           reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    GTHAN           reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    EQUAL           reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    NOTEQUAL        reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    LTHAN           reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    AND             reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    OR              reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    SEMICOLON       reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    RPAREN          reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    COMMA           reduce using rule 134 (term -> sub_factor release_exp term_pc .)
    RSQBRACKET      reduce using rule 134 (term -> sub_factor release_exp term_pc .)


state 234

    (135) term_pc -> term_pc_2 . term
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    term                           shift and go to state 274
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 235

    (136) term_pc -> empty .

    PLUS            reduce using rule 136 (term_pc -> empty .)
    MINUS           reduce using rule 136 (term_pc -> empty .)
    GTHAN           reduce using rule 136 (term_pc -> empty .)
    EQUAL           reduce using rule 136 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 136 (term_pc -> empty .)
    LTHAN           reduce using rule 136 (term_pc -> empty .)
    AND             reduce using rule 136 (term_pc -> empty .)
    OR              reduce using rule 136 (term_pc -> empty .)
    SEMICOLON       reduce using rule 136 (term_pc -> empty .)
    RPAREN          reduce using rule 136 (term_pc -> empty .)
    COMMA           reduce using rule 136 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 136 (term_pc -> empty .)


state 236

    (137) term_pc_2 -> MULTIPLY .

    CTE_FLOAT       reduce using rule 137 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 137 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 137 (term_pc_2 -> MULTIPLY .)
    LPAREN          reduce using rule 137 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 137 (term_pc_2 -> MULTIPLY .)


state 237

    (138) term_pc_2 -> DIVIDE .

    CTE_FLOAT       reduce using rule 138 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 138 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 138 (term_pc_2 -> DIVIDE .)
    LPAREN          reduce using rule 138 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 138 (term_pc_2 -> DIVIDE .)


state 238

    (139) term_pc_2 -> MODULE .

    CTE_FLOAT       reduce using rule 139 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 139 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 139 (term_pc_2 -> MODULE .)
    LPAREN          reduce using rule 139 (term_pc_2 -> MODULE .)
    ID              reduce using rule 139 (term_pc_2 -> MODULE .)


state 239

    (140) sub_factor -> factor release_exp sub_factor_pc .

    MULTIPLY        reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    DIVIDE          reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    MODULE          reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    PLUS            reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    MINUS           reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    GTHAN           reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    EQUAL           reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    NOTEQUAL        reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    LTHAN           reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    AND             reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    OR              reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    SEMICOLON       reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    RPAREN          reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    COMMA           reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)
    RSQBRACKET      reduce using rule 140 (sub_factor -> factor release_exp sub_factor_pc .)


state 240

    (141) sub_factor_pc -> sub_factor_pc_2 . sub_factor
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    sub_factor                     shift and go to state 275
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 241

    (142) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 142 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 142 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 142 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 142 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 142 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 142 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 142 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 142 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 142 (sub_factor_pc -> empty .)
    AND             reduce using rule 142 (sub_factor_pc -> empty .)
    OR              reduce using rule 142 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 142 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 142 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 142 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 142 (sub_factor_pc -> empty .)


state 242

    (143) sub_factor_pc_2 -> POWER . empty
    (3) empty -> .

    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    empty                          shift and go to state 276

state 243

    (148) factor_exp -> false_button exp release_false_button .

    POWER           reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    MULTIPLY        reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    DIVIDE          reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    MODULE          reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    PLUS            reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    MINUS           reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    GTHAN           reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    EQUAL           reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    NOTEQUAL        reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    LTHAN           reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    AND             reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    OR              reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    SEMICOLON       reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    RPAREN          reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    COMMA           reduce using rule 148 (factor_exp -> false_button exp release_false_button .)
    RSQBRACKET      reduce using rule 148 (factor_exp -> false_button exp release_false_button .)


state 244

    (150) release_false_button -> RPAREN .

    POWER           reduce using rule 150 (release_false_button -> RPAREN .)
    MULTIPLY        reduce using rule 150 (release_false_button -> RPAREN .)
    DIVIDE          reduce using rule 150 (release_false_button -> RPAREN .)
    MODULE          reduce using rule 150 (release_false_button -> RPAREN .)
    PLUS            reduce using rule 150 (release_false_button -> RPAREN .)
    MINUS           reduce using rule 150 (release_false_button -> RPAREN .)
    GTHAN           reduce using rule 150 (release_false_button -> RPAREN .)
    EQUAL           reduce using rule 150 (release_false_button -> RPAREN .)
    NOTEQUAL        reduce using rule 150 (release_false_button -> RPAREN .)
    LTHAN           reduce using rule 150 (release_false_button -> RPAREN .)
    AND             reduce using rule 150 (release_false_button -> RPAREN .)
    OR              reduce using rule 150 (release_false_button -> RPAREN .)
    SEMICOLON       reduce using rule 150 (release_false_button -> RPAREN .)
    RPAREN          reduce using rule 150 (release_false_button -> RPAREN .)
    COMMA           reduce using rule 150 (release_false_button -> RPAREN .)
    RSQBRACKET      reduce using rule 150 (release_false_button -> RPAREN .)


state 245

    (65) condition -> IF LPAREN exp RPAREN condition_GOTOF . body condition2 SEMICOLON end_condition
    (56) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 277

state 246

    (70) condition_GOTOF -> empty .

    LBRACKET        reduce using rule 70 (condition_GOTOF -> empty .)


state 247

    (71) print -> PRINT LPAREN print_many RPAREN SEMICOLON .

    IF              reduce using rule 71 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    PRINT           reduce using rule 71 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    FOR             reduce using rule 71 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    DO              reduce using rule 71 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    ID              reduce using rule 71 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 71 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)
    RETURN          reduce using rule 71 (print -> PRINT LPAREN print_many RPAREN SEMICOLON .)


state 248

    (74) print_many2 -> COMMA print_many .

    RPAREN          reduce using rule 74 (print_many2 -> COMMA print_many .)


state 249

    (83) call_function -> function_saver LPAREN exp exp_many RPAREN .

    IF              reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    POWER           reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MODULE          reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 83 (call_function -> function_saver LPAREN exp exp_many RPAREN .)


state 250

    (85) exp_many -> COMMA exp . exp_many
    (85) exp_many -> . COMMA exp exp_many
    (86) exp_many -> . empty
    (3) empty -> .

    COMMA           shift and go to state 194
    RPAREN          reduce using rule 3 (empty -> .)

    exp_many                       shift and go to state 278
    empty                          shift and go to state 195

state 251

    (39) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 279
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 252

    (37) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    POWER           reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 37 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 253

    (40) variable_matrix -> empty .

    ASSIGN          reduce using rule 40 (variable_matrix -> empty .)
    POWER           reduce using rule 40 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 40 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 40 (variable_matrix -> empty .)
    MODULE          reduce using rule 40 (variable_matrix -> empty .)
    PLUS            reduce using rule 40 (variable_matrix -> empty .)
    MINUS           reduce using rule 40 (variable_matrix -> empty .)
    GTHAN           reduce using rule 40 (variable_matrix -> empty .)
    EQUAL           reduce using rule 40 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 40 (variable_matrix -> empty .)
    LTHAN           reduce using rule 40 (variable_matrix -> empty .)
    AND             reduce using rule 40 (variable_matrix -> empty .)
    OR              reduce using rule 40 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 40 (variable_matrix -> empty .)
    RPAREN          reduce using rule 40 (variable_matrix -> empty .)
    COMMA           reduce using rule 40 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 40 (variable_matrix -> empty .)


state 254

    (82) for_end -> ID .

    RPAREN          reduce using rule 82 (for_end -> ID .)


state 255

    (80) for -> FOR LPAREN ID TO for_end . RPAREN body SEMICOLON

    RPAREN          shift and go to state 280


state 256

    (81) for_end -> int_const_saver .

    RPAREN          reduce using rule 81 (for_end -> int_const_saver .)


state 257

    (5) int_const_saver -> CTE_INT . empty
    (3) empty -> .

    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)

    empty                          shift and go to state 281

state 258

    (79) while -> DO body WHILE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 282


state 259

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET program_function
    (52) return -> . RETURN exp SEMICOLON
    (53) return -> . empty
    (3) empty -> .

    RETURN          shift and go to state 284
    RBRACKET        reduce using rule 3 (empty -> .)

    return                         shift and go to state 283
    empty                          shift and go to state 285

state 260

    (49) param2 -> COMMA s_type . id_saver add_params param2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 286

state 261

    (115) exp_or -> exp_keep_or exp .

    SEMICOLON       reduce using rule 115 (exp_or -> exp_keep_or exp .)
    RPAREN          reduce using rule 115 (exp_or -> exp_keep_or exp .)
    COMMA           reduce using rule 115 (exp_or -> exp_keep_or exp .)
    RSQBRACKET      reduce using rule 115 (exp_or -> exp_keep_or exp .)


state 262

    (76) read -> READ LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 76 (read -> READ LPAREN variable RPAREN .)


state 263

    (119) t_exp_and -> keep_and t_exp .

    OR              reduce using rule 119 (t_exp_and -> keep_and t_exp .)
    SEMICOLON       reduce using rule 119 (t_exp_and -> keep_and t_exp .)
    RPAREN          reduce using rule 119 (t_exp_and -> keep_and t_exp .)
    COMMA           reduce using rule 119 (t_exp_and -> keep_and t_exp .)
    RSQBRACKET      reduce using rule 119 (t_exp_and -> keep_and t_exp .)


state 264

    (98) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (101) explor_cte -> . COMMA int_const_saver
    (102) explor_cte -> . empty
    (3) empty -> .

    COMMA           shift and go to state 288
    RPAREN          reduce using rule 3 (empty -> .)

    explor_cte                     shift and go to state 287
    empty                          shift and go to state 289

state 265

    (99) explore_var -> COMMA . variable
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 290
    id_saver                       shift and go to state 87

state 266

    (100) explore_var -> empty .

    COMMA           reduce using rule 100 (explore_var -> empty .)
    RPAREN          reduce using rule 100 (explore_var -> empty .)


state 267

    (103) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 291
    id_saver                       shift and go to state 87

state 268

    (106) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 292
    id_saver                       shift and go to state 87

state 269

    (104) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 104 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 270

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 257

    int_const_saver                shift and go to state 293

state 271

    (113) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 294
    id_saver                       shift and go to state 87

state 272

    (123) expression_comp -> expression_comp_2 m_exp . release_exp
    (6) release_exp -> . empty
    (3) empty -> .

    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 295
    empty                          shift and go to state 173

state 273

    (130) m_exp_sr -> m_exp_sr_2 m_exp .

    GTHAN           reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    EQUAL           reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 130 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 274

    (135) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 135 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 135 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 135 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 135 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 135 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 135 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 135 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 135 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 135 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 135 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 135 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 135 (term_pc -> term_pc_2 term .)


state 275

    (141) sub_factor_pc -> sub_factor_pc_2 sub_factor .

    MULTIPLY        reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    DIVIDE          reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MODULE          reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    PLUS            reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MINUS           reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GTHAN           reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    EQUAL           reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    NOTEQUAL        reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LTHAN           reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    AND             reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    OR              reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    SEMICOLON       reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RPAREN          reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    COMMA           reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RSQBRACKET      reduce using rule 141 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)


state 276

    (143) sub_factor_pc_2 -> POWER empty .

    CTE_FLOAT       reduce using rule 143 (sub_factor_pc_2 -> POWER empty .)
    CTE_INT         reduce using rule 143 (sub_factor_pc_2 -> POWER empty .)
    CTE_CHAR        reduce using rule 143 (sub_factor_pc_2 -> POWER empty .)
    LPAREN          reduce using rule 143 (sub_factor_pc_2 -> POWER empty .)
    ID              reduce using rule 143 (sub_factor_pc_2 -> POWER empty .)


state 277

    (65) condition -> IF LPAREN exp RPAREN condition_GOTOF body . condition2 SEMICOLON end_condition
    (66) condition2 -> . ELSE condition_GOTO body
    (67) condition2 -> . empty
    (3) empty -> .

    ELSE            shift and go to state 297
    SEMICOLON       reduce using rule 3 (empty -> .)

    condition2                     shift and go to state 296
    empty                          shift and go to state 298

state 278

    (85) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 85 (exp_many -> COMMA exp exp_many .)


state 279

    (39) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 299


state 280

    (80) for -> FOR LPAREN ID TO for_end RPAREN . body SEMICOLON
    (56) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 300

state 281

    (5) int_const_saver -> CTE_INT empty .

    RPAREN          reduce using rule 5 (int_const_saver -> CTE_INT empty .)
    COMMA           reduce using rule 5 (int_const_saver -> CTE_INT empty .)


state 282

    (79) while -> DO body WHILE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 301


state 283

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET program_function

    RBRACKET        shift and go to state 302


state 284

    (52) return -> RETURN . exp SEMICOLON
    (114) exp -> . t_exp release_exp exp_or
    (118) t_exp -> . expression release_exp t_exp_and
    (122) expression -> . m_exp release_exp expression_comp
    (129) m_exp -> . term release_exp m_exp_sr
    (134) term -> . sub_factor release_exp term_pc
    (140) sub_factor -> . factor release_exp sub_factor_pc
    (144) factor -> . factor_exp
    (145) factor -> . factor_cte
    (146) factor -> . variable
    (147) factor -> . call_function
    (148) factor_exp -> . false_button exp release_false_button
    (151) factor_cte -> . CTE_FLOAT
    (152) factor_cte -> . CTE_INT
    (153) factor_cte -> . CTE_CHAR
    (36) variable -> . id_saver variable_array
    (83) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (149) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (84) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 303
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 285

    (53) return -> empty .

    RBRACKET        reduce using rule 53 (return -> empty .)


state 286

    (49) param2 -> COMMA s_type id_saver . add_params param2
    (51) add_params -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    add_params                     shift and go to state 304
    empty                          shift and go to state 167

state 287

    (98) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 305


state 288

    (101) explor_cte -> COMMA . int_const_saver
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 257

    int_const_saver                shift and go to state 306

state 289

    (102) explor_cte -> empty .

    RPAREN          reduce using rule 102 (explor_cte -> empty .)


state 290

    (99) explore_var -> COMMA variable .

    COMMA           reduce using rule 99 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 99 (explore_var -> COMMA variable .)


state 291

    (103) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 307


state 292

    (106) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (107) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (108) dr_array -> . empty
    (3) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 308
    RPAREN          reduce using rule 3 (empty -> .)

  ! COMMA           [ reduce using rule 3 (empty -> .) ]

    dr_array                       shift and go to state 309
    empty                          shift and go to state 310

state 293

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver . COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 311


state 294

    (113) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 312


state 295

    (123) expression_comp -> expression_comp_2 m_exp release_exp .

    AND             reduce using rule 123 (expression_comp -> expression_comp_2 m_exp release_exp .)
    OR              reduce using rule 123 (expression_comp -> expression_comp_2 m_exp release_exp .)
    SEMICOLON       reduce using rule 123 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RPAREN          reduce using rule 123 (expression_comp -> expression_comp_2 m_exp release_exp .)
    COMMA           reduce using rule 123 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RSQBRACKET      reduce using rule 123 (expression_comp -> expression_comp_2 m_exp release_exp .)


state 296

    (65) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 . SEMICOLON end_condition

    SEMICOLON       shift and go to state 313


state 297

    (66) condition2 -> ELSE . condition_GOTO body
    (68) condition_GOTO -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    condition_GOTO                 shift and go to state 314
    empty                          shift and go to state 315

state 298

    (67) condition2 -> empty .

    SEMICOLON       reduce using rule 67 (condition2 -> empty .)


state 299

    (39) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    POWER           reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MODULE          reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 39 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 300

    (80) for -> FOR LPAREN ID TO for_end RPAREN body . SEMICOLON

    SEMICOLON       shift and go to state 316


state 301

    (79) while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .

    IF              reduce using rule 79 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 79 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 79 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    DO              reduce using rule 79 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 79 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 79 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 79 (while -> DO body WHILE LPAREN exp RPAREN SEMICOLON .)


state 302

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET . program_function
    (41) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (42) program_function -> . empty
    (3) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 3 (empty -> .)

    program_function               shift and go to state 317
    empty                          shift and go to state 17

state 303

    (52) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 318


state 304

    (49) param2 -> COMMA s_type id_saver add_params . param2
    (49) param2 -> . COMMA s_type id_saver add_params param2
    (50) param2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 202
    RPAREN          reduce using rule 3 (empty -> .)

    param2                         shift and go to state 319
    empty                          shift and go to state 203

state 305

    (98) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 98 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 306

    (101) explor_cte -> COMMA int_const_saver .

    RPAREN          reduce using rule 101 (explor_cte -> COMMA int_const_saver .)


state 307

    (103) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 320
    id_saver                       shift and go to state 87

state 308

    (107) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 321


state 309

    (106) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (111) dr_int -> . COMMA int_const_saver
    (112) dr_int -> . empty
    (3) empty -> .

    COMMA           shift and go to state 322
    RPAREN          reduce using rule 3 (empty -> .)

    dr_int                         shift and go to state 323
    empty                          shift and go to state 324

state 310

    (108) dr_array -> empty .

    COMMA           reduce using rule 108 (dr_array -> empty .)
    RPAREN          reduce using rule 108 (dr_array -> empty .)


state 311

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA . int_const_saver COMMA int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 257

    int_const_saver                shift and go to state 325

state 312

    (113) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 326


state 313

    (65) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON . end_condition
    (69) end_condition -> . empty
    (3) empty -> .

    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)

    end_condition                  shift and go to state 327
    empty                          shift and go to state 328

state 314

    (66) condition2 -> ELSE condition_GOTO . body
    (56) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 115

    body                           shift and go to state 329

state 315

    (68) condition_GOTO -> empty .

    LBRACKET        reduce using rule 68 (condition_GOTO -> empty .)


state 316

    (80) for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .

    IF              reduce using rule 80 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    PRINT           reduce using rule 80 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    FOR             reduce using rule 80 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    DO              reduce using rule 80 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    ID              reduce using rule 80 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RBRACKET        reduce using rule 80 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)
    RETURN          reduce using rule 80 (for -> FOR LPAREN ID TO for_end RPAREN body SEMICOLON .)


state 317

    (41) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .

    MAIN            reduce using rule 41 (program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .)


state 318

    (52) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 52 (return -> RETURN exp SEMICOLON .)


state 319

    (49) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 49 (param2 -> COMMA s_type id_saver add_params param2 .)


state 320

    (103) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 330


state 321

    (107) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 331


state 322

    (111) dr_int -> COMMA . int_const_saver
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 257

    int_const_saver                shift and go to state 332

state 323

    (106) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 333


state 324

    (112) dr_int -> empty .

    RPAREN          reduce using rule 112 (dr_int -> empty .)


state 325

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver . COMMA int_const_saver RPAREN

    COMMA           shift and go to state 334


state 326

    (113) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 113 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 327

    (65) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .

    IF              reduce using rule 65 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    PRINT           reduce using rule 65 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    FOR             reduce using rule 65 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    DO              reduce using rule 65 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    ID              reduce using rule 65 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RBRACKET        reduce using rule 65 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RETURN          reduce using rule 65 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)


state 328

    (69) end_condition -> empty .

    IF              reduce using rule 69 (end_condition -> empty .)
    PRINT           reduce using rule 69 (end_condition -> empty .)
    FOR             reduce using rule 69 (end_condition -> empty .)
    DO              reduce using rule 69 (end_condition -> empty .)
    ID              reduce using rule 69 (end_condition -> empty .)
    RBRACKET        reduce using rule 69 (end_condition -> empty .)
    RETURN          reduce using rule 69 (end_condition -> empty .)


state 329

    (66) condition2 -> ELSE condition_GOTO body .

    SEMICOLON       reduce using rule 66 (condition2 -> ELSE condition_GOTO body .)


state 330

    (103) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (36) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 335
    id_saver                       shift and go to state 87

state 331

    (107) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (109) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (110) dr_array_mp -> . empty
    (3) empty -> .

    COMMA           shift and go to state 336
    RSQBRACKET      reduce using rule 3 (empty -> .)

    dr_array_mp                    shift and go to state 337
    empty                          shift and go to state 338

state 332

    (111) dr_int -> COMMA int_const_saver .

    RPAREN          reduce using rule 111 (dr_int -> COMMA int_const_saver .)


state 333

    (106) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 106 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 334

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA . int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT empty

    CTE_INT         shift and go to state 257

    int_const_saver                shift and go to state 339

state 335

    (103) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 340


state 336

    (109) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 341


state 337

    (107) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 342


state 338

    (110) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 110 (dr_array_mp -> empty .)


state 339

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver . RPAREN

    RPAREN          shift and go to state 343


state 340

    (103) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 103 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 341

    (109) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (109) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (110) dr_array_mp -> . empty
    (3) empty -> .

    COMMA           shift and go to state 336
    RSQBRACKET      reduce using rule 3 (empty -> .)

    dr_array_mp                    shift and go to state 344
    empty                          shift and go to state 338

state 342

    (107) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 107 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 107 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 343

    (105) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .

    SEMICOLON       reduce using rule 105 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .)


state 344

    (109) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 109 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 215 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 292 resolved as shift
