Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end
Rule 2     end -> END empty
Rule 3     empty -> <empty>
Rule 4     id_saver -> ID empty
Rule 5     int_const_saver -> CTE_INT
Rule 6     int_const_saver -> empty
Rule 7     release_exp -> empty
Rule 8     program_libraries -> from_library import_library
Rule 9     program_libraries -> empty
Rule 10    from_library -> FROM ID
Rule 11    from_library -> empty
Rule 12    import_library -> IMPORT ID AS ID program_libraries
Rule 13    var_type -> var_c_type
Rule 14    var_type -> var_s_type
Rule 15    program_vars -> VAR var_type
Rule 16    program_vars -> empty
Rule 17    s_type -> INT
Rule 18    s_type -> FLOAT
Rule 19    s_type -> CHAR
Rule 20    c_type -> DATAFRAME
Rule 21    c_type -> DATE
Rule 22    var_multiple -> var_type
Rule 23    var_multiple -> empty
Rule 24    var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
Rule 25    var_c_type2 -> COMMA id_saver add_c_var var_c_type2
Rule 26    var_c_type2 -> empty
Rule 27    add_c_var -> empty
Rule 28    var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
Rule 29    var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2
Rule 30    var_s_type2 -> empty
Rule 31    add_s_var -> empty
Rule 32    var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
Rule 33    var_s_array -> empty
Rule 34    var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET
Rule 35    var_s_matrix -> empty
Rule 36    var_s_dimesions -> CTE_INT empty
Rule 37    variable -> id_saver variable_array
Rule 38    variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix
Rule 39    variable_array -> empty
Rule 40    variable_matrix -> LSQBRACKET exp RSQBRACKET
Rule 41    variable_matrix -> empty
Rule 42    program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
Rule 43    program_function -> empty
Rule 44    f_type -> INT
Rule 45    f_type -> FLOAT
Rule 46    f_type -> CHAR
Rule 47    f_type -> VOID
Rule 48    func_creator -> empty
Rule 49    param -> s_type id_saver add_params param2
Rule 50    param2 -> COMMA s_type id_saver add_params param2
Rule 51    param2 -> empty
Rule 52    add_params -> empty
Rule 53    return -> RETURN exp SEMICOLON
Rule 54    return -> empty
Rule 55    program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET
Rule 56    main_id -> empty
Rule 57    body -> LBRACKET inner_body RBRACKET
Rule 58    inner_body -> statement inner_body
Rule 59    inner_body -> empty
Rule 60    assign -> variable keep_assign specialf_assign end_assign
Rule 61    specialf_assign -> exp
Rule 62    specialf_assign -> special_function
Rule 63    specialf_assign -> read
Rule 64    keep_assign -> ASSIGN empty
Rule 65    end_assign -> SEMICOLON empty
Rule 66    condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
Rule 67    condition2 -> ELSE condition_GOTO body
Rule 68    condition2 -> empty
Rule 69    condition_GOTOF -> empty
Rule 70    condition_GOTO -> empty
Rule 71    end_condition -> empty
Rule 72    print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
Rule 73    print_type -> exp
Rule 74    print_many -> print_type print_many2
Rule 75    print_many2 -> COMMA print_many_np print_many
Rule 76    print_many2 -> empty
Rule 77    print_many_np -> empty
Rule 78    end_print_np -> empty
Rule 79    read -> READ LPAREN variable RPAREN read_np
Rule 80    read_np -> empty
Rule 81    cycle -> for
Rule 82    cycle -> while
Rule 83    while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
Rule 84    seed -> empty
Rule 85    gotoV -> empty
Rule 86    for -> FOR LPAREN for_np1 for_end body for_np2
Rule 87    for_np1 -> assign TO
Rule 88    for_end -> int_const_saver RPAREN
Rule 89    for_np2 -> SEMICOLON
Rule 90    call_function -> function_saver LPAREN exp exp_many RPAREN
Rule 91    function_saver -> ID empty
Rule 92    exp_many -> COMMA exp exp_many
Rule 93    exp_many -> empty
Rule 94    statement -> assign
Rule 95    statement -> condition
Rule 96    statement -> print
Rule 97    statement -> cycle
Rule 98    statement -> call_function
Rule 99    special_function -> exploration
Rule 100   special_function -> financial_state
Rule 101   special_function -> dummi_regression
Rule 102   special_function -> season_analysis
Rule 103   special_function -> trend_prediction
Rule 104   special_function -> model_predict
Rule 105   exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN
Rule 106   explore_var -> COMMA variable
Rule 107   explore_var -> empty
Rule 108   explor_cte -> COMMA int_const_saver
Rule 109   explor_cte -> empty
Rule 110   financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
Rule 111   season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN
Rule 112   trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
Rule 113   dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
Rule 114   dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
Rule 115   dr_array -> empty
Rule 116   dr_array_mp -> COMMA CTE_CHAR dr_array_mp
Rule 117   dr_array_mp -> empty
Rule 118   dr_int -> COMMA int_const_saver
Rule 119   dr_int -> empty
Rule 120   model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
Rule 121   exp -> t_exp release_exp exp_or
Rule 122   exp_or -> exp_keep_or exp
Rule 123   exp_or -> empty
Rule 124   exp_keep_or -> OR
Rule 125   t_exp -> expression release_exp t_exp_and
Rule 126   t_exp_and -> keep_and t_exp
Rule 127   t_exp_and -> empty
Rule 128   keep_and -> AND
Rule 129   expression -> m_exp release_exp expression_comp
Rule 130   expression_comp -> expression_comp_2 m_exp release_exp
Rule 131   expression_comp -> empty
Rule 132   expression_comp_2 -> GTHAN
Rule 133   expression_comp_2 -> EQUAL
Rule 134   expression_comp_2 -> NOTEQUAL
Rule 135   expression_comp_2 -> LTHAN
Rule 136   expression_comp_2 -> GORE
Rule 137   expression_comp_2 -> LORE
Rule 138   m_exp -> term release_exp m_exp_sr
Rule 139   m_exp_sr -> m_exp_sr_2 m_exp
Rule 140   m_exp_sr -> empty
Rule 141   m_exp_sr_2 -> PLUS
Rule 142   m_exp_sr_2 -> MINUS
Rule 143   term -> sub_factor release_exp term_pc
Rule 144   term_pc -> term_pc_2 term
Rule 145   term_pc -> empty
Rule 146   term_pc_2 -> MULTIPLY
Rule 147   term_pc_2 -> DIVIDE
Rule 148   term_pc_2 -> MODULE
Rule 149   sub_factor -> factor release_exp sub_factor_pc
Rule 150   sub_factor_pc -> sub_factor_pc_2 sub_factor
Rule 151   sub_factor_pc -> empty
Rule 152   sub_factor_pc_2 -> POWER empty
Rule 153   factor -> factor_exp
Rule 154   factor -> factor_cte
Rule 155   factor -> variable
Rule 156   factor -> call_function
Rule 157   factor_exp -> false_button exp release_false_button
Rule 158   false_button -> LPAREN
Rule 159   release_false_button -> RPAREN
Rule 160   factor_cte -> CTE_FLOAT
Rule 161   factor_cte -> CTE_INT
Rule 162   factor_cte -> CTE_CHAR

Terminals, with rules where they appear

AND                  : 128
AS                   : 12
ASSIGN               : 64
CHAR                 : 19 46
COLON                : 
COMMA                : 25 29 50 75 92 106 108 110 110 110 112 112 112 113 114 116 118 120 120
CTE_CHAR             : 114 116 162
CTE_FLOAT            : 160
CTE_INT              : 5 36 161
DATAFRAME            : 20
DATE                 : 21
DIVIDE               : 147
DO                   : 83
DUMMI_REGRESSION     : 113
ELSE                 : 67
END                  : 2
EQUAL                : 133
EXPLORATION          : 105
FINANCIAL_STATE      : 110
FLOAT                : 18 45
FOR                  : 86
FROM                 : 10
FUNCTION             : 42
GORE                 : 136
GTHAN                : 132
ID                   : 1 4 10 12 12 91
IF                   : 66
IMPORT               : 12
INT                  : 17 44
LBRACKET             : 42 55 57
LORE                 : 137
LPAREN               : 42 66 72 79 83 86 90 105 110 111 112 113 120 158
LSQBRACKET           : 32 34 38 40 114
LTHAN                : 135
MAIN                 : 55
MINUS                : 142
MODEL_PREDICT        : 120
MODULE               : 148
MULTIPLY             : 146
NOTEQUAL             : 134
OR                   : 124
PLUS                 : 141
POWER                : 152
PRINT                : 72
PROGRAM              : 1
RBRACKET             : 42 55 57
READ                 : 79
RETURN               : 53
RPAREN               : 42 66 72 79 83 88 90 105 110 111 112 113 120 159
RSQBRACKET           : 32 34 38 40 114
SEASON_ANALYSIS      : 111
SEMICOLON            : 1 24 28 53 65 66 72 83 89
TO                   : 87
TREND_PREDICTION     : 112
VAR                  : 15
VOID                 : 47
WHILE                : 83
error                : 

Nonterminals, with rules where they appear

add_c_var            : 24 25
add_params           : 49 50
add_s_var            : 28 29
assign               : 87 94
body                 : 66 67 83 86
c_type               : 24
call_function        : 98 156
condition            : 95
condition2           : 66
condition_GOTO       : 67
condition_GOTOF      : 66
cycle                : 97
dr_array             : 113
dr_array_mp          : 114 116
dr_int               : 113
dummi_regression     : 101
empty                : 2 4 6 7 9 11 16 23 26 27 30 31 33 35 36 39 41 43 48 51 52 54 56 59 64 65 68 69 70 71 76 77 78 80 84 85 91 93 107 109 115 117 119 123 127 131 140 145 151 152
end                  : 1
end_assign           : 60
end_condition        : 66
end_print_np         : 72
exp                  : 38 40 53 61 66 73 83 90 92 122 157
exp_keep_or          : 122
exp_many             : 90 92
exp_or               : 121
explor_cte           : 105
exploration          : 99
explore_var          : 105
expression           : 125
expression_comp      : 129
expression_comp_2    : 130
f_type               : 42
factor               : 149
factor_cte           : 154
factor_exp           : 153
false_button         : 157
financial_state      : 100
for                  : 81
for_end              : 86
for_np1              : 86
for_np2              : 86
from_library         : 8
func_creator         : 42
function_saver       : 90
gotoV                : 83
id_saver             : 24 25 28 29 37 42 49 50
import_library       : 8
inner_body           : 42 55 57 58
int_const_saver      : 88 108 112 112 112 118
keep_and             : 126
keep_assign          : 60
m_exp                : 129 130 139
m_exp_sr             : 138
m_exp_sr_2           : 139
main_id              : 55
model_predict        : 104
param                : 42
param2               : 49 50
print                : 96
print_many           : 72 75
print_many2          : 74
print_many_np        : 75
print_type           : 74
program              : 0
program_function     : 1 42
program_libraries    : 1 12
program_main         : 1
program_vars         : 1 42 55
read                 : 63
read_np              : 79
release_exp          : 121 125 129 130 138 143 149
release_false_button : 157
return               : 42
s_type               : 28 49 50
season_analysis      : 102
seed                 : 83
special_function     : 62
specialf_assign      : 60
statement            : 58
sub_factor           : 143 150
sub_factor_pc        : 149
sub_factor_pc_2      : 150
t_exp                : 121 126
t_exp_and            : 125
term                 : 138 144
term_pc              : 143
term_pc_2            : 144
trend_prediction     : 103
var_c_type           : 13
var_c_type2          : 24 25
var_multiple         : 24 28
var_s_array          : 28 29
var_s_dimesions      : 32 34
var_s_matrix         : 32
var_s_type           : 14
var_s_type2          : 28 29
var_type             : 15 22
variable             : 60 79 105 106 110 110 110 110 111 112 113 113 120 120 155
variable_array       : 37
variable_matrix      : 38
while                : 82

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_libraries program_vars program_function program_main end

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_libraries program_vars program_function program_main end

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_libraries program_vars program_function program_main end
    (8) program_libraries -> . from_library import_library
    (9) program_libraries -> . empty
    (10) from_library -> . FROM ID
    (11) from_library -> . empty
    (3) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 3 (empty -> .)
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IMPORT          reduce using rule 3 (empty -> .)

    program_libraries              shift and go to state 5
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_libraries . program_vars program_function program_main end
    (15) program_vars -> . VAR var_type
    (16) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 9
    empty                          shift and go to state 11

state 6

    (8) program_libraries -> from_library . import_library
    (12) import_library -> . IMPORT ID AS ID program_libraries

    IMPORT          shift and go to state 13

    import_library                 shift and go to state 12

state 7

    (9) program_libraries -> empty .
    (11) from_library -> empty .

    VAR             reduce using rule 9 (program_libraries -> empty .)
    FUNCTION        reduce using rule 9 (program_libraries -> empty .)
    MAIN            reduce using rule 9 (program_libraries -> empty .)
    IMPORT          reduce using rule 11 (from_library -> empty .)


state 8

    (10) from_library -> FROM . ID

    ID              shift and go to state 14


state 9

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars . program_function program_main end
    (42) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (43) program_function -> . empty
    (3) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 3 (empty -> .)

    program_function               shift and go to state 15
    empty                          shift and go to state 17

state 10

    (15) program_vars -> VAR . var_type
    (13) var_type -> . var_c_type
    (14) var_type -> . var_s_type
    (24) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (28) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (20) c_type -> . DATAFRAME
    (21) c_type -> . DATE
    (17) s_type -> . INT
    (18) s_type -> . FLOAT
    (19) s_type -> . CHAR

    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    var_type                       shift and go to state 18
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21
    s_type                         shift and go to state 22

state 11

    (16) program_vars -> empty .

    FUNCTION        reduce using rule 16 (program_vars -> empty .)
    MAIN            reduce using rule 16 (program_vars -> empty .)
    IF              reduce using rule 16 (program_vars -> empty .)
    PRINT           reduce using rule 16 (program_vars -> empty .)
    FOR             reduce using rule 16 (program_vars -> empty .)
    DO              reduce using rule 16 (program_vars -> empty .)
    ID              reduce using rule 16 (program_vars -> empty .)
    RBRACKET        reduce using rule 16 (program_vars -> empty .)
    RETURN          reduce using rule 16 (program_vars -> empty .)


state 12

    (8) program_libraries -> from_library import_library .

    VAR             reduce using rule 8 (program_libraries -> from_library import_library .)
    FUNCTION        reduce using rule 8 (program_libraries -> from_library import_library .)
    MAIN            reduce using rule 8 (program_libraries -> from_library import_library .)


state 13

    (12) import_library -> IMPORT . ID AS ID program_libraries

    ID              shift and go to state 28


state 14

    (10) from_library -> FROM ID .

    IMPORT          reduce using rule 10 (from_library -> FROM ID .)


state 15

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function . program_main end
    (55) program_main -> . MAIN main_id LBRACKET program_vars inner_body RBRACKET

    MAIN            shift and go to state 30

    program_main                   shift and go to state 29

state 16

    (42) program_function -> FUNCTION . f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (44) f_type -> . INT
    (45) f_type -> . FLOAT
    (46) f_type -> . CHAR
    (47) f_type -> . VOID

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    CHAR            shift and go to state 34
    VOID            shift and go to state 35

    f_type                         shift and go to state 31

state 17

    (43) program_function -> empty .

    MAIN            reduce using rule 43 (program_function -> empty .)


state 18

    (15) program_vars -> VAR var_type .

    FUNCTION        reduce using rule 15 (program_vars -> VAR var_type .)
    MAIN            reduce using rule 15 (program_vars -> VAR var_type .)
    IF              reduce using rule 15 (program_vars -> VAR var_type .)
    PRINT           reduce using rule 15 (program_vars -> VAR var_type .)
    FOR             reduce using rule 15 (program_vars -> VAR var_type .)
    DO              reduce using rule 15 (program_vars -> VAR var_type .)
    ID              reduce using rule 15 (program_vars -> VAR var_type .)
    RBRACKET        reduce using rule 15 (program_vars -> VAR var_type .)
    RETURN          reduce using rule 15 (program_vars -> VAR var_type .)


state 19

    (13) var_type -> var_c_type .

    FUNCTION        reduce using rule 13 (var_type -> var_c_type .)
    MAIN            reduce using rule 13 (var_type -> var_c_type .)
    IF              reduce using rule 13 (var_type -> var_c_type .)
    PRINT           reduce using rule 13 (var_type -> var_c_type .)
    FOR             reduce using rule 13 (var_type -> var_c_type .)
    DO              reduce using rule 13 (var_type -> var_c_type .)
    ID              reduce using rule 13 (var_type -> var_c_type .)
    RBRACKET        reduce using rule 13 (var_type -> var_c_type .)
    RETURN          reduce using rule 13 (var_type -> var_c_type .)


state 20

    (14) var_type -> var_s_type .

    FUNCTION        reduce using rule 14 (var_type -> var_s_type .)
    MAIN            reduce using rule 14 (var_type -> var_s_type .)
    IF              reduce using rule 14 (var_type -> var_s_type .)
    PRINT           reduce using rule 14 (var_type -> var_s_type .)
    FOR             reduce using rule 14 (var_type -> var_s_type .)
    DO              reduce using rule 14 (var_type -> var_s_type .)
    ID              reduce using rule 14 (var_type -> var_s_type .)
    RBRACKET        reduce using rule 14 (var_type -> var_s_type .)
    RETURN          reduce using rule 14 (var_type -> var_s_type .)


state 21

    (24) var_c_type -> c_type . id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 36

state 22

    (28) var_s_type -> s_type . id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 38

state 23

    (20) c_type -> DATAFRAME .

    ID              reduce using rule 20 (c_type -> DATAFRAME .)


state 24

    (21) c_type -> DATE .

    ID              reduce using rule 21 (c_type -> DATE .)


state 25

    (17) s_type -> INT .

    ID              reduce using rule 17 (s_type -> INT .)


state 26

    (18) s_type -> FLOAT .

    ID              reduce using rule 18 (s_type -> FLOAT .)


state 27

    (19) s_type -> CHAR .

    ID              reduce using rule 19 (s_type -> CHAR .)


state 28

    (12) import_library -> IMPORT ID . AS ID program_libraries

    AS              shift and go to state 39


state 29

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main . end
    (2) end -> . END empty

    END             shift and go to state 41

    end                            shift and go to state 40

state 30

    (55) program_main -> MAIN . main_id LBRACKET program_vars inner_body RBRACKET
    (56) main_id -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    main_id                        shift and go to state 42
    empty                          shift and go to state 43

state 31

    (42) program_function -> FUNCTION f_type . id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 44

state 32

    (44) f_type -> INT .

    ID              reduce using rule 44 (f_type -> INT .)


state 33

    (45) f_type -> FLOAT .

    ID              reduce using rule 45 (f_type -> FLOAT .)


state 34

    (46) f_type -> CHAR .

    ID              reduce using rule 46 (f_type -> CHAR .)


state 35

    (47) f_type -> VOID .

    ID              reduce using rule 47 (f_type -> VOID .)


state 36

    (24) var_c_type -> c_type id_saver . add_c_var var_c_type2 SEMICOLON var_multiple
    (27) add_c_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_c_var                      shift and go to state 45
    empty                          shift and go to state 46

state 37

    (4) id_saver -> ID . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    LSQBRACKET      reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    ASSIGN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 47

state 38

    (28) var_s_type -> s_type id_saver . var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (32) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (33) var_s_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 49
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_array                    shift and go to state 48
    empty                          shift and go to state 50

state 39

    (12) import_library -> IMPORT ID AS . ID program_libraries

    ID              shift and go to state 51


state 40

    (1) program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_libraries program_vars program_function program_main end .)


state 41

    (2) end -> END . empty
    (3) empty -> .

    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 52

state 42

    (55) program_main -> MAIN main_id . LBRACKET program_vars inner_body RBRACKET

    LBRACKET        shift and go to state 53


state 43

    (56) main_id -> empty .

    LBRACKET        reduce using rule 56 (main_id -> empty .)


state 44

    (42) program_function -> FUNCTION f_type id_saver . func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (48) func_creator -> . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)

    func_creator                   shift and go to state 54
    empty                          shift and go to state 55

state 45

    (24) var_c_type -> c_type id_saver add_c_var . var_c_type2 SEMICOLON var_multiple
    (25) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (26) var_c_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_c_type2                    shift and go to state 56
    empty                          shift and go to state 58

state 46

    (27) add_c_var -> empty .

    COMMA           reduce using rule 27 (add_c_var -> empty .)
    SEMICOLON       reduce using rule 27 (add_c_var -> empty .)


state 47

    (4) id_saver -> ID empty .

    COMMA           reduce using rule 4 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 4 (id_saver -> ID empty .)
    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    LPAREN          reduce using rule 4 (id_saver -> ID empty .)
    RPAREN          reduce using rule 4 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 4 (id_saver -> ID empty .)


state 48

    (28) var_s_type -> s_type id_saver var_s_array . add_s_var var_s_type2 SEMICOLON var_multiple
    (31) add_s_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_s_var                      shift and go to state 59
    empty                          shift and go to state 60

state 49

    (32) var_s_array -> LSQBRACKET . var_s_dimesions RSQBRACKET var_s_matrix
    (36) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 62

    var_s_dimesions                shift and go to state 61

state 50

    (33) var_s_array -> empty .

    COMMA           reduce using rule 33 (var_s_array -> empty .)
    SEMICOLON       reduce using rule 33 (var_s_array -> empty .)


state 51

    (12) import_library -> IMPORT ID AS ID . program_libraries
    (8) program_libraries -> . from_library import_library
    (9) program_libraries -> . empty
    (10) from_library -> . FROM ID
    (11) from_library -> . empty
    (3) empty -> .

    FROM            shift and go to state 8
    VAR             reduce using rule 3 (empty -> .)
    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IMPORT          reduce using rule 3 (empty -> .)

    program_libraries              shift and go to state 63
    from_library                   shift and go to state 6
    empty                          shift and go to state 7

state 52

    (2) end -> END empty .

    $end            reduce using rule 2 (end -> END empty .)


state 53

    (55) program_main -> MAIN main_id LBRACKET . program_vars inner_body RBRACKET
    (15) program_vars -> . VAR var_type
    (16) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 64
    empty                          shift and go to state 11

state 54

    (42) program_function -> FUNCTION f_type id_saver func_creator . LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    LPAREN          shift and go to state 65


state 55

    (48) func_creator -> empty .

    LPAREN          reduce using rule 48 (func_creator -> empty .)


state 56

    (24) var_c_type -> c_type id_saver add_c_var var_c_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 66


state 57

    (25) var_c_type2 -> COMMA . id_saver add_c_var var_c_type2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 67

state 58

    (26) var_c_type2 -> empty .

    SEMICOLON       reduce using rule 26 (var_c_type2 -> empty .)


state 59

    (28) var_s_type -> s_type id_saver var_s_array add_s_var . var_s_type2 SEMICOLON var_multiple
    (29) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (30) var_s_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_type2                    shift and go to state 68
    empty                          shift and go to state 70

state 60

    (31) add_s_var -> empty .

    COMMA           reduce using rule 31 (add_s_var -> empty .)
    SEMICOLON       reduce using rule 31 (add_s_var -> empty .)


state 61

    (32) var_s_array -> LSQBRACKET var_s_dimesions . RSQBRACKET var_s_matrix

    RSQBRACKET      shift and go to state 71


state 62

    (36) var_s_dimesions -> CTE_INT . empty
    (3) empty -> .

    RSQBRACKET      reduce using rule 3 (empty -> .)

    empty                          shift and go to state 72

state 63

    (12) import_library -> IMPORT ID AS ID program_libraries .

    VAR             reduce using rule 12 (import_library -> IMPORT ID AS ID program_libraries .)
    FUNCTION        reduce using rule 12 (import_library -> IMPORT ID AS ID program_libraries .)
    MAIN            reduce using rule 12 (import_library -> IMPORT ID AS ID program_libraries .)


state 64

    (55) program_main -> MAIN main_id LBRACKET program_vars . inner_body RBRACKET
    (58) inner_body -> . statement inner_body
    (59) inner_body -> . empty
    (94) statement -> . assign
    (95) statement -> . condition
    (96) statement -> . print
    (97) statement -> . cycle
    (98) statement -> . call_function
    (3) empty -> .
    (60) assign -> . variable keep_assign specialf_assign end_assign
    (66) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (72) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (81) cycle -> . for
    (82) cycle -> . while
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (37) variable -> . id_saver variable_array
    (86) for -> . FOR LPAREN for_np1 for_end body for_np2
    (83) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (91) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 89
    ID              shift and go to state 90

    inner_body                     shift and go to state 73
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 65

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN . param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (49) param -> . s_type id_saver add_params param2
    (17) s_type -> . INT
    (18) s_type -> . FLOAT
    (19) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    param                          shift and go to state 91
    s_type                         shift and go to state 92

state 66

    (24) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON . var_multiple
    (22) var_multiple -> . var_type
    (23) var_multiple -> . empty
    (13) var_type -> . var_c_type
    (14) var_type -> . var_s_type
    (3) empty -> .
    (24) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (28) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (20) c_type -> . DATAFRAME
    (21) c_type -> . DATE
    (17) s_type -> . INT
    (18) s_type -> . FLOAT
    (19) s_type -> . CHAR

    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    c_type                         shift and go to state 21
    var_multiple                   shift and go to state 93
    var_type                       shift and go to state 94
    empty                          shift and go to state 95
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    s_type                         shift and go to state 22

state 67

    (25) var_c_type2 -> COMMA id_saver . add_c_var var_c_type2
    (27) add_c_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_c_var                      shift and go to state 96
    empty                          shift and go to state 46

state 68

    (28) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 . SEMICOLON var_multiple

    SEMICOLON       shift and go to state 97


state 69

    (29) var_s_type2 -> COMMA . id_saver var_s_array add_s_var var_s_type2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 98

state 70

    (30) var_s_type2 -> empty .

    SEMICOLON       reduce using rule 30 (var_s_type2 -> empty .)


state 71

    (32) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET . var_s_matrix
    (34) var_s_matrix -> . LSQBRACKET var_s_dimesions RSQBRACKET
    (35) var_s_matrix -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 99
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_matrix                   shift and go to state 100
    empty                          shift and go to state 101

state 72

    (36) var_s_dimesions -> CTE_INT empty .

    RSQBRACKET      reduce using rule 36 (var_s_dimesions -> CTE_INT empty .)


state 73

    (55) program_main -> MAIN main_id LBRACKET program_vars inner_body . RBRACKET

    RBRACKET        shift and go to state 102


state 74

    (58) inner_body -> statement . inner_body
    (58) inner_body -> . statement inner_body
    (59) inner_body -> . empty
    (94) statement -> . assign
    (95) statement -> . condition
    (96) statement -> . print
    (97) statement -> . cycle
    (98) statement -> . call_function
    (3) empty -> .
    (60) assign -> . variable keep_assign specialf_assign end_assign
    (66) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (72) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (81) cycle -> . for
    (82) cycle -> . while
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (37) variable -> . id_saver variable_array
    (86) for -> . FOR LPAREN for_np1 for_end body for_np2
    (83) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (91) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 89
    ID              shift and go to state 90

    statement                      shift and go to state 74
    inner_body                     shift and go to state 103
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 75

    (59) inner_body -> empty .

    RBRACKET        reduce using rule 59 (inner_body -> empty .)
    RETURN          reduce using rule 59 (inner_body -> empty .)


state 76

    (94) statement -> assign .

    IF              reduce using rule 94 (statement -> assign .)
    PRINT           reduce using rule 94 (statement -> assign .)
    FOR             reduce using rule 94 (statement -> assign .)
    DO              reduce using rule 94 (statement -> assign .)
    ID              reduce using rule 94 (statement -> assign .)
    RBRACKET        reduce using rule 94 (statement -> assign .)
    RETURN          reduce using rule 94 (statement -> assign .)


state 77

    (95) statement -> condition .

    IF              reduce using rule 95 (statement -> condition .)
    PRINT           reduce using rule 95 (statement -> condition .)
    FOR             reduce using rule 95 (statement -> condition .)
    DO              reduce using rule 95 (statement -> condition .)
    ID              reduce using rule 95 (statement -> condition .)
    RBRACKET        reduce using rule 95 (statement -> condition .)
    RETURN          reduce using rule 95 (statement -> condition .)


state 78

    (96) statement -> print .

    IF              reduce using rule 96 (statement -> print .)
    PRINT           reduce using rule 96 (statement -> print .)
    FOR             reduce using rule 96 (statement -> print .)
    DO              reduce using rule 96 (statement -> print .)
    ID              reduce using rule 96 (statement -> print .)
    RBRACKET        reduce using rule 96 (statement -> print .)
    RETURN          reduce using rule 96 (statement -> print .)


state 79

    (97) statement -> cycle .

    IF              reduce using rule 97 (statement -> cycle .)
    PRINT           reduce using rule 97 (statement -> cycle .)
    FOR             reduce using rule 97 (statement -> cycle .)
    DO              reduce using rule 97 (statement -> cycle .)
    ID              reduce using rule 97 (statement -> cycle .)
    RBRACKET        reduce using rule 97 (statement -> cycle .)
    RETURN          reduce using rule 97 (statement -> cycle .)


state 80

    (98) statement -> call_function .

    IF              reduce using rule 98 (statement -> call_function .)
    PRINT           reduce using rule 98 (statement -> call_function .)
    FOR             reduce using rule 98 (statement -> call_function .)
    DO              reduce using rule 98 (statement -> call_function .)
    ID              reduce using rule 98 (statement -> call_function .)
    RBRACKET        reduce using rule 98 (statement -> call_function .)
    RETURN          reduce using rule 98 (statement -> call_function .)


state 81

    (60) assign -> variable . keep_assign specialf_assign end_assign
    (64) keep_assign -> . ASSIGN empty

    ASSIGN          shift and go to state 105

    keep_assign                    shift and go to state 104

state 82

    (66) condition -> IF . LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    LPAREN          shift and go to state 106


state 83

    (72) print -> PRINT . LPAREN print_many RPAREN SEMICOLON end_print_np

    LPAREN          shift and go to state 107


state 84

    (81) cycle -> for .

    IF              reduce using rule 81 (cycle -> for .)
    PRINT           reduce using rule 81 (cycle -> for .)
    FOR             reduce using rule 81 (cycle -> for .)
    DO              reduce using rule 81 (cycle -> for .)
    ID              reduce using rule 81 (cycle -> for .)
    RBRACKET        reduce using rule 81 (cycle -> for .)
    RETURN          reduce using rule 81 (cycle -> for .)


state 85

    (82) cycle -> while .

    IF              reduce using rule 82 (cycle -> while .)
    PRINT           reduce using rule 82 (cycle -> while .)
    FOR             reduce using rule 82 (cycle -> while .)
    DO              reduce using rule 82 (cycle -> while .)
    ID              reduce using rule 82 (cycle -> while .)
    RBRACKET        reduce using rule 82 (cycle -> while .)
    RETURN          reduce using rule 82 (cycle -> while .)


state 86

    (90) call_function -> function_saver . LPAREN exp exp_many RPAREN

    LPAREN          shift and go to state 108


state 87

    (37) variable -> id_saver . variable_array
    (38) variable_array -> . LSQBRACKET exp RSQBRACKET variable_matrix
    (39) variable_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 110
    ASSIGN          reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    variable_array                 shift and go to state 109
    empty                          shift and go to state 111

state 88

    (86) for -> FOR . LPAREN for_np1 for_end body for_np2

    LPAREN          shift and go to state 112


state 89

    (83) while -> DO . seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (84) seed -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    seed                           shift and go to state 113
    empty                          shift and go to state 114

state 90

    (91) function_saver -> ID . empty
    (4) id_saver -> ID . empty
    (3) empty -> .

    LPAREN          reduce using rule 3 (empty -> .)
    LSQBRACKET      reduce using rule 3 (empty -> .)
    ASSIGN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 115

state 91

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param . RPAREN LBRACKET program_vars inner_body return RBRACKET program_function

    RPAREN          shift and go to state 116


state 92

    (49) param -> s_type . id_saver add_params param2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 117

state 93

    (24) var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 24 (var_c_type -> c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple .)


state 94

    (22) var_multiple -> var_type .

    FUNCTION        reduce using rule 22 (var_multiple -> var_type .)
    MAIN            reduce using rule 22 (var_multiple -> var_type .)
    IF              reduce using rule 22 (var_multiple -> var_type .)
    PRINT           reduce using rule 22 (var_multiple -> var_type .)
    FOR             reduce using rule 22 (var_multiple -> var_type .)
    DO              reduce using rule 22 (var_multiple -> var_type .)
    ID              reduce using rule 22 (var_multiple -> var_type .)
    RBRACKET        reduce using rule 22 (var_multiple -> var_type .)
    RETURN          reduce using rule 22 (var_multiple -> var_type .)


state 95

    (23) var_multiple -> empty .

    FUNCTION        reduce using rule 23 (var_multiple -> empty .)
    MAIN            reduce using rule 23 (var_multiple -> empty .)
    IF              reduce using rule 23 (var_multiple -> empty .)
    PRINT           reduce using rule 23 (var_multiple -> empty .)
    FOR             reduce using rule 23 (var_multiple -> empty .)
    DO              reduce using rule 23 (var_multiple -> empty .)
    ID              reduce using rule 23 (var_multiple -> empty .)
    RBRACKET        reduce using rule 23 (var_multiple -> empty .)
    RETURN          reduce using rule 23 (var_multiple -> empty .)


state 96

    (25) var_c_type2 -> COMMA id_saver add_c_var . var_c_type2
    (25) var_c_type2 -> . COMMA id_saver add_c_var var_c_type2
    (26) var_c_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_c_type2                    shift and go to state 118
    empty                          shift and go to state 58

state 97

    (28) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON . var_multiple
    (22) var_multiple -> . var_type
    (23) var_multiple -> . empty
    (13) var_type -> . var_c_type
    (14) var_type -> . var_s_type
    (3) empty -> .
    (24) var_c_type -> . c_type id_saver add_c_var var_c_type2 SEMICOLON var_multiple
    (28) var_s_type -> . s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple
    (20) c_type -> . DATAFRAME
    (21) c_type -> . DATE
    (17) s_type -> . INT
    (18) s_type -> . FLOAT
    (19) s_type -> . CHAR

    FUNCTION        reduce using rule 3 (empty -> .)
    MAIN            reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    DATAFRAME       shift and go to state 23
    DATE            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 22
    var_multiple                   shift and go to state 119
    var_type                       shift and go to state 94
    empty                          shift and go to state 95
    var_c_type                     shift and go to state 19
    var_s_type                     shift and go to state 20
    c_type                         shift and go to state 21

state 98

    (29) var_s_type2 -> COMMA id_saver . var_s_array add_s_var var_s_type2
    (32) var_s_array -> . LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix
    (33) var_s_array -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 49
    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_array                    shift and go to state 120
    empty                          shift and go to state 50

state 99

    (34) var_s_matrix -> LSQBRACKET . var_s_dimesions RSQBRACKET
    (36) var_s_dimesions -> . CTE_INT empty

    CTE_INT         shift and go to state 62

    var_s_dimesions                shift and go to state 121

state 100

    (32) var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .

    COMMA           reduce using rule 32 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)
    SEMICOLON       reduce using rule 32 (var_s_array -> LSQBRACKET var_s_dimesions RSQBRACKET var_s_matrix .)


state 101

    (35) var_s_matrix -> empty .

    COMMA           reduce using rule 35 (var_s_matrix -> empty .)
    SEMICOLON       reduce using rule 35 (var_s_matrix -> empty .)


state 102

    (55) program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .

    END             reduce using rule 55 (program_main -> MAIN main_id LBRACKET program_vars inner_body RBRACKET .)


state 103

    (58) inner_body -> statement inner_body .

    RBRACKET        reduce using rule 58 (inner_body -> statement inner_body .)
    RETURN          reduce using rule 58 (inner_body -> statement inner_body .)


state 104

    (60) assign -> variable keep_assign . specialf_assign end_assign
    (61) specialf_assign -> . exp
    (62) specialf_assign -> . special_function
    (63) specialf_assign -> . read
    (121) exp -> . t_exp release_exp exp_or
    (99) special_function -> . exploration
    (100) special_function -> . financial_state
    (101) special_function -> . dummi_regression
    (102) special_function -> . season_analysis
    (103) special_function -> . trend_prediction
    (104) special_function -> . model_predict
    (79) read -> . READ LPAREN variable RPAREN read_np
    (125) t_exp -> . expression release_exp t_exp_and
    (105) exploration -> . EXPLORATION LPAREN variable explore_var explor_cte RPAREN
    (110) financial_state -> . FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN
    (113) dummi_regression -> . DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN
    (111) season_analysis -> . SEASON_ANALYSIS LPAREN variable RPAREN
    (112) trend_prediction -> . TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (120) model_predict -> . MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    READ            shift and go to state 134
    EXPLORATION     shift and go to state 137
    FINANCIAL_STATE shift and go to state 138
    DUMMI_REGRESSION shift and go to state 139
    SEASON_ANALYSIS shift and go to state 140
    TREND_PREDICTION shift and go to state 141
    MODEL_PREDICT   shift and go to state 142
    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    variable                       shift and go to state 122
    specialf_assign                shift and go to state 123
    exp                            shift and go to state 124
    special_function               shift and go to state 125
    read                           shift and go to state 126
    t_exp                          shift and go to state 127
    exploration                    shift and go to state 128
    financial_state                shift and go to state 129
    dummi_regression               shift and go to state 130
    season_analysis                shift and go to state 131
    trend_prediction               shift and go to state 132
    model_predict                  shift and go to state 133
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 105

    (64) keep_assign -> ASSIGN . empty
    (3) empty -> .

    READ            reduce using rule 3 (empty -> .)
    EXPLORATION     reduce using rule 3 (empty -> .)
    FINANCIAL_STATE reduce using rule 3 (empty -> .)
    DUMMI_REGRESSION reduce using rule 3 (empty -> .)
    SEASON_ANALYSIS reduce using rule 3 (empty -> .)
    TREND_PREDICTION reduce using rule 3 (empty -> .)
    MODEL_PREDICT   reduce using rule 3 (empty -> .)
    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    empty                          shift and go to state 155

state 106

    (66) condition -> IF LPAREN . exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 156
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 107

    (72) print -> PRINT LPAREN . print_many RPAREN SEMICOLON end_print_np
    (74) print_many -> . print_type print_many2
    (73) print_type -> . exp
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    print_many                     shift and go to state 157
    print_type                     shift and go to state 158
    exp                            shift and go to state 159
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 108

    (90) call_function -> function_saver LPAREN . exp exp_many RPAREN
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    function_saver                 shift and go to state 86
    exp                            shift and go to state 160
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87

state 109

    (37) variable -> id_saver variable_array .

    ASSIGN          reduce using rule 37 (variable -> id_saver variable_array .)
    POWER           reduce using rule 37 (variable -> id_saver variable_array .)
    MULTIPLY        reduce using rule 37 (variable -> id_saver variable_array .)
    DIVIDE          reduce using rule 37 (variable -> id_saver variable_array .)
    MODULE          reduce using rule 37 (variable -> id_saver variable_array .)
    PLUS            reduce using rule 37 (variable -> id_saver variable_array .)
    MINUS           reduce using rule 37 (variable -> id_saver variable_array .)
    GTHAN           reduce using rule 37 (variable -> id_saver variable_array .)
    EQUAL           reduce using rule 37 (variable -> id_saver variable_array .)
    NOTEQUAL        reduce using rule 37 (variable -> id_saver variable_array .)
    LTHAN           reduce using rule 37 (variable -> id_saver variable_array .)
    GORE            reduce using rule 37 (variable -> id_saver variable_array .)
    LORE            reduce using rule 37 (variable -> id_saver variable_array .)
    AND             reduce using rule 37 (variable -> id_saver variable_array .)
    OR              reduce using rule 37 (variable -> id_saver variable_array .)
    SEMICOLON       reduce using rule 37 (variable -> id_saver variable_array .)
    RPAREN          reduce using rule 37 (variable -> id_saver variable_array .)
    COMMA           reduce using rule 37 (variable -> id_saver variable_array .)
    RSQBRACKET      reduce using rule 37 (variable -> id_saver variable_array .)


state 110

    (38) variable_array -> LSQBRACKET . exp RSQBRACKET variable_matrix
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 161
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 111

    (39) variable_array -> empty .

    ASSIGN          reduce using rule 39 (variable_array -> empty .)
    POWER           reduce using rule 39 (variable_array -> empty .)
    MULTIPLY        reduce using rule 39 (variable_array -> empty .)
    DIVIDE          reduce using rule 39 (variable_array -> empty .)
    MODULE          reduce using rule 39 (variable_array -> empty .)
    PLUS            reduce using rule 39 (variable_array -> empty .)
    MINUS           reduce using rule 39 (variable_array -> empty .)
    GTHAN           reduce using rule 39 (variable_array -> empty .)
    EQUAL           reduce using rule 39 (variable_array -> empty .)
    NOTEQUAL        reduce using rule 39 (variable_array -> empty .)
    LTHAN           reduce using rule 39 (variable_array -> empty .)
    GORE            reduce using rule 39 (variable_array -> empty .)
    LORE            reduce using rule 39 (variable_array -> empty .)
    AND             reduce using rule 39 (variable_array -> empty .)
    OR              reduce using rule 39 (variable_array -> empty .)
    SEMICOLON       reduce using rule 39 (variable_array -> empty .)
    RPAREN          reduce using rule 39 (variable_array -> empty .)
    COMMA           reduce using rule 39 (variable_array -> empty .)
    RSQBRACKET      reduce using rule 39 (variable_array -> empty .)


state 112

    (86) for -> FOR LPAREN . for_np1 for_end body for_np2
    (87) for_np1 -> . assign TO
    (60) assign -> . variable keep_assign specialf_assign end_assign
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    for_np1                        shift and go to state 162
    assign                         shift and go to state 163
    variable                       shift and go to state 81
    id_saver                       shift and go to state 87

state 113

    (83) while -> DO seed . body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (57) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 164

state 114

    (84) seed -> empty .

    LBRACKET        reduce using rule 84 (seed -> empty .)


state 115

    (91) function_saver -> ID empty .
    (4) id_saver -> ID empty .

    LPAREN          reduce using rule 91 (function_saver -> ID empty .)
    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    ASSIGN          reduce using rule 4 (id_saver -> ID empty .)


state 116

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN . LBRACKET program_vars inner_body return RBRACKET program_function

    LBRACKET        shift and go to state 166


state 117

    (49) param -> s_type id_saver . add_params param2
    (52) add_params -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    add_params                     shift and go to state 167
    empty                          shift and go to state 168

state 118

    (25) var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .

    SEMICOLON       reduce using rule 25 (var_c_type2 -> COMMA id_saver add_c_var var_c_type2 .)


state 119

    (28) var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .

    FUNCTION        reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    MAIN            reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    IF              reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    PRINT           reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    FOR             reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    DO              reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    ID              reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RBRACKET        reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)
    RETURN          reduce using rule 28 (var_s_type -> s_type id_saver var_s_array add_s_var var_s_type2 SEMICOLON var_multiple .)


state 120

    (29) var_s_type2 -> COMMA id_saver var_s_array . add_s_var var_s_type2
    (31) add_s_var -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

    add_s_var                      shift and go to state 169
    empty                          shift and go to state 60

state 121

    (34) var_s_matrix -> LSQBRACKET var_s_dimesions . RSQBRACKET

    RSQBRACKET      shift and go to state 170


state 122

    (155) factor -> variable .

    POWER           reduce using rule 155 (factor -> variable .)
    MULTIPLY        reduce using rule 155 (factor -> variable .)
    DIVIDE          reduce using rule 155 (factor -> variable .)
    MODULE          reduce using rule 155 (factor -> variable .)
    PLUS            reduce using rule 155 (factor -> variable .)
    MINUS           reduce using rule 155 (factor -> variable .)
    GTHAN           reduce using rule 155 (factor -> variable .)
    EQUAL           reduce using rule 155 (factor -> variable .)
    NOTEQUAL        reduce using rule 155 (factor -> variable .)
    LTHAN           reduce using rule 155 (factor -> variable .)
    GORE            reduce using rule 155 (factor -> variable .)
    LORE            reduce using rule 155 (factor -> variable .)
    AND             reduce using rule 155 (factor -> variable .)
    OR              reduce using rule 155 (factor -> variable .)
    SEMICOLON       reduce using rule 155 (factor -> variable .)
    RPAREN          reduce using rule 155 (factor -> variable .)
    COMMA           reduce using rule 155 (factor -> variable .)
    RSQBRACKET      reduce using rule 155 (factor -> variable .)


state 123

    (60) assign -> variable keep_assign specialf_assign . end_assign
    (65) end_assign -> . SEMICOLON empty

    SEMICOLON       shift and go to state 172

    end_assign                     shift and go to state 171

state 124

    (61) specialf_assign -> exp .

    SEMICOLON       reduce using rule 61 (specialf_assign -> exp .)


state 125

    (62) specialf_assign -> special_function .

    SEMICOLON       reduce using rule 62 (specialf_assign -> special_function .)


state 126

    (63) specialf_assign -> read .

    SEMICOLON       reduce using rule 63 (specialf_assign -> read .)


state 127

    (121) exp -> t_exp . release_exp exp_or
    (7) release_exp -> . empty
    (3) empty -> .

    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 173
    empty                          shift and go to state 174

state 128

    (99) special_function -> exploration .

    SEMICOLON       reduce using rule 99 (special_function -> exploration .)


state 129

    (100) special_function -> financial_state .

    SEMICOLON       reduce using rule 100 (special_function -> financial_state .)


state 130

    (101) special_function -> dummi_regression .

    SEMICOLON       reduce using rule 101 (special_function -> dummi_regression .)


state 131

    (102) special_function -> season_analysis .

    SEMICOLON       reduce using rule 102 (special_function -> season_analysis .)


state 132

    (103) special_function -> trend_prediction .

    SEMICOLON       reduce using rule 103 (special_function -> trend_prediction .)


state 133

    (104) special_function -> model_predict .

    SEMICOLON       reduce using rule 104 (special_function -> model_predict .)


state 134

    (79) read -> READ . LPAREN variable RPAREN read_np

    LPAREN          shift and go to state 175


state 135

    (158) false_button -> LPAREN .

    CTE_FLOAT       reduce using rule 158 (false_button -> LPAREN .)
    CTE_INT         reduce using rule 158 (false_button -> LPAREN .)
    CTE_CHAR        reduce using rule 158 (false_button -> LPAREN .)
    LPAREN          reduce using rule 158 (false_button -> LPAREN .)
    ID              reduce using rule 158 (false_button -> LPAREN .)


state 136

    (125) t_exp -> expression . release_exp t_exp_and
    (7) release_exp -> . empty
    (3) empty -> .

    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 176
    empty                          shift and go to state 174

state 137

    (105) exploration -> EXPLORATION . LPAREN variable explore_var explor_cte RPAREN

    LPAREN          shift and go to state 177


state 138

    (110) financial_state -> FINANCIAL_STATE . LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN

    LPAREN          shift and go to state 178


state 139

    (113) dummi_regression -> DUMMI_REGRESSION . LPAREN variable COMMA variable dr_array dr_int RPAREN

    LPAREN          shift and go to state 179


state 140

    (111) season_analysis -> SEASON_ANALYSIS . LPAREN variable RPAREN

    LPAREN          shift and go to state 180


state 141

    (112) trend_prediction -> TREND_PREDICTION . LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    LPAREN          shift and go to state 181


state 142

    (120) model_predict -> MODEL_PREDICT . LPAREN variable COMMA variable COMMA RPAREN

    LPAREN          shift and go to state 182


state 143

    (129) expression -> m_exp . release_exp expression_comp
    (7) release_exp -> . empty
    (3) empty -> .

    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 183
    empty                          shift and go to state 174

state 144

    (138) m_exp -> term . release_exp m_exp_sr
    (7) release_exp -> . empty
    (3) empty -> .

    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 184
    empty                          shift and go to state 174

state 145

    (143) term -> sub_factor . release_exp term_pc
    (7) release_exp -> . empty
    (3) empty -> .

    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 185
    empty                          shift and go to state 174

state 146

    (149) sub_factor -> factor . release_exp sub_factor_pc
    (7) release_exp -> . empty
    (3) empty -> .

    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 186
    empty                          shift and go to state 174

state 147

    (153) factor -> factor_exp .

    POWER           reduce using rule 153 (factor -> factor_exp .)
    MULTIPLY        reduce using rule 153 (factor -> factor_exp .)
    DIVIDE          reduce using rule 153 (factor -> factor_exp .)
    MODULE          reduce using rule 153 (factor -> factor_exp .)
    PLUS            reduce using rule 153 (factor -> factor_exp .)
    MINUS           reduce using rule 153 (factor -> factor_exp .)
    GTHAN           reduce using rule 153 (factor -> factor_exp .)
    EQUAL           reduce using rule 153 (factor -> factor_exp .)
    NOTEQUAL        reduce using rule 153 (factor -> factor_exp .)
    LTHAN           reduce using rule 153 (factor -> factor_exp .)
    GORE            reduce using rule 153 (factor -> factor_exp .)
    LORE            reduce using rule 153 (factor -> factor_exp .)
    AND             reduce using rule 153 (factor -> factor_exp .)
    OR              reduce using rule 153 (factor -> factor_exp .)
    SEMICOLON       reduce using rule 153 (factor -> factor_exp .)
    RPAREN          reduce using rule 153 (factor -> factor_exp .)
    COMMA           reduce using rule 153 (factor -> factor_exp .)
    RSQBRACKET      reduce using rule 153 (factor -> factor_exp .)


state 148

    (154) factor -> factor_cte .

    POWER           reduce using rule 154 (factor -> factor_cte .)
    MULTIPLY        reduce using rule 154 (factor -> factor_cte .)
    DIVIDE          reduce using rule 154 (factor -> factor_cte .)
    MODULE          reduce using rule 154 (factor -> factor_cte .)
    PLUS            reduce using rule 154 (factor -> factor_cte .)
    MINUS           reduce using rule 154 (factor -> factor_cte .)
    GTHAN           reduce using rule 154 (factor -> factor_cte .)
    EQUAL           reduce using rule 154 (factor -> factor_cte .)
    NOTEQUAL        reduce using rule 154 (factor -> factor_cte .)
    LTHAN           reduce using rule 154 (factor -> factor_cte .)
    GORE            reduce using rule 154 (factor -> factor_cte .)
    LORE            reduce using rule 154 (factor -> factor_cte .)
    AND             reduce using rule 154 (factor -> factor_cte .)
    OR              reduce using rule 154 (factor -> factor_cte .)
    SEMICOLON       reduce using rule 154 (factor -> factor_cte .)
    RPAREN          reduce using rule 154 (factor -> factor_cte .)
    COMMA           reduce using rule 154 (factor -> factor_cte .)
    RSQBRACKET      reduce using rule 154 (factor -> factor_cte .)


state 149

    (156) factor -> call_function .

    POWER           reduce using rule 156 (factor -> call_function .)
    MULTIPLY        reduce using rule 156 (factor -> call_function .)
    DIVIDE          reduce using rule 156 (factor -> call_function .)
    MODULE          reduce using rule 156 (factor -> call_function .)
    PLUS            reduce using rule 156 (factor -> call_function .)
    MINUS           reduce using rule 156 (factor -> call_function .)
    GTHAN           reduce using rule 156 (factor -> call_function .)
    EQUAL           reduce using rule 156 (factor -> call_function .)
    NOTEQUAL        reduce using rule 156 (factor -> call_function .)
    LTHAN           reduce using rule 156 (factor -> call_function .)
    GORE            reduce using rule 156 (factor -> call_function .)
    LORE            reduce using rule 156 (factor -> call_function .)
    AND             reduce using rule 156 (factor -> call_function .)
    OR              reduce using rule 156 (factor -> call_function .)
    SEMICOLON       reduce using rule 156 (factor -> call_function .)
    RPAREN          reduce using rule 156 (factor -> call_function .)
    COMMA           reduce using rule 156 (factor -> call_function .)
    RSQBRACKET      reduce using rule 156 (factor -> call_function .)


state 150

    (157) factor_exp -> false_button . exp release_false_button
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    false_button                   shift and go to state 150
    exp                            shift and go to state 187
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 151

    (160) factor_cte -> CTE_FLOAT .

    POWER           reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    MODULE          reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    GTHAN           reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    LTHAN           reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    GORE            reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    LORE            reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    AND             reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    OR              reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 160 (factor_cte -> CTE_FLOAT .)
    RSQBRACKET      reduce using rule 160 (factor_cte -> CTE_FLOAT .)


state 152

    (161) factor_cte -> CTE_INT .

    POWER           reduce using rule 161 (factor_cte -> CTE_INT .)
    MULTIPLY        reduce using rule 161 (factor_cte -> CTE_INT .)
    DIVIDE          reduce using rule 161 (factor_cte -> CTE_INT .)
    MODULE          reduce using rule 161 (factor_cte -> CTE_INT .)
    PLUS            reduce using rule 161 (factor_cte -> CTE_INT .)
    MINUS           reduce using rule 161 (factor_cte -> CTE_INT .)
    GTHAN           reduce using rule 161 (factor_cte -> CTE_INT .)
    EQUAL           reduce using rule 161 (factor_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 161 (factor_cte -> CTE_INT .)
    LTHAN           reduce using rule 161 (factor_cte -> CTE_INT .)
    GORE            reduce using rule 161 (factor_cte -> CTE_INT .)
    LORE            reduce using rule 161 (factor_cte -> CTE_INT .)
    AND             reduce using rule 161 (factor_cte -> CTE_INT .)
    OR              reduce using rule 161 (factor_cte -> CTE_INT .)
    SEMICOLON       reduce using rule 161 (factor_cte -> CTE_INT .)
    RPAREN          reduce using rule 161 (factor_cte -> CTE_INT .)
    COMMA           reduce using rule 161 (factor_cte -> CTE_INT .)
    RSQBRACKET      reduce using rule 161 (factor_cte -> CTE_INT .)


state 153

    (162) factor_cte -> CTE_CHAR .

    POWER           reduce using rule 162 (factor_cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 162 (factor_cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 162 (factor_cte -> CTE_CHAR .)
    MODULE          reduce using rule 162 (factor_cte -> CTE_CHAR .)
    PLUS            reduce using rule 162 (factor_cte -> CTE_CHAR .)
    MINUS           reduce using rule 162 (factor_cte -> CTE_CHAR .)
    GTHAN           reduce using rule 162 (factor_cte -> CTE_CHAR .)
    EQUAL           reduce using rule 162 (factor_cte -> CTE_CHAR .)
    NOTEQUAL        reduce using rule 162 (factor_cte -> CTE_CHAR .)
    LTHAN           reduce using rule 162 (factor_cte -> CTE_CHAR .)
    GORE            reduce using rule 162 (factor_cte -> CTE_CHAR .)
    LORE            reduce using rule 162 (factor_cte -> CTE_CHAR .)
    AND             reduce using rule 162 (factor_cte -> CTE_CHAR .)
    OR              reduce using rule 162 (factor_cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 162 (factor_cte -> CTE_CHAR .)
    RPAREN          reduce using rule 162 (factor_cte -> CTE_CHAR .)
    COMMA           reduce using rule 162 (factor_cte -> CTE_CHAR .)
    RSQBRACKET      reduce using rule 162 (factor_cte -> CTE_CHAR .)


state 154

    (4) id_saver -> ID . empty
    (91) function_saver -> ID . empty
    (3) empty -> .

    LSQBRACKET      reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    empty                          shift and go to state 188

state 155

    (64) keep_assign -> ASSIGN empty .

    READ            reduce using rule 64 (keep_assign -> ASSIGN empty .)
    EXPLORATION     reduce using rule 64 (keep_assign -> ASSIGN empty .)
    FINANCIAL_STATE reduce using rule 64 (keep_assign -> ASSIGN empty .)
    DUMMI_REGRESSION reduce using rule 64 (keep_assign -> ASSIGN empty .)
    SEASON_ANALYSIS reduce using rule 64 (keep_assign -> ASSIGN empty .)
    TREND_PREDICTION reduce using rule 64 (keep_assign -> ASSIGN empty .)
    MODEL_PREDICT   reduce using rule 64 (keep_assign -> ASSIGN empty .)
    CTE_FLOAT       reduce using rule 64 (keep_assign -> ASSIGN empty .)
    CTE_INT         reduce using rule 64 (keep_assign -> ASSIGN empty .)
    CTE_CHAR        reduce using rule 64 (keep_assign -> ASSIGN empty .)
    LPAREN          reduce using rule 64 (keep_assign -> ASSIGN empty .)
    ID              reduce using rule 64 (keep_assign -> ASSIGN empty .)


state 156

    (66) condition -> IF LPAREN exp . RPAREN condition_GOTOF body condition2 SEMICOLON end_condition

    RPAREN          shift and go to state 189


state 157

    (72) print -> PRINT LPAREN print_many . RPAREN SEMICOLON end_print_np

    RPAREN          shift and go to state 190


state 158

    (74) print_many -> print_type . print_many2
    (75) print_many2 -> . COMMA print_many_np print_many
    (76) print_many2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 192
    RPAREN          reduce using rule 3 (empty -> .)

    print_many2                    shift and go to state 191
    empty                          shift and go to state 193

state 159

    (73) print_type -> exp .

    COMMA           reduce using rule 73 (print_type -> exp .)
    RPAREN          reduce using rule 73 (print_type -> exp .)


state 160

    (90) call_function -> function_saver LPAREN exp . exp_many RPAREN
    (92) exp_many -> . COMMA exp exp_many
    (93) exp_many -> . empty
    (3) empty -> .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 3 (empty -> .)

    exp_many                       shift and go to state 194
    empty                          shift and go to state 196

state 161

    (38) variable_array -> LSQBRACKET exp . RSQBRACKET variable_matrix

    RSQBRACKET      shift and go to state 197


state 162

    (86) for -> FOR LPAREN for_np1 . for_end body for_np2
    (88) for_end -> . int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT
    (6) int_const_saver -> . empty
    (3) empty -> .

    CTE_INT         shift and go to state 200
    RPAREN          reduce using rule 3 (empty -> .)

    for_end                        shift and go to state 198
    int_const_saver                shift and go to state 199
    empty                          shift and go to state 201

state 163

    (87) for_np1 -> assign . TO

    TO              shift and go to state 202


state 164

    (83) while -> DO seed body . WHILE LPAREN exp RPAREN SEMICOLON gotoV

    WHILE           shift and go to state 203


state 165

    (57) body -> LBRACKET . inner_body RBRACKET
    (58) inner_body -> . statement inner_body
    (59) inner_body -> . empty
    (94) statement -> . assign
    (95) statement -> . condition
    (96) statement -> . print
    (97) statement -> . cycle
    (98) statement -> . call_function
    (3) empty -> .
    (60) assign -> . variable keep_assign specialf_assign end_assign
    (66) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (72) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (81) cycle -> . for
    (82) cycle -> . while
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (37) variable -> . id_saver variable_array
    (86) for -> . FOR LPAREN for_np1 for_end body for_np2
    (83) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (91) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 89
    ID              shift and go to state 90

    inner_body                     shift and go to state 204
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86
    id_saver                       shift and go to state 87

state 166

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET . program_vars inner_body return RBRACKET program_function
    (15) program_vars -> . VAR var_type
    (16) program_vars -> . empty
    (3) empty -> .

    VAR             shift and go to state 10
    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)

    program_vars                   shift and go to state 205
    empty                          shift and go to state 11

state 167

    (49) param -> s_type id_saver add_params . param2
    (50) param2 -> . COMMA s_type id_saver add_params param2
    (51) param2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 207
    RPAREN          reduce using rule 3 (empty -> .)

    param2                         shift and go to state 206
    empty                          shift and go to state 208

state 168

    (52) add_params -> empty .

    COMMA           reduce using rule 52 (add_params -> empty .)
    RPAREN          reduce using rule 52 (add_params -> empty .)


state 169

    (29) var_s_type2 -> COMMA id_saver var_s_array add_s_var . var_s_type2
    (29) var_s_type2 -> . COMMA id_saver var_s_array add_s_var var_s_type2
    (30) var_s_type2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 3 (empty -> .)

    var_s_type2                    shift and go to state 209
    empty                          shift and go to state 70

state 170

    (34) var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .

    COMMA           reduce using rule 34 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)
    SEMICOLON       reduce using rule 34 (var_s_matrix -> LSQBRACKET var_s_dimesions RSQBRACKET .)


state 171

    (60) assign -> variable keep_assign specialf_assign end_assign .

    IF              reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)
    PRINT           reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)
    FOR             reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)
    DO              reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)
    ID              reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)
    RBRACKET        reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)
    RETURN          reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)
    TO              reduce using rule 60 (assign -> variable keep_assign specialf_assign end_assign .)


state 172

    (65) end_assign -> SEMICOLON . empty
    (3) empty -> .

    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    TO              reduce using rule 3 (empty -> .)

    empty                          shift and go to state 210

state 173

    (121) exp -> t_exp release_exp . exp_or
    (122) exp_or -> . exp_keep_or exp
    (123) exp_or -> . empty
    (124) exp_keep_or -> . OR
    (3) empty -> .

    OR              shift and go to state 214
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    exp_or                         shift and go to state 211
    exp_keep_or                    shift and go to state 212
    empty                          shift and go to state 213

state 174

    (7) release_exp -> empty .

    OR              reduce using rule 7 (release_exp -> empty .)
    SEMICOLON       reduce using rule 7 (release_exp -> empty .)
    RPAREN          reduce using rule 7 (release_exp -> empty .)
    COMMA           reduce using rule 7 (release_exp -> empty .)
    RSQBRACKET      reduce using rule 7 (release_exp -> empty .)
    AND             reduce using rule 7 (release_exp -> empty .)
    GTHAN           reduce using rule 7 (release_exp -> empty .)
    EQUAL           reduce using rule 7 (release_exp -> empty .)
    NOTEQUAL        reduce using rule 7 (release_exp -> empty .)
    LTHAN           reduce using rule 7 (release_exp -> empty .)
    GORE            reduce using rule 7 (release_exp -> empty .)
    LORE            reduce using rule 7 (release_exp -> empty .)
    PLUS            reduce using rule 7 (release_exp -> empty .)
    MINUS           reduce using rule 7 (release_exp -> empty .)
    MULTIPLY        reduce using rule 7 (release_exp -> empty .)
    DIVIDE          reduce using rule 7 (release_exp -> empty .)
    MODULE          reduce using rule 7 (release_exp -> empty .)
    POWER           reduce using rule 7 (release_exp -> empty .)


state 175

    (79) read -> READ LPAREN . variable RPAREN read_np
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 215
    id_saver                       shift and go to state 87

state 176

    (125) t_exp -> expression release_exp . t_exp_and
    (126) t_exp_and -> . keep_and t_exp
    (127) t_exp_and -> . empty
    (128) keep_and -> . AND
    (3) empty -> .

    AND             shift and go to state 219
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    t_exp_and                      shift and go to state 216
    keep_and                       shift and go to state 217
    empty                          shift and go to state 218

state 177

    (105) exploration -> EXPLORATION LPAREN . variable explore_var explor_cte RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 220
    id_saver                       shift and go to state 87

state 178

    (110) financial_state -> FINANCIAL_STATE LPAREN . variable COMMA variable COMMA variable COMMA variable RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 221
    id_saver                       shift and go to state 87

state 179

    (113) dummi_regression -> DUMMI_REGRESSION LPAREN . variable COMMA variable dr_array dr_int RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 222
    id_saver                       shift and go to state 87

state 180

    (111) season_analysis -> SEASON_ANALYSIS LPAREN . variable RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 223
    id_saver                       shift and go to state 87

state 181

    (112) trend_prediction -> TREND_PREDICTION LPAREN . variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 224
    id_saver                       shift and go to state 87

state 182

    (120) model_predict -> MODEL_PREDICT LPAREN . variable COMMA variable COMMA RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 225
    id_saver                       shift and go to state 87

state 183

    (129) expression -> m_exp release_exp . expression_comp
    (130) expression_comp -> . expression_comp_2 m_exp release_exp
    (131) expression_comp -> . empty
    (132) expression_comp_2 -> . GTHAN
    (133) expression_comp_2 -> . EQUAL
    (134) expression_comp_2 -> . NOTEQUAL
    (135) expression_comp_2 -> . LTHAN
    (136) expression_comp_2 -> . GORE
    (137) expression_comp_2 -> . LORE
    (3) empty -> .

    GTHAN           shift and go to state 229
    EQUAL           shift and go to state 230
    NOTEQUAL        shift and go to state 231
    LTHAN           shift and go to state 232
    GORE            shift and go to state 233
    LORE            shift and go to state 234
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    expression_comp                shift and go to state 226
    expression_comp_2              shift and go to state 227
    empty                          shift and go to state 228

state 184

    (138) m_exp -> term release_exp . m_exp_sr
    (139) m_exp_sr -> . m_exp_sr_2 m_exp
    (140) m_exp_sr -> . empty
    (141) m_exp_sr_2 -> . PLUS
    (142) m_exp_sr_2 -> . MINUS
    (3) empty -> .

    PLUS            shift and go to state 238
    MINUS           shift and go to state 239
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    m_exp_sr                       shift and go to state 235
    m_exp_sr_2                     shift and go to state 236
    empty                          shift and go to state 237

state 185

    (143) term -> sub_factor release_exp . term_pc
    (144) term_pc -> . term_pc_2 term
    (145) term_pc -> . empty
    (146) term_pc_2 -> . MULTIPLY
    (147) term_pc_2 -> . DIVIDE
    (148) term_pc_2 -> . MODULE
    (3) empty -> .

    MULTIPLY        shift and go to state 243
    DIVIDE          shift and go to state 244
    MODULE          shift and go to state 245
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    term_pc                        shift and go to state 240
    term_pc_2                      shift and go to state 241
    empty                          shift and go to state 242

state 186

    (149) sub_factor -> factor release_exp . sub_factor_pc
    (150) sub_factor_pc -> . sub_factor_pc_2 sub_factor
    (151) sub_factor_pc -> . empty
    (152) sub_factor_pc_2 -> . POWER empty
    (3) empty -> .

    POWER           shift and go to state 249
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    sub_factor_pc                  shift and go to state 246
    sub_factor_pc_2                shift and go to state 247
    empty                          shift and go to state 248

state 187

    (157) factor_exp -> false_button exp . release_false_button
    (159) release_false_button -> . RPAREN

    RPAREN          shift and go to state 251

    release_false_button           shift and go to state 250

state 188

    (4) id_saver -> ID empty .
    (91) function_saver -> ID empty .

    LSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    POWER           reduce using rule 4 (id_saver -> ID empty .)
    MULTIPLY        reduce using rule 4 (id_saver -> ID empty .)
    DIVIDE          reduce using rule 4 (id_saver -> ID empty .)
    MODULE          reduce using rule 4 (id_saver -> ID empty .)
    PLUS            reduce using rule 4 (id_saver -> ID empty .)
    MINUS           reduce using rule 4 (id_saver -> ID empty .)
    GTHAN           reduce using rule 4 (id_saver -> ID empty .)
    EQUAL           reduce using rule 4 (id_saver -> ID empty .)
    NOTEQUAL        reduce using rule 4 (id_saver -> ID empty .)
    LTHAN           reduce using rule 4 (id_saver -> ID empty .)
    GORE            reduce using rule 4 (id_saver -> ID empty .)
    LORE            reduce using rule 4 (id_saver -> ID empty .)
    AND             reduce using rule 4 (id_saver -> ID empty .)
    OR              reduce using rule 4 (id_saver -> ID empty .)
    SEMICOLON       reduce using rule 4 (id_saver -> ID empty .)
    RPAREN          reduce using rule 4 (id_saver -> ID empty .)
    COMMA           reduce using rule 4 (id_saver -> ID empty .)
    RSQBRACKET      reduce using rule 4 (id_saver -> ID empty .)
    LPAREN          reduce using rule 91 (function_saver -> ID empty .)


state 189

    (66) condition -> IF LPAREN exp RPAREN . condition_GOTOF body condition2 SEMICOLON end_condition
    (69) condition_GOTOF -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    condition_GOTOF                shift and go to state 252
    empty                          shift and go to state 253

state 190

    (72) print -> PRINT LPAREN print_many RPAREN . SEMICOLON end_print_np

    SEMICOLON       shift and go to state 254


state 191

    (74) print_many -> print_type print_many2 .

    RPAREN          reduce using rule 74 (print_many -> print_type print_many2 .)


state 192

    (75) print_many2 -> COMMA . print_many_np print_many
    (77) print_many_np -> . empty
    (3) empty -> .

    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    print_many_np                  shift and go to state 255
    empty                          shift and go to state 256

state 193

    (76) print_many2 -> empty .

    RPAREN          reduce using rule 76 (print_many2 -> empty .)


state 194

    (90) call_function -> function_saver LPAREN exp exp_many . RPAREN

    RPAREN          shift and go to state 257


state 195

    (92) exp_many -> COMMA . exp exp_many
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 258
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 196

    (93) exp_many -> empty .

    RPAREN          reduce using rule 93 (exp_many -> empty .)


state 197

    (38) variable_array -> LSQBRACKET exp RSQBRACKET . variable_matrix
    (40) variable_matrix -> . LSQBRACKET exp RSQBRACKET
    (41) variable_matrix -> . empty
    (3) empty -> .

    LSQBRACKET      shift and go to state 259
    ASSIGN          reduce using rule 3 (empty -> .)
    POWER           reduce using rule 3 (empty -> .)
    MULTIPLY        reduce using rule 3 (empty -> .)
    DIVIDE          reduce using rule 3 (empty -> .)
    MODULE          reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GTHAN           reduce using rule 3 (empty -> .)
    EQUAL           reduce using rule 3 (empty -> .)
    NOTEQUAL        reduce using rule 3 (empty -> .)
    LTHAN           reduce using rule 3 (empty -> .)
    GORE            reduce using rule 3 (empty -> .)
    LORE            reduce using rule 3 (empty -> .)
    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    variable_matrix                shift and go to state 260
    empty                          shift and go to state 261

state 198

    (86) for -> FOR LPAREN for_np1 for_end . body for_np2
    (57) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 262

state 199

    (88) for_end -> int_const_saver . RPAREN

    RPAREN          shift and go to state 263


state 200

    (5) int_const_saver -> CTE_INT .

    RPAREN          reduce using rule 5 (int_const_saver -> CTE_INT .)
    COMMA           reduce using rule 5 (int_const_saver -> CTE_INT .)


state 201

    (6) int_const_saver -> empty .

    RPAREN          reduce using rule 6 (int_const_saver -> empty .)
    COMMA           reduce using rule 6 (int_const_saver -> empty .)


state 202

    (87) for_np1 -> assign TO .

    CTE_INT         reduce using rule 87 (for_np1 -> assign TO .)
    RPAREN          reduce using rule 87 (for_np1 -> assign TO .)


state 203

    (83) while -> DO seed body WHILE . LPAREN exp RPAREN SEMICOLON gotoV

    LPAREN          shift and go to state 264


state 204

    (57) body -> LBRACKET inner_body . RBRACKET

    RBRACKET        shift and go to state 265


state 205

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars . inner_body return RBRACKET program_function
    (58) inner_body -> . statement inner_body
    (59) inner_body -> . empty
    (94) statement -> . assign
    (95) statement -> . condition
    (96) statement -> . print
    (97) statement -> . cycle
    (98) statement -> . call_function
    (3) empty -> .
    (60) assign -> . variable keep_assign specialf_assign end_assign
    (66) condition -> . IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition
    (72) print -> . PRINT LPAREN print_many RPAREN SEMICOLON end_print_np
    (81) cycle -> . for
    (82) cycle -> . while
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (37) variable -> . id_saver variable_array
    (86) for -> . FOR LPAREN for_np1 for_end body for_np2
    (83) while -> . DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV
    (91) function_saver -> . ID empty
    (4) id_saver -> . ID empty

    RETURN          reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    FOR             shift and go to state 88
    DO              shift and go to state 89
    ID              shift and go to state 90

    id_saver                       shift and go to state 87
    inner_body                     shift and go to state 266
    statement                      shift and go to state 74
    empty                          shift and go to state 75
    assign                         shift and go to state 76
    condition                      shift and go to state 77
    print                          shift and go to state 78
    cycle                          shift and go to state 79
    call_function                  shift and go to state 80
    variable                       shift and go to state 81
    for                            shift and go to state 84
    while                          shift and go to state 85
    function_saver                 shift and go to state 86

state 206

    (49) param -> s_type id_saver add_params param2 .

    RPAREN          reduce using rule 49 (param -> s_type id_saver add_params param2 .)


state 207

    (50) param2 -> COMMA . s_type id_saver add_params param2
    (17) s_type -> . INT
    (18) s_type -> . FLOAT
    (19) s_type -> . CHAR

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    s_type                         shift and go to state 267

state 208

    (51) param2 -> empty .

    RPAREN          reduce using rule 51 (param2 -> empty .)


state 209

    (29) var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .

    SEMICOLON       reduce using rule 29 (var_s_type2 -> COMMA id_saver var_s_array add_s_var var_s_type2 .)


state 210

    (65) end_assign -> SEMICOLON empty .

    IF              reduce using rule 65 (end_assign -> SEMICOLON empty .)
    PRINT           reduce using rule 65 (end_assign -> SEMICOLON empty .)
    FOR             reduce using rule 65 (end_assign -> SEMICOLON empty .)
    DO              reduce using rule 65 (end_assign -> SEMICOLON empty .)
    ID              reduce using rule 65 (end_assign -> SEMICOLON empty .)
    RBRACKET        reduce using rule 65 (end_assign -> SEMICOLON empty .)
    RETURN          reduce using rule 65 (end_assign -> SEMICOLON empty .)
    TO              reduce using rule 65 (end_assign -> SEMICOLON empty .)


state 211

    (121) exp -> t_exp release_exp exp_or .

    SEMICOLON       reduce using rule 121 (exp -> t_exp release_exp exp_or .)
    RPAREN          reduce using rule 121 (exp -> t_exp release_exp exp_or .)
    COMMA           reduce using rule 121 (exp -> t_exp release_exp exp_or .)
    RSQBRACKET      reduce using rule 121 (exp -> t_exp release_exp exp_or .)


state 212

    (122) exp_or -> exp_keep_or . exp
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 268
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 213

    (123) exp_or -> empty .

    SEMICOLON       reduce using rule 123 (exp_or -> empty .)
    RPAREN          reduce using rule 123 (exp_or -> empty .)
    COMMA           reduce using rule 123 (exp_or -> empty .)
    RSQBRACKET      reduce using rule 123 (exp_or -> empty .)


state 214

    (124) exp_keep_or -> OR .

    CTE_FLOAT       reduce using rule 124 (exp_keep_or -> OR .)
    CTE_INT         reduce using rule 124 (exp_keep_or -> OR .)
    CTE_CHAR        reduce using rule 124 (exp_keep_or -> OR .)
    LPAREN          reduce using rule 124 (exp_keep_or -> OR .)
    ID              reduce using rule 124 (exp_keep_or -> OR .)


state 215

    (79) read -> READ LPAREN variable . RPAREN read_np

    RPAREN          shift and go to state 269


state 216

    (125) t_exp -> expression release_exp t_exp_and .

    OR              reduce using rule 125 (t_exp -> expression release_exp t_exp_and .)
    SEMICOLON       reduce using rule 125 (t_exp -> expression release_exp t_exp_and .)
    RPAREN          reduce using rule 125 (t_exp -> expression release_exp t_exp_and .)
    COMMA           reduce using rule 125 (t_exp -> expression release_exp t_exp_and .)
    RSQBRACKET      reduce using rule 125 (t_exp -> expression release_exp t_exp_and .)


state 217

    (126) t_exp_and -> keep_and . t_exp
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    t_exp                          shift and go to state 270
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 218

    (127) t_exp_and -> empty .

    OR              reduce using rule 127 (t_exp_and -> empty .)
    SEMICOLON       reduce using rule 127 (t_exp_and -> empty .)
    RPAREN          reduce using rule 127 (t_exp_and -> empty .)
    COMMA           reduce using rule 127 (t_exp_and -> empty .)
    RSQBRACKET      reduce using rule 127 (t_exp_and -> empty .)


state 219

    (128) keep_and -> AND .

    CTE_FLOAT       reduce using rule 128 (keep_and -> AND .)
    CTE_INT         reduce using rule 128 (keep_and -> AND .)
    CTE_CHAR        reduce using rule 128 (keep_and -> AND .)
    LPAREN          reduce using rule 128 (keep_and -> AND .)
    ID              reduce using rule 128 (keep_and -> AND .)


state 220

    (105) exploration -> EXPLORATION LPAREN variable . explore_var explor_cte RPAREN
    (106) explore_var -> . COMMA variable
    (107) explore_var -> . empty
    (3) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 272
    RPAREN          reduce using rule 3 (empty -> .)

  ! COMMA           [ reduce using rule 3 (empty -> .) ]

    explore_var                    shift and go to state 271
    empty                          shift and go to state 273

state 221

    (110) financial_state -> FINANCIAL_STATE LPAREN variable . COMMA variable COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 274


state 222

    (113) dummi_regression -> DUMMI_REGRESSION LPAREN variable . COMMA variable dr_array dr_int RPAREN

    COMMA           shift and go to state 275


state 223

    (111) season_analysis -> SEASON_ANALYSIS LPAREN variable . RPAREN

    RPAREN          shift and go to state 276


state 224

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable . COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 277


state 225

    (120) model_predict -> MODEL_PREDICT LPAREN variable . COMMA variable COMMA RPAREN

    COMMA           shift and go to state 278


state 226

    (129) expression -> m_exp release_exp expression_comp .

    AND             reduce using rule 129 (expression -> m_exp release_exp expression_comp .)
    OR              reduce using rule 129 (expression -> m_exp release_exp expression_comp .)
    SEMICOLON       reduce using rule 129 (expression -> m_exp release_exp expression_comp .)
    RPAREN          reduce using rule 129 (expression -> m_exp release_exp expression_comp .)
    COMMA           reduce using rule 129 (expression -> m_exp release_exp expression_comp .)
    RSQBRACKET      reduce using rule 129 (expression -> m_exp release_exp expression_comp .)


state 227

    (130) expression_comp -> expression_comp_2 . m_exp release_exp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    m_exp                          shift and go to state 279
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 228

    (131) expression_comp -> empty .

    AND             reduce using rule 131 (expression_comp -> empty .)
    OR              reduce using rule 131 (expression_comp -> empty .)
    SEMICOLON       reduce using rule 131 (expression_comp -> empty .)
    RPAREN          reduce using rule 131 (expression_comp -> empty .)
    COMMA           reduce using rule 131 (expression_comp -> empty .)
    RSQBRACKET      reduce using rule 131 (expression_comp -> empty .)


state 229

    (132) expression_comp_2 -> GTHAN .

    CTE_FLOAT       reduce using rule 132 (expression_comp_2 -> GTHAN .)
    CTE_INT         reduce using rule 132 (expression_comp_2 -> GTHAN .)
    CTE_CHAR        reduce using rule 132 (expression_comp_2 -> GTHAN .)
    LPAREN          reduce using rule 132 (expression_comp_2 -> GTHAN .)
    ID              reduce using rule 132 (expression_comp_2 -> GTHAN .)


state 230

    (133) expression_comp_2 -> EQUAL .

    CTE_FLOAT       reduce using rule 133 (expression_comp_2 -> EQUAL .)
    CTE_INT         reduce using rule 133 (expression_comp_2 -> EQUAL .)
    CTE_CHAR        reduce using rule 133 (expression_comp_2 -> EQUAL .)
    LPAREN          reduce using rule 133 (expression_comp_2 -> EQUAL .)
    ID              reduce using rule 133 (expression_comp_2 -> EQUAL .)


state 231

    (134) expression_comp_2 -> NOTEQUAL .

    CTE_FLOAT       reduce using rule 134 (expression_comp_2 -> NOTEQUAL .)
    CTE_INT         reduce using rule 134 (expression_comp_2 -> NOTEQUAL .)
    CTE_CHAR        reduce using rule 134 (expression_comp_2 -> NOTEQUAL .)
    LPAREN          reduce using rule 134 (expression_comp_2 -> NOTEQUAL .)
    ID              reduce using rule 134 (expression_comp_2 -> NOTEQUAL .)


state 232

    (135) expression_comp_2 -> LTHAN .

    CTE_FLOAT       reduce using rule 135 (expression_comp_2 -> LTHAN .)
    CTE_INT         reduce using rule 135 (expression_comp_2 -> LTHAN .)
    CTE_CHAR        reduce using rule 135 (expression_comp_2 -> LTHAN .)
    LPAREN          reduce using rule 135 (expression_comp_2 -> LTHAN .)
    ID              reduce using rule 135 (expression_comp_2 -> LTHAN .)


state 233

    (136) expression_comp_2 -> GORE .

    CTE_FLOAT       reduce using rule 136 (expression_comp_2 -> GORE .)
    CTE_INT         reduce using rule 136 (expression_comp_2 -> GORE .)
    CTE_CHAR        reduce using rule 136 (expression_comp_2 -> GORE .)
    LPAREN          reduce using rule 136 (expression_comp_2 -> GORE .)
    ID              reduce using rule 136 (expression_comp_2 -> GORE .)


state 234

    (137) expression_comp_2 -> LORE .

    CTE_FLOAT       reduce using rule 137 (expression_comp_2 -> LORE .)
    CTE_INT         reduce using rule 137 (expression_comp_2 -> LORE .)
    CTE_CHAR        reduce using rule 137 (expression_comp_2 -> LORE .)
    LPAREN          reduce using rule 137 (expression_comp_2 -> LORE .)
    ID              reduce using rule 137 (expression_comp_2 -> LORE .)


state 235

    (138) m_exp -> term release_exp m_exp_sr .

    GTHAN           reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    EQUAL           reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    NOTEQUAL        reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    LTHAN           reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    GORE            reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    LORE            reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    AND             reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    OR              reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    SEMICOLON       reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    RPAREN          reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    COMMA           reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)
    RSQBRACKET      reduce using rule 138 (m_exp -> term release_exp m_exp_sr .)


state 236

    (139) m_exp_sr -> m_exp_sr_2 . m_exp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    m_exp                          shift and go to state 280
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 237

    (140) m_exp_sr -> empty .

    GTHAN           reduce using rule 140 (m_exp_sr -> empty .)
    EQUAL           reduce using rule 140 (m_exp_sr -> empty .)
    NOTEQUAL        reduce using rule 140 (m_exp_sr -> empty .)
    LTHAN           reduce using rule 140 (m_exp_sr -> empty .)
    GORE            reduce using rule 140 (m_exp_sr -> empty .)
    LORE            reduce using rule 140 (m_exp_sr -> empty .)
    AND             reduce using rule 140 (m_exp_sr -> empty .)
    OR              reduce using rule 140 (m_exp_sr -> empty .)
    SEMICOLON       reduce using rule 140 (m_exp_sr -> empty .)
    RPAREN          reduce using rule 140 (m_exp_sr -> empty .)
    COMMA           reduce using rule 140 (m_exp_sr -> empty .)
    RSQBRACKET      reduce using rule 140 (m_exp_sr -> empty .)


state 238

    (141) m_exp_sr_2 -> PLUS .

    CTE_FLOAT       reduce using rule 141 (m_exp_sr_2 -> PLUS .)
    CTE_INT         reduce using rule 141 (m_exp_sr_2 -> PLUS .)
    CTE_CHAR        reduce using rule 141 (m_exp_sr_2 -> PLUS .)
    LPAREN          reduce using rule 141 (m_exp_sr_2 -> PLUS .)
    ID              reduce using rule 141 (m_exp_sr_2 -> PLUS .)


state 239

    (142) m_exp_sr_2 -> MINUS .

    CTE_FLOAT       reduce using rule 142 (m_exp_sr_2 -> MINUS .)
    CTE_INT         reduce using rule 142 (m_exp_sr_2 -> MINUS .)
    CTE_CHAR        reduce using rule 142 (m_exp_sr_2 -> MINUS .)
    LPAREN          reduce using rule 142 (m_exp_sr_2 -> MINUS .)
    ID              reduce using rule 142 (m_exp_sr_2 -> MINUS .)


state 240

    (143) term -> sub_factor release_exp term_pc .

    PLUS            reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    MINUS           reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    GTHAN           reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    EQUAL           reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    NOTEQUAL        reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    LTHAN           reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    GORE            reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    LORE            reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    AND             reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    OR              reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    SEMICOLON       reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    RPAREN          reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    COMMA           reduce using rule 143 (term -> sub_factor release_exp term_pc .)
    RSQBRACKET      reduce using rule 143 (term -> sub_factor release_exp term_pc .)


state 241

    (144) term_pc -> term_pc_2 . term
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    term                           shift and go to state 281
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 242

    (145) term_pc -> empty .

    PLUS            reduce using rule 145 (term_pc -> empty .)
    MINUS           reduce using rule 145 (term_pc -> empty .)
    GTHAN           reduce using rule 145 (term_pc -> empty .)
    EQUAL           reduce using rule 145 (term_pc -> empty .)
    NOTEQUAL        reduce using rule 145 (term_pc -> empty .)
    LTHAN           reduce using rule 145 (term_pc -> empty .)
    GORE            reduce using rule 145 (term_pc -> empty .)
    LORE            reduce using rule 145 (term_pc -> empty .)
    AND             reduce using rule 145 (term_pc -> empty .)
    OR              reduce using rule 145 (term_pc -> empty .)
    SEMICOLON       reduce using rule 145 (term_pc -> empty .)
    RPAREN          reduce using rule 145 (term_pc -> empty .)
    COMMA           reduce using rule 145 (term_pc -> empty .)
    RSQBRACKET      reduce using rule 145 (term_pc -> empty .)


state 243

    (146) term_pc_2 -> MULTIPLY .

    CTE_FLOAT       reduce using rule 146 (term_pc_2 -> MULTIPLY .)
    CTE_INT         reduce using rule 146 (term_pc_2 -> MULTIPLY .)
    CTE_CHAR        reduce using rule 146 (term_pc_2 -> MULTIPLY .)
    LPAREN          reduce using rule 146 (term_pc_2 -> MULTIPLY .)
    ID              reduce using rule 146 (term_pc_2 -> MULTIPLY .)


state 244

    (147) term_pc_2 -> DIVIDE .

    CTE_FLOAT       reduce using rule 147 (term_pc_2 -> DIVIDE .)
    CTE_INT         reduce using rule 147 (term_pc_2 -> DIVIDE .)
    CTE_CHAR        reduce using rule 147 (term_pc_2 -> DIVIDE .)
    LPAREN          reduce using rule 147 (term_pc_2 -> DIVIDE .)
    ID              reduce using rule 147 (term_pc_2 -> DIVIDE .)


state 245

    (148) term_pc_2 -> MODULE .

    CTE_FLOAT       reduce using rule 148 (term_pc_2 -> MODULE .)
    CTE_INT         reduce using rule 148 (term_pc_2 -> MODULE .)
    CTE_CHAR        reduce using rule 148 (term_pc_2 -> MODULE .)
    LPAREN          reduce using rule 148 (term_pc_2 -> MODULE .)
    ID              reduce using rule 148 (term_pc_2 -> MODULE .)


state 246

    (149) sub_factor -> factor release_exp sub_factor_pc .

    MULTIPLY        reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    DIVIDE          reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    MODULE          reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    PLUS            reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    MINUS           reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    GTHAN           reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    EQUAL           reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    NOTEQUAL        reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    LTHAN           reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    GORE            reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    LORE            reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    AND             reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    OR              reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    SEMICOLON       reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    RPAREN          reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    COMMA           reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)
    RSQBRACKET      reduce using rule 149 (sub_factor -> factor release_exp sub_factor_pc .)


state 247

    (150) sub_factor_pc -> sub_factor_pc_2 . sub_factor
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    sub_factor                     shift and go to state 282
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 248

    (151) sub_factor_pc -> empty .

    MULTIPLY        reduce using rule 151 (sub_factor_pc -> empty .)
    DIVIDE          reduce using rule 151 (sub_factor_pc -> empty .)
    MODULE          reduce using rule 151 (sub_factor_pc -> empty .)
    PLUS            reduce using rule 151 (sub_factor_pc -> empty .)
    MINUS           reduce using rule 151 (sub_factor_pc -> empty .)
    GTHAN           reduce using rule 151 (sub_factor_pc -> empty .)
    EQUAL           reduce using rule 151 (sub_factor_pc -> empty .)
    NOTEQUAL        reduce using rule 151 (sub_factor_pc -> empty .)
    LTHAN           reduce using rule 151 (sub_factor_pc -> empty .)
    GORE            reduce using rule 151 (sub_factor_pc -> empty .)
    LORE            reduce using rule 151 (sub_factor_pc -> empty .)
    AND             reduce using rule 151 (sub_factor_pc -> empty .)
    OR              reduce using rule 151 (sub_factor_pc -> empty .)
    SEMICOLON       reduce using rule 151 (sub_factor_pc -> empty .)
    RPAREN          reduce using rule 151 (sub_factor_pc -> empty .)
    COMMA           reduce using rule 151 (sub_factor_pc -> empty .)
    RSQBRACKET      reduce using rule 151 (sub_factor_pc -> empty .)


state 249

    (152) sub_factor_pc_2 -> POWER . empty
    (3) empty -> .

    CTE_FLOAT       reduce using rule 3 (empty -> .)
    CTE_INT         reduce using rule 3 (empty -> .)
    CTE_CHAR        reduce using rule 3 (empty -> .)
    LPAREN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)

    empty                          shift and go to state 283

state 250

    (157) factor_exp -> false_button exp release_false_button .

    POWER           reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    MULTIPLY        reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    DIVIDE          reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    MODULE          reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    PLUS            reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    MINUS           reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    GTHAN           reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    EQUAL           reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    NOTEQUAL        reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    LTHAN           reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    GORE            reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    LORE            reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    AND             reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    OR              reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    SEMICOLON       reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    RPAREN          reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    COMMA           reduce using rule 157 (factor_exp -> false_button exp release_false_button .)
    RSQBRACKET      reduce using rule 157 (factor_exp -> false_button exp release_false_button .)


state 251

    (159) release_false_button -> RPAREN .

    POWER           reduce using rule 159 (release_false_button -> RPAREN .)
    MULTIPLY        reduce using rule 159 (release_false_button -> RPAREN .)
    DIVIDE          reduce using rule 159 (release_false_button -> RPAREN .)
    MODULE          reduce using rule 159 (release_false_button -> RPAREN .)
    PLUS            reduce using rule 159 (release_false_button -> RPAREN .)
    MINUS           reduce using rule 159 (release_false_button -> RPAREN .)
    GTHAN           reduce using rule 159 (release_false_button -> RPAREN .)
    EQUAL           reduce using rule 159 (release_false_button -> RPAREN .)
    NOTEQUAL        reduce using rule 159 (release_false_button -> RPAREN .)
    LTHAN           reduce using rule 159 (release_false_button -> RPAREN .)
    GORE            reduce using rule 159 (release_false_button -> RPAREN .)
    LORE            reduce using rule 159 (release_false_button -> RPAREN .)
    AND             reduce using rule 159 (release_false_button -> RPAREN .)
    OR              reduce using rule 159 (release_false_button -> RPAREN .)
    SEMICOLON       reduce using rule 159 (release_false_button -> RPAREN .)
    RPAREN          reduce using rule 159 (release_false_button -> RPAREN .)
    COMMA           reduce using rule 159 (release_false_button -> RPAREN .)
    RSQBRACKET      reduce using rule 159 (release_false_button -> RPAREN .)


state 252

    (66) condition -> IF LPAREN exp RPAREN condition_GOTOF . body condition2 SEMICOLON end_condition
    (57) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 284

state 253

    (69) condition_GOTOF -> empty .

    LBRACKET        reduce using rule 69 (condition_GOTOF -> empty .)


state 254

    (72) print -> PRINT LPAREN print_many RPAREN SEMICOLON . end_print_np
    (78) end_print_np -> . empty
    (3) empty -> .

    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)

    end_print_np                   shift and go to state 285
    empty                          shift and go to state 286

state 255

    (75) print_many2 -> COMMA print_many_np . print_many
    (74) print_many -> . print_type print_many2
    (73) print_type -> . exp
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    print_many                     shift and go to state 287
    print_type                     shift and go to state 158
    exp                            shift and go to state 159
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 256

    (77) print_many_np -> empty .

    CTE_FLOAT       reduce using rule 77 (print_many_np -> empty .)
    CTE_INT         reduce using rule 77 (print_many_np -> empty .)
    CTE_CHAR        reduce using rule 77 (print_many_np -> empty .)
    LPAREN          reduce using rule 77 (print_many_np -> empty .)
    ID              reduce using rule 77 (print_many_np -> empty .)


state 257

    (90) call_function -> function_saver LPAREN exp exp_many RPAREN .

    IF              reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    PRINT           reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    FOR             reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    DO              reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    ID              reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RBRACKET        reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RETURN          reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    POWER           reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MULTIPLY        reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    DIVIDE          reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MODULE          reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    PLUS            reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    MINUS           reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    GTHAN           reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    EQUAL           reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    NOTEQUAL        reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    LTHAN           reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    GORE            reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    LORE            reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    AND             reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    OR              reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    SEMICOLON       reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RPAREN          reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    COMMA           reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)
    RSQBRACKET      reduce using rule 90 (call_function -> function_saver LPAREN exp exp_many RPAREN .)


state 258

    (92) exp_many -> COMMA exp . exp_many
    (92) exp_many -> . COMMA exp exp_many
    (93) exp_many -> . empty
    (3) empty -> .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 3 (empty -> .)

    exp_many                       shift and go to state 288
    empty                          shift and go to state 196

state 259

    (40) variable_matrix -> LSQBRACKET . exp RSQBRACKET
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 289
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 260

    (38) variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .

    ASSIGN          reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    POWER           reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MULTIPLY        reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    DIVIDE          reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MODULE          reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    PLUS            reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    MINUS           reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GTHAN           reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    EQUAL           reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    NOTEQUAL        reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LTHAN           reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    GORE            reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    LORE            reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    AND             reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    OR              reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    SEMICOLON       reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RPAREN          reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    COMMA           reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)
    RSQBRACKET      reduce using rule 38 (variable_array -> LSQBRACKET exp RSQBRACKET variable_matrix .)


state 261

    (41) variable_matrix -> empty .

    ASSIGN          reduce using rule 41 (variable_matrix -> empty .)
    POWER           reduce using rule 41 (variable_matrix -> empty .)
    MULTIPLY        reduce using rule 41 (variable_matrix -> empty .)
    DIVIDE          reduce using rule 41 (variable_matrix -> empty .)
    MODULE          reduce using rule 41 (variable_matrix -> empty .)
    PLUS            reduce using rule 41 (variable_matrix -> empty .)
    MINUS           reduce using rule 41 (variable_matrix -> empty .)
    GTHAN           reduce using rule 41 (variable_matrix -> empty .)
    EQUAL           reduce using rule 41 (variable_matrix -> empty .)
    NOTEQUAL        reduce using rule 41 (variable_matrix -> empty .)
    LTHAN           reduce using rule 41 (variable_matrix -> empty .)
    GORE            reduce using rule 41 (variable_matrix -> empty .)
    LORE            reduce using rule 41 (variable_matrix -> empty .)
    AND             reduce using rule 41 (variable_matrix -> empty .)
    OR              reduce using rule 41 (variable_matrix -> empty .)
    SEMICOLON       reduce using rule 41 (variable_matrix -> empty .)
    RPAREN          reduce using rule 41 (variable_matrix -> empty .)
    COMMA           reduce using rule 41 (variable_matrix -> empty .)
    RSQBRACKET      reduce using rule 41 (variable_matrix -> empty .)


state 262

    (86) for -> FOR LPAREN for_np1 for_end body . for_np2
    (89) for_np2 -> . SEMICOLON

    SEMICOLON       shift and go to state 291

    for_np2                        shift and go to state 290

state 263

    (88) for_end -> int_const_saver RPAREN .

    LBRACKET        reduce using rule 88 (for_end -> int_const_saver RPAREN .)


state 264

    (83) while -> DO seed body WHILE LPAREN . exp RPAREN SEMICOLON gotoV
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 292
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 265

    (57) body -> LBRACKET inner_body RBRACKET .

    WHILE           reduce using rule 57 (body -> LBRACKET inner_body RBRACKET .)
    SEMICOLON       reduce using rule 57 (body -> LBRACKET inner_body RBRACKET .)
    ELSE            reduce using rule 57 (body -> LBRACKET inner_body RBRACKET .)


state 266

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body . return RBRACKET program_function
    (53) return -> . RETURN exp SEMICOLON
    (54) return -> . empty
    (3) empty -> .

    RETURN          shift and go to state 294
    RBRACKET        reduce using rule 3 (empty -> .)

    return                         shift and go to state 293
    empty                          shift and go to state 295

state 267

    (50) param2 -> COMMA s_type . id_saver add_params param2
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    id_saver                       shift and go to state 296

state 268

    (122) exp_or -> exp_keep_or exp .

    SEMICOLON       reduce using rule 122 (exp_or -> exp_keep_or exp .)
    RPAREN          reduce using rule 122 (exp_or -> exp_keep_or exp .)
    COMMA           reduce using rule 122 (exp_or -> exp_keep_or exp .)
    RSQBRACKET      reduce using rule 122 (exp_or -> exp_keep_or exp .)


state 269

    (79) read -> READ LPAREN variable RPAREN . read_np
    (80) read_np -> . empty
    (3) empty -> .

    SEMICOLON       reduce using rule 3 (empty -> .)

    read_np                        shift and go to state 297
    empty                          shift and go to state 298

state 270

    (126) t_exp_and -> keep_and t_exp .

    OR              reduce using rule 126 (t_exp_and -> keep_and t_exp .)
    SEMICOLON       reduce using rule 126 (t_exp_and -> keep_and t_exp .)
    RPAREN          reduce using rule 126 (t_exp_and -> keep_and t_exp .)
    COMMA           reduce using rule 126 (t_exp_and -> keep_and t_exp .)
    RSQBRACKET      reduce using rule 126 (t_exp_and -> keep_and t_exp .)


state 271

    (105) exploration -> EXPLORATION LPAREN variable explore_var . explor_cte RPAREN
    (108) explor_cte -> . COMMA int_const_saver
    (109) explor_cte -> . empty
    (3) empty -> .

    COMMA           shift and go to state 300
    RPAREN          reduce using rule 3 (empty -> .)

    explor_cte                     shift and go to state 299
    empty                          shift and go to state 301

state 272

    (106) explore_var -> COMMA . variable
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 302
    id_saver                       shift and go to state 87

state 273

    (107) explore_var -> empty .

    COMMA           reduce using rule 107 (explore_var -> empty .)
    RPAREN          reduce using rule 107 (explore_var -> empty .)


state 274

    (110) financial_state -> FINANCIAL_STATE LPAREN variable COMMA . variable COMMA variable COMMA variable RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 303
    id_saver                       shift and go to state 87

state 275

    (113) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA . variable dr_array dr_int RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 304
    id_saver                       shift and go to state 87

state 276

    (111) season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .

    SEMICOLON       reduce using rule 111 (season_analysis -> SEASON_ANALYSIS LPAREN variable RPAREN .)


state 277

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA . int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT
    (6) int_const_saver -> . empty
    (3) empty -> .

    CTE_INT         shift and go to state 200
    COMMA           reduce using rule 3 (empty -> .)

    int_const_saver                shift and go to state 305
    empty                          shift and go to state 201

state 278

    (120) model_predict -> MODEL_PREDICT LPAREN variable COMMA . variable COMMA RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 306
    id_saver                       shift and go to state 87

state 279

    (130) expression_comp -> expression_comp_2 m_exp . release_exp
    (7) release_exp -> . empty
    (3) empty -> .

    AND             reduce using rule 3 (empty -> .)
    OR              reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RSQBRACKET      reduce using rule 3 (empty -> .)

    release_exp                    shift and go to state 307
    empty                          shift and go to state 174

state 280

    (139) m_exp_sr -> m_exp_sr_2 m_exp .

    GTHAN           reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    EQUAL           reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    NOTEQUAL        reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LTHAN           reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    GORE            reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    LORE            reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    AND             reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    OR              reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    SEMICOLON       reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RPAREN          reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    COMMA           reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)
    RSQBRACKET      reduce using rule 139 (m_exp_sr -> m_exp_sr_2 m_exp .)


state 281

    (144) term_pc -> term_pc_2 term .

    PLUS            reduce using rule 144 (term_pc -> term_pc_2 term .)
    MINUS           reduce using rule 144 (term_pc -> term_pc_2 term .)
    GTHAN           reduce using rule 144 (term_pc -> term_pc_2 term .)
    EQUAL           reduce using rule 144 (term_pc -> term_pc_2 term .)
    NOTEQUAL        reduce using rule 144 (term_pc -> term_pc_2 term .)
    LTHAN           reduce using rule 144 (term_pc -> term_pc_2 term .)
    GORE            reduce using rule 144 (term_pc -> term_pc_2 term .)
    LORE            reduce using rule 144 (term_pc -> term_pc_2 term .)
    AND             reduce using rule 144 (term_pc -> term_pc_2 term .)
    OR              reduce using rule 144 (term_pc -> term_pc_2 term .)
    SEMICOLON       reduce using rule 144 (term_pc -> term_pc_2 term .)
    RPAREN          reduce using rule 144 (term_pc -> term_pc_2 term .)
    COMMA           reduce using rule 144 (term_pc -> term_pc_2 term .)
    RSQBRACKET      reduce using rule 144 (term_pc -> term_pc_2 term .)


state 282

    (150) sub_factor_pc -> sub_factor_pc_2 sub_factor .

    MULTIPLY        reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    DIVIDE          reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MODULE          reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    PLUS            reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    MINUS           reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GTHAN           reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    EQUAL           reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    NOTEQUAL        reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LTHAN           reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    GORE            reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    LORE            reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    AND             reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    OR              reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    SEMICOLON       reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RPAREN          reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    COMMA           reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)
    RSQBRACKET      reduce using rule 150 (sub_factor_pc -> sub_factor_pc_2 sub_factor .)


state 283

    (152) sub_factor_pc_2 -> POWER empty .

    CTE_FLOAT       reduce using rule 152 (sub_factor_pc_2 -> POWER empty .)
    CTE_INT         reduce using rule 152 (sub_factor_pc_2 -> POWER empty .)
    CTE_CHAR        reduce using rule 152 (sub_factor_pc_2 -> POWER empty .)
    LPAREN          reduce using rule 152 (sub_factor_pc_2 -> POWER empty .)
    ID              reduce using rule 152 (sub_factor_pc_2 -> POWER empty .)


state 284

    (66) condition -> IF LPAREN exp RPAREN condition_GOTOF body . condition2 SEMICOLON end_condition
    (67) condition2 -> . ELSE condition_GOTO body
    (68) condition2 -> . empty
    (3) empty -> .

    ELSE            shift and go to state 309
    SEMICOLON       reduce using rule 3 (empty -> .)

    condition2                     shift and go to state 308
    empty                          shift and go to state 310

state 285

    (72) print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .

    IF              reduce using rule 72 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    PRINT           reduce using rule 72 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    FOR             reduce using rule 72 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    DO              reduce using rule 72 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    ID              reduce using rule 72 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RBRACKET        reduce using rule 72 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)
    RETURN          reduce using rule 72 (print -> PRINT LPAREN print_many RPAREN SEMICOLON end_print_np .)


state 286

    (78) end_print_np -> empty .

    IF              reduce using rule 78 (end_print_np -> empty .)
    PRINT           reduce using rule 78 (end_print_np -> empty .)
    FOR             reduce using rule 78 (end_print_np -> empty .)
    DO              reduce using rule 78 (end_print_np -> empty .)
    ID              reduce using rule 78 (end_print_np -> empty .)
    RBRACKET        reduce using rule 78 (end_print_np -> empty .)
    RETURN          reduce using rule 78 (end_print_np -> empty .)


state 287

    (75) print_many2 -> COMMA print_many_np print_many .

    RPAREN          reduce using rule 75 (print_many2 -> COMMA print_many_np print_many .)


state 288

    (92) exp_many -> COMMA exp exp_many .

    RPAREN          reduce using rule 92 (exp_many -> COMMA exp exp_many .)


state 289

    (40) variable_matrix -> LSQBRACKET exp . RSQBRACKET

    RSQBRACKET      shift and go to state 311


state 290

    (86) for -> FOR LPAREN for_np1 for_end body for_np2 .

    IF              reduce using rule 86 (for -> FOR LPAREN for_np1 for_end body for_np2 .)
    PRINT           reduce using rule 86 (for -> FOR LPAREN for_np1 for_end body for_np2 .)
    FOR             reduce using rule 86 (for -> FOR LPAREN for_np1 for_end body for_np2 .)
    DO              reduce using rule 86 (for -> FOR LPAREN for_np1 for_end body for_np2 .)
    ID              reduce using rule 86 (for -> FOR LPAREN for_np1 for_end body for_np2 .)
    RBRACKET        reduce using rule 86 (for -> FOR LPAREN for_np1 for_end body for_np2 .)
    RETURN          reduce using rule 86 (for -> FOR LPAREN for_np1 for_end body for_np2 .)


state 291

    (89) for_np2 -> SEMICOLON .

    IF              reduce using rule 89 (for_np2 -> SEMICOLON .)
    PRINT           reduce using rule 89 (for_np2 -> SEMICOLON .)
    FOR             reduce using rule 89 (for_np2 -> SEMICOLON .)
    DO              reduce using rule 89 (for_np2 -> SEMICOLON .)
    ID              reduce using rule 89 (for_np2 -> SEMICOLON .)
    RBRACKET        reduce using rule 89 (for_np2 -> SEMICOLON .)
    RETURN          reduce using rule 89 (for_np2 -> SEMICOLON .)


state 292

    (83) while -> DO seed body WHILE LPAREN exp . RPAREN SEMICOLON gotoV

    RPAREN          shift and go to state 312


state 293

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return . RBRACKET program_function

    RBRACKET        shift and go to state 313


state 294

    (53) return -> RETURN . exp SEMICOLON
    (121) exp -> . t_exp release_exp exp_or
    (125) t_exp -> . expression release_exp t_exp_and
    (129) expression -> . m_exp release_exp expression_comp
    (138) m_exp -> . term release_exp m_exp_sr
    (143) term -> . sub_factor release_exp term_pc
    (149) sub_factor -> . factor release_exp sub_factor_pc
    (153) factor -> . factor_exp
    (154) factor -> . factor_cte
    (155) factor -> . variable
    (156) factor -> . call_function
    (157) factor_exp -> . false_button exp release_false_button
    (160) factor_cte -> . CTE_FLOAT
    (161) factor_cte -> . CTE_INT
    (162) factor_cte -> . CTE_CHAR
    (37) variable -> . id_saver variable_array
    (90) call_function -> . function_saver LPAREN exp exp_many RPAREN
    (158) false_button -> . LPAREN
    (4) id_saver -> . ID empty
    (91) function_saver -> . ID empty

    CTE_FLOAT       shift and go to state 151
    CTE_INT         shift and go to state 152
    CTE_CHAR        shift and go to state 153
    LPAREN          shift and go to state 135
    ID              shift and go to state 154

    exp                            shift and go to state 314
    t_exp                          shift and go to state 127
    expression                     shift and go to state 136
    m_exp                          shift and go to state 143
    term                           shift and go to state 144
    sub_factor                     shift and go to state 145
    factor                         shift and go to state 146
    factor_exp                     shift and go to state 147
    factor_cte                     shift and go to state 148
    variable                       shift and go to state 122
    call_function                  shift and go to state 149
    false_button                   shift and go to state 150
    id_saver                       shift and go to state 87
    function_saver                 shift and go to state 86

state 295

    (54) return -> empty .

    RBRACKET        reduce using rule 54 (return -> empty .)


state 296

    (50) param2 -> COMMA s_type id_saver . add_params param2
    (52) add_params -> . empty
    (3) empty -> .

    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    add_params                     shift and go to state 315
    empty                          shift and go to state 168

state 297

    (79) read -> READ LPAREN variable RPAREN read_np .

    SEMICOLON       reduce using rule 79 (read -> READ LPAREN variable RPAREN read_np .)


state 298

    (80) read_np -> empty .

    SEMICOLON       reduce using rule 80 (read_np -> empty .)


state 299

    (105) exploration -> EXPLORATION LPAREN variable explore_var explor_cte . RPAREN

    RPAREN          shift and go to state 316


state 300

    (108) explor_cte -> COMMA . int_const_saver
    (5) int_const_saver -> . CTE_INT
    (6) int_const_saver -> . empty
    (3) empty -> .

    CTE_INT         shift and go to state 200
    RPAREN          reduce using rule 3 (empty -> .)

    int_const_saver                shift and go to state 317
    empty                          shift and go to state 201

state 301

    (109) explor_cte -> empty .

    RPAREN          reduce using rule 109 (explor_cte -> empty .)


state 302

    (106) explore_var -> COMMA variable .

    COMMA           reduce using rule 106 (explore_var -> COMMA variable .)
    RPAREN          reduce using rule 106 (explore_var -> COMMA variable .)


state 303

    (110) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable . COMMA variable COMMA variable RPAREN

    COMMA           shift and go to state 318


state 304

    (113) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable . dr_array dr_int RPAREN
    (114) dr_array -> . COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET
    (115) dr_array -> . empty
    (3) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 319
    RPAREN          reduce using rule 3 (empty -> .)

  ! COMMA           [ reduce using rule 3 (empty -> .) ]

    dr_array                       shift and go to state 320
    empty                          shift and go to state 321

state 305

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver . COMMA int_const_saver COMMA int_const_saver RPAREN

    COMMA           shift and go to state 322


state 306

    (120) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable . COMMA RPAREN

    COMMA           shift and go to state 323


state 307

    (130) expression_comp -> expression_comp_2 m_exp release_exp .

    AND             reduce using rule 130 (expression_comp -> expression_comp_2 m_exp release_exp .)
    OR              reduce using rule 130 (expression_comp -> expression_comp_2 m_exp release_exp .)
    SEMICOLON       reduce using rule 130 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RPAREN          reduce using rule 130 (expression_comp -> expression_comp_2 m_exp release_exp .)
    COMMA           reduce using rule 130 (expression_comp -> expression_comp_2 m_exp release_exp .)
    RSQBRACKET      reduce using rule 130 (expression_comp -> expression_comp_2 m_exp release_exp .)


state 308

    (66) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 . SEMICOLON end_condition

    SEMICOLON       shift and go to state 324


state 309

    (67) condition2 -> ELSE . condition_GOTO body
    (70) condition_GOTO -> . empty
    (3) empty -> .

    LBRACKET        reduce using rule 3 (empty -> .)

    condition_GOTO                 shift and go to state 325
    empty                          shift and go to state 326

state 310

    (68) condition2 -> empty .

    SEMICOLON       reduce using rule 68 (condition2 -> empty .)


state 311

    (40) variable_matrix -> LSQBRACKET exp RSQBRACKET .

    ASSIGN          reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    POWER           reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MULTIPLY        reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    DIVIDE          reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MODULE          reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    PLUS            reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    MINUS           reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GTHAN           reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    EQUAL           reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    NOTEQUAL        reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LTHAN           reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    GORE            reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    LORE            reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    AND             reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    OR              reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    SEMICOLON       reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RPAREN          reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    COMMA           reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)
    RSQBRACKET      reduce using rule 40 (variable_matrix -> LSQBRACKET exp RSQBRACKET .)


state 312

    (83) while -> DO seed body WHILE LPAREN exp RPAREN . SEMICOLON gotoV

    SEMICOLON       shift and go to state 327


state 313

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET . program_function
    (42) program_function -> . FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function
    (43) program_function -> . empty
    (3) empty -> .

    FUNCTION        shift and go to state 16
    MAIN            reduce using rule 3 (empty -> .)

    program_function               shift and go to state 328
    empty                          shift and go to state 17

state 314

    (53) return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 329


state 315

    (50) param2 -> COMMA s_type id_saver add_params . param2
    (50) param2 -> . COMMA s_type id_saver add_params param2
    (51) param2 -> . empty
    (3) empty -> .

    COMMA           shift and go to state 207
    RPAREN          reduce using rule 3 (empty -> .)

    param2                         shift and go to state 330
    empty                          shift and go to state 208

state 316

    (105) exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .

    SEMICOLON       reduce using rule 105 (exploration -> EXPLORATION LPAREN variable explore_var explor_cte RPAREN .)


state 317

    (108) explor_cte -> COMMA int_const_saver .

    RPAREN          reduce using rule 108 (explor_cte -> COMMA int_const_saver .)


state 318

    (110) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA . variable COMMA variable RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 331
    id_saver                       shift and go to state 87

state 319

    (114) dr_array -> COMMA . LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET

    LSQBRACKET      shift and go to state 332


state 320

    (113) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array . dr_int RPAREN
    (118) dr_int -> . COMMA int_const_saver
    (119) dr_int -> . empty
    (3) empty -> .

    COMMA           shift and go to state 333
    RPAREN          reduce using rule 3 (empty -> .)

    dr_int                         shift and go to state 334
    empty                          shift and go to state 335

state 321

    (115) dr_array -> empty .

    COMMA           reduce using rule 115 (dr_array -> empty .)
    RPAREN          reduce using rule 115 (dr_array -> empty .)


state 322

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA . int_const_saver COMMA int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT
    (6) int_const_saver -> . empty
    (3) empty -> .

    CTE_INT         shift and go to state 200
    COMMA           reduce using rule 3 (empty -> .)

    int_const_saver                shift and go to state 336
    empty                          shift and go to state 201

state 323

    (120) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA . RPAREN

    RPAREN          shift and go to state 337


state 324

    (66) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON . end_condition
    (71) end_condition -> . empty
    (3) empty -> .

    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)

    end_condition                  shift and go to state 338
    empty                          shift and go to state 339

state 325

    (67) condition2 -> ELSE condition_GOTO . body
    (57) body -> . LBRACKET inner_body RBRACKET

    LBRACKET        shift and go to state 165

    body                           shift and go to state 340

state 326

    (70) condition_GOTO -> empty .

    LBRACKET        reduce using rule 70 (condition_GOTO -> empty .)


state 327

    (83) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON . gotoV
    (85) gotoV -> . empty
    (3) empty -> .

    IF              reduce using rule 3 (empty -> .)
    PRINT           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    RBRACKET        reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)

    gotoV                          shift and go to state 341
    empty                          shift and go to state 342

state 328

    (42) program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .

    MAIN            reduce using rule 42 (program_function -> FUNCTION f_type id_saver func_creator LPAREN param RPAREN LBRACKET program_vars inner_body return RBRACKET program_function .)


state 329

    (53) return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 53 (return -> RETURN exp SEMICOLON .)


state 330

    (50) param2 -> COMMA s_type id_saver add_params param2 .

    RPAREN          reduce using rule 50 (param2 -> COMMA s_type id_saver add_params param2 .)


state 331

    (110) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable . COMMA variable RPAREN

    COMMA           shift and go to state 343


state 332

    (114) dr_array -> COMMA LSQBRACKET . CTE_CHAR dr_array_mp RSQBRACKET

    CTE_CHAR        shift and go to state 344


state 333

    (118) dr_int -> COMMA . int_const_saver
    (5) int_const_saver -> . CTE_INT
    (6) int_const_saver -> . empty
    (3) empty -> .

    CTE_INT         shift and go to state 200
    RPAREN          reduce using rule 3 (empty -> .)

    int_const_saver                shift and go to state 345
    empty                          shift and go to state 201

state 334

    (113) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int . RPAREN

    RPAREN          shift and go to state 346


state 335

    (119) dr_int -> empty .

    RPAREN          reduce using rule 119 (dr_int -> empty .)


state 336

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver . COMMA int_const_saver RPAREN

    COMMA           shift and go to state 347


state 337

    (120) model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .

    SEMICOLON       reduce using rule 120 (model_predict -> MODEL_PREDICT LPAREN variable COMMA variable COMMA RPAREN .)


state 338

    (66) condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .

    IF              reduce using rule 66 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    PRINT           reduce using rule 66 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    FOR             reduce using rule 66 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    DO              reduce using rule 66 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    ID              reduce using rule 66 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RBRACKET        reduce using rule 66 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)
    RETURN          reduce using rule 66 (condition -> IF LPAREN exp RPAREN condition_GOTOF body condition2 SEMICOLON end_condition .)


state 339

    (71) end_condition -> empty .

    IF              reduce using rule 71 (end_condition -> empty .)
    PRINT           reduce using rule 71 (end_condition -> empty .)
    FOR             reduce using rule 71 (end_condition -> empty .)
    DO              reduce using rule 71 (end_condition -> empty .)
    ID              reduce using rule 71 (end_condition -> empty .)
    RBRACKET        reduce using rule 71 (end_condition -> empty .)
    RETURN          reduce using rule 71 (end_condition -> empty .)


state 340

    (67) condition2 -> ELSE condition_GOTO body .

    SEMICOLON       reduce using rule 67 (condition2 -> ELSE condition_GOTO body .)


state 341

    (83) while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .

    IF              reduce using rule 83 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    PRINT           reduce using rule 83 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    FOR             reduce using rule 83 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    DO              reduce using rule 83 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    ID              reduce using rule 83 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RBRACKET        reduce using rule 83 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)
    RETURN          reduce using rule 83 (while -> DO seed body WHILE LPAREN exp RPAREN SEMICOLON gotoV .)


state 342

    (85) gotoV -> empty .

    IF              reduce using rule 85 (gotoV -> empty .)
    PRINT           reduce using rule 85 (gotoV -> empty .)
    FOR             reduce using rule 85 (gotoV -> empty .)
    DO              reduce using rule 85 (gotoV -> empty .)
    ID              reduce using rule 85 (gotoV -> empty .)
    RBRACKET        reduce using rule 85 (gotoV -> empty .)
    RETURN          reduce using rule 85 (gotoV -> empty .)


state 343

    (110) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA . variable RPAREN
    (37) variable -> . id_saver variable_array
    (4) id_saver -> . ID empty

    ID              shift and go to state 37

    variable                       shift and go to state 348
    id_saver                       shift and go to state 87

state 344

    (114) dr_array -> COMMA LSQBRACKET CTE_CHAR . dr_array_mp RSQBRACKET
    (116) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (117) dr_array_mp -> . empty
    (3) empty -> .

    COMMA           shift and go to state 349
    RSQBRACKET      reduce using rule 3 (empty -> .)

    dr_array_mp                    shift and go to state 350
    empty                          shift and go to state 351

state 345

    (118) dr_int -> COMMA int_const_saver .

    RPAREN          reduce using rule 118 (dr_int -> COMMA int_const_saver .)


state 346

    (113) dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .

    SEMICOLON       reduce using rule 113 (dummi_regression -> DUMMI_REGRESSION LPAREN variable COMMA variable dr_array dr_int RPAREN .)


state 347

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA . int_const_saver RPAREN
    (5) int_const_saver -> . CTE_INT
    (6) int_const_saver -> . empty
    (3) empty -> .

    CTE_INT         shift and go to state 200
    RPAREN          reduce using rule 3 (empty -> .)

    int_const_saver                shift and go to state 352
    empty                          shift and go to state 201

state 348

    (110) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable . RPAREN

    RPAREN          shift and go to state 353


state 349

    (116) dr_array_mp -> COMMA . CTE_CHAR dr_array_mp

    CTE_CHAR        shift and go to state 354


state 350

    (114) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp . RSQBRACKET

    RSQBRACKET      shift and go to state 355


state 351

    (117) dr_array_mp -> empty .

    RSQBRACKET      reduce using rule 117 (dr_array_mp -> empty .)


state 352

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver . RPAREN

    RPAREN          shift and go to state 356


state 353

    (110) financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .

    SEMICOLON       reduce using rule 110 (financial_state -> FINANCIAL_STATE LPAREN variable COMMA variable COMMA variable COMMA variable RPAREN .)


state 354

    (116) dr_array_mp -> COMMA CTE_CHAR . dr_array_mp
    (116) dr_array_mp -> . COMMA CTE_CHAR dr_array_mp
    (117) dr_array_mp -> . empty
    (3) empty -> .

    COMMA           shift and go to state 349
    RSQBRACKET      reduce using rule 3 (empty -> .)

    dr_array_mp                    shift and go to state 357
    empty                          shift and go to state 351

state 355

    (114) dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .

    COMMA           reduce using rule 114 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)
    RPAREN          reduce using rule 114 (dr_array -> COMMA LSQBRACKET CTE_CHAR dr_array_mp RSQBRACKET .)


state 356

    (112) trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .

    SEMICOLON       reduce using rule 112 (trend_prediction -> TREND_PREDICTION LPAREN variable COMMA int_const_saver COMMA int_const_saver COMMA int_const_saver RPAREN .)


state 357

    (116) dr_array_mp -> COMMA CTE_CHAR dr_array_mp .

    RSQBRACKET      reduce using rule 116 (dr_array_mp -> COMMA CTE_CHAR dr_array_mp .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 220 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 304 resolved as shift
